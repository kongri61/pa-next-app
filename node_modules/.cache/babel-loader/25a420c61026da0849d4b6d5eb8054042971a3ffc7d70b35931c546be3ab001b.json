{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\user\\\\\\uC9C0\\uB3C4\\uAE30\\uBC18\\uC0AC\\uC774\\uD2B8\\uB9CC\\uB4E4\\uAE30\\\\src\\\\components\\\\GoogleMap.tsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useRef, useState } from 'react';\nimport styled from 'styled-components';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst MapContainer = styled.div`\n  width: 100%;\n  height: 100%;\n  min-height: 400px;\n  background: #f0f0f0;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  color: #666;\n  font-size: 1rem;\n  position: relative;\n  overflow: visible;\n\n  /* 마름모형 기호 완전 제거 */\n  .gmnoprint {\n    display: none !important;\n  }\n  \n  /* 지도 타입 컨트롤 완전 제거 */\n  .gm-style-mtc {\n    display: none !important;\n  }\n  \n  /* 모든 불필요한 컨트롤 제거 */\n  .gm-style button[title*=\"Map\"] {\n    display: none !important;\n  }\n`;\n_c = MapContainer;\nconst GoogleMap = ({\n  properties,\n  onMarkerClick,\n  onClusterClick,\n  center = {\n    lat: 37.5665,\n    lng: 126.9780\n  },\n  // 서울 중심\n  zoom = 10 // 서울 중심에 맞는 줌 레벨\n}) => {\n  _s();\n  const mapRef = useRef(null);\n  const mapInstance = useRef(null);\n  const markersRef = useRef([]);\n  const [isMapLoaded, setIsMapLoaded] = useState(false);\n  const isClusterClicking = useRef(false); // 클러스터 클릭 중인지 확인하는 플래그\n\n  // 마커 클러스터링 함수\n  const createClusterMarker = (properties, center) => {\n    const marker = new window.google.maps.Marker({\n      position: center,\n      map: mapInstance.current,\n      icon: {\n        url: 'data:image/svg+xml;charset=UTF-8,' + encodeURIComponent(`\n          <svg width=\"40\" height=\"40\" viewBox=\"0 0 40 40\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n            <circle cx=\"20\" cy=\"20\" r=\"18\" fill=\"#2563eb\" stroke=\"#1e40af\" stroke-width=\"2\"/>\n            <text x=\"20\" y=\"25\" text-anchor=\"middle\" fill=\"white\" font-family=\"Arial, sans-serif\" font-size=\"12\" font-weight=\"bold\">${properties.length}</text>\n          </svg>\n        `),\n        scaledSize: new window.google.maps.Size(40, 40),\n        anchor: new window.google.maps.Point(20, 20)\n      }\n    });\n\n    // 클러스터 마커 클릭 시 해당 지역으로 줌\n    marker.addListener('click', () => {\n      console.log(`클러스터 클릭: ${properties.length}개 매물`);\n      if (properties.length === 1) {\n        // 단일 매물인 경우 해당 매물 클릭 이벤트 실행\n        if (onMarkerClick) {\n          onMarkerClick(properties[0]);\n        }\n      } else {\n        // 여러 매물인 경우 클러스터 클릭 이벤트 실행\n        isClusterClicking.current = true; // 클러스터 클릭 플래그 설정\n\n        // 현재 지도 상태 보존\n        const currentCenter = mapInstance.current.getCenter();\n        const currentZoom = mapInstance.current.getZoom();\n\n        // 지도 이벤트 완전 비활성화\n        mapInstance.current.setOptions({\n          gestureHandling: 'none',\n          zoomControl: false,\n          scrollwheel: false,\n          draggable: false,\n          disableDoubleClickZoom: true,\n          keyboardShortcuts: false\n        });\n        if (onClusterClick) {\n          onClusterClick(properties);\n        }\n        console.log(`클러스터 클릭 - 현재 줌: ${currentZoom}, 중심점: ${currentCenter.lat()}, ${currentCenter.lng()}`);\n\n        // 지도 상태 강제 복원 및 이벤트 재활성화 (더 긴 지연 시간)\n        setTimeout(() => {\n          mapInstance.current.setCenter(currentCenter);\n          mapInstance.current.setZoom(currentZoom);\n          mapInstance.current.setOptions({\n            gestureHandling: 'greedy',\n            zoomControl: true,\n            scrollwheel: true,\n            draggable: true,\n            disableDoubleClickZoom: false,\n            keyboardShortcuts: true\n          });\n          isClusterClicking.current = false;\n        }, 500);\n      }\n    });\n    return marker;\n  };\n\n  // 마커 클러스터링 로직\n  const clusterMarkers = (markers, zoom) => {\n    const clusters = [];\n\n    // 줌 레벨에 따른 클러스터 반경 조정 (매우 작은 반경으로 설정)\n    let clusterRadius;\n    if (zoom < 10) {\n      clusterRadius = 0.02; // 매우 넓은 반경 (줌 아웃 시)\n    } else if (zoom < 12) {\n      clusterRadius = 0.01; // 넓은 반경\n    } else if (zoom < 14) {\n      clusterRadius = 0.005; // 중간 반경\n    } else if (zoom < 16) {\n      clusterRadius = 0.002; // 좁은 반경\n    } else if (zoom < 18) {\n      clusterRadius = 0.001; // 매우 좁은 반경\n    } else {\n      clusterRadius = 0.00001; // 거의 개별 마커 (최대 줌 시)\n    }\n    console.log(`현재 줌 레벨: ${zoom}, 클러스터 반경: ${clusterRadius}`);\n\n    // 각 매물을 클러스터에 할당\n    properties.forEach((property, index) => {\n      let addedToCluster = false;\n\n      // 기존 클러스터에 추가할 수 있는지 확인\n      for (const cluster of clusters) {\n        const distance = Math.sqrt(Math.pow(property.location.lat - cluster.center.lat, 2) + Math.pow(property.location.lng - cluster.center.lng, 2));\n        console.log(`매물 ${property.id}와 클러스터 중심 거리: ${distance.toFixed(8)} (임계값: ${clusterRadius})`);\n        if (distance < clusterRadius) {\n          // 기존 클러스터에 추가\n          cluster.properties.push(property);\n          // 클러스터 중심 재계산\n          cluster.center = {\n            lat: cluster.properties.reduce((sum, p) => sum + p.location.lat, 0) / cluster.properties.length,\n            lng: cluster.properties.reduce((sum, p) => sum + p.location.lng, 0) / cluster.properties.length\n          };\n          addedToCluster = true;\n          console.log(`매물 ${property.id}를 기존 클러스터에 추가 (총 ${cluster.properties.length}개)`);\n          break;\n        }\n      }\n      if (!addedToCluster) {\n        // 새 클러스터 생성\n        clusters.push({\n          center: property.location,\n          properties: [property]\n        });\n        console.log(`새 클러스터 생성: 매물 ${property.id}`);\n      }\n    });\n    console.log(`총 ${clusters.length}개의 클러스터 생성됨`);\n    return clusters;\n  };\n\n  // 지도 초기화\n  useEffect(() => {\n    const initMap = () => {\n      if (!mapRef.current || !window.google || !window.google.maps) {\n        return false;\n      }\n      try {\n        // 기존 마커들 제거\n        markersRef.current.forEach(marker => {\n          if (marker && marker.setMap) {\n            marker.setMap(null);\n          }\n        });\n        markersRef.current = [];\n\n        // 지도 생성\n        const map = new window.google.maps.Map(mapRef.current, {\n          center,\n          zoom,\n          mapTypeId: window.google.maps.MapTypeId.ROADMAP,\n          zoomControl: true,\n          mapTypeControl: false,\n          scaleControl: false,\n          streetViewControl: false,\n          rotateControl: false,\n          fullscreenControl: false,\n          // Ctrl+스크롤 해제 및 화면 흔들림 방지\n          gestureHandling: 'greedy',\n          // 위성 타일 안정성 개선\n          mapTypeControlOptions: {\n            style: window.google.maps.MapTypeControlStyle.HORIZONTAL_BAR,\n            position: window.google.maps.ControlPosition.TOP_RIGHT\n          },\n          // 타일 로딩 최적화\n          backgroundColor: '#f0f0f0',\n          // 위성 타일 캐싱 개선\n          disableDefaultUI: false,\n          // 타일 로딩 성능 개선\n          maxZoom: 20,\n          minZoom: 8,\n          // 위성 타일 품질 개선\n          tilt: 0,\n          // 타일 로딩 최적화\n          zoomControlOptions: {\n            position: window.google.maps.ControlPosition.RIGHT_TOP\n          },\n          // 타일 렌더링 안정성 개선\n          disableDoubleClickZoom: false,\n          // 대한민국 본토만 표시 (주변국 최소화)\n          restriction: {\n            latLngBounds: {\n              north: 38.0,\n              // 최북단 (강원도)\n              south: 34.5,\n              // 최남단 (경남)\n              east: 131.0,\n              // 최동단 (울릉도)\n              west: 125.0 // 최서단 (서해안)\n            },\n            strictBounds: false // 경계를 넘어서도 줌 가능하도록\n          }\n        });\n        mapInstance.current = map;\n\n        // 지도 로드 완료 이벤트 추가\n        map.addListener('tilesloaded', () => {\n          console.log('지도 타일 로드 완료');\n          setIsMapLoaded(true);\n        });\n\n        // 지도 완전 로드 이벤트\n        map.addListener('idle', () => {\n          console.log('지도 완전 로드됨');\n          setIsMapLoaded(true);\n        });\n\n        // 지도가 생성되면 즉시 로드된 것으로 설정\n        setIsMapLoaded(true);\n        console.log('지도 초기화 완료');\n\n        // 마커 생성 및 클러스터링\n        const createMarkers = () => {\n          const currentZoom = map.getZoom();\n          console.log(`마커 생성 시작 - 줌 레벨: ${currentZoom}, 매물 수: ${properties.length}`);\n\n          // 줌 레벨이 18 이상이면 클러스터링 없이 개별 마커 생성\n          if (currentZoom >= 18) {\n            console.log('높은 줌 레벨 - 개별 마커만 생성');\n            properties.forEach((property, index) => {\n              const marker = new window.google.maps.Marker({\n                position: property.location,\n                map,\n                title: property.title,\n                icon: {\n                  url: 'data:image/svg+xml;charset=UTF-8,' + encodeURIComponent(`\n                    <svg width=\"30\" height=\"30\" viewBox=\"0 0 30 30\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n                      <circle cx=\"15\" cy=\"15\" r=\"13\" fill=\"#2563eb\" stroke=\"#1e40af\" stroke-width=\"2\"/>\n                      <text x=\"15\" y=\"19\" text-anchor=\"middle\" fill=\"white\" font-family=\"Arial, sans-serif\" font-size=\"10\" font-weight=\"bold\">1</text>\n                    </svg>\n                  `),\n                  scaledSize: new window.google.maps.Size(30, 30),\n                  anchor: new window.google.maps.Point(15, 15)\n                }\n              });\n              if (onMarkerClick) {\n                marker.addListener('click', () => {\n                  onMarkerClick(property);\n                });\n              }\n              markersRef.current.push(marker);\n              console.log(`개별 마커 생성: 매물 ${property.id} (${property.location.lat}, ${property.location.lng})`);\n            });\n          } else {\n            // 일반적인 클러스터링 로직\n            const clusters = clusterMarkers([], currentZoom);\n            clusters.forEach((cluster, clusterIndex) => {\n              console.log(`클러스터 ${clusterIndex + 1}: ${cluster.properties.length}개 매물`);\n              if (cluster.properties.length === 1) {\n                // 단일 마커 - \"1\" 표시\n                const property = cluster.properties[0];\n                const marker = new window.google.maps.Marker({\n                  position: property.location,\n                  map,\n                  title: property.title,\n                  icon: {\n                    url: 'data:image/svg+xml;charset=UTF-8,' + encodeURIComponent(`\n                      <svg width=\"30\" height=\"30\" viewBox=\"0 0 30 30\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n                        <circle cx=\"15\" cy=\"15\" r=\"13\" fill=\"#2563eb\" stroke=\"#1e40af\" stroke-width=\"2\"/>\n                        <text x=\"15\" y=\"19\" text-anchor=\"middle\" fill=\"white\" font-family=\"Arial, sans-serif\" font-size=\"10\" font-weight=\"bold\">1</text>\n                      </svg>\n                    `),\n                    scaledSize: new window.google.maps.Size(30, 30),\n                    anchor: new window.google.maps.Point(15, 15)\n                  }\n                });\n                if (onMarkerClick) {\n                  marker.addListener('click', () => {\n                    onMarkerClick(property);\n                  });\n                }\n                markersRef.current.push(marker);\n                console.log(`단일 마커 생성: 매물 ${property.id} (${property.location.lat}, ${property.location.lng})`);\n              } else {\n                // 클러스터 마커 - 묶인 개수 표시\n                const clusterMarker = createClusterMarker(cluster.properties, cluster.center);\n                markersRef.current.push(clusterMarker);\n                console.log(`클러스터 마커 생성: ${cluster.properties.length}개 매물 (중심: ${cluster.center.lat}, ${cluster.center.lng})`);\n              }\n            });\n          }\n          console.log(`총 ${markersRef.current.length}개의 마커 생성 완료`);\n        };\n\n        // 초기 마커 생성\n        createMarkers();\n\n        // 줌 변경 시 마커 재생성\n        map.addListener('zoom_changed', () => {\n          // 클러스터 클릭 중일 때는 마커 재생성하지 않음\n          if (isClusterClicking.current) {\n            console.log('클러스터 클릭 중 - 마커 재생성 건너뜀');\n            return;\n          }\n          const newZoom = map.getZoom();\n          console.log('줌 레벨 변경됨:', newZoom);\n\n          // 기존 마커 제거\n          markersRef.current.forEach(marker => {\n            if (marker && marker.setMap) {\n              marker.setMap(null);\n            }\n          });\n          markersRef.current = [];\n\n          // 새 마커 생성 (지연 시간 단축)\n          setTimeout(() => {\n            // 다시 한번 클러스터 클릭 중인지 확인\n            if (!isClusterClicking.current) {\n              try {\n                createMarkers();\n              } catch (error) {\n                console.error('마커 재생성 중 오류:', error);\n              }\n            }\n          }, 100);\n        });\n        return true;\n      } catch (error) {\n        console.error('지도 초기화 오류:', error);\n        return false;\n      }\n    };\n\n    // Google Maps API 로딩 확인 및 지도 초기화\n    const checkAndInit = () => {\n      if (window.google && window.google.maps) {\n        if (initMap()) {\n          setIsMapLoaded(true); // 지도가 로드되면 상태 업데이트\n          return;\n        }\n      }\n\n      // API가 로드되지 않았으면 100ms 후 다시 시도\n      setTimeout(checkAndInit, 100);\n    };\n    checkAndInit();\n\n    // 컴포넌트 언마운트 시 정리\n    return () => {\n      markersRef.current.forEach(marker => {\n        if (marker && marker.setMap) {\n          marker.setMap(null);\n        }\n      });\n      markersRef.current = [];\n    };\n  }, [properties, onMarkerClick, onClusterClick, center, zoom]);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(MapContainer, {\n      ref: mapRef\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 423,\n      columnNumber: 7\n    }, this)\n  }, void 0, false);\n};\n_s(GoogleMap, \"4pS4rm+QWFbDC1GOoLTozpD0Jr8=\");\n_c2 = GoogleMap;\nexport default GoogleMap;\nvar _c, _c2;\n$RefreshReg$(_c, \"MapContainer\");\n$RefreshReg$(_c2, \"GoogleMap\");","map":{"version":3,"names":["React","useEffect","useRef","useState","styled","jsxDEV","_jsxDEV","Fragment","_Fragment","MapContainer","div","_c","GoogleMap","properties","onMarkerClick","onClusterClick","center","lat","lng","zoom","_s","mapRef","mapInstance","markersRef","isMapLoaded","setIsMapLoaded","isClusterClicking","createClusterMarker","marker","window","google","maps","Marker","position","map","current","icon","url","encodeURIComponent","length","scaledSize","Size","anchor","Point","addListener","console","log","currentCenter","getCenter","currentZoom","getZoom","setOptions","gestureHandling","zoomControl","scrollwheel","draggable","disableDoubleClickZoom","keyboardShortcuts","setTimeout","setCenter","setZoom","clusterMarkers","markers","clusters","clusterRadius","forEach","property","index","addedToCluster","cluster","distance","Math","sqrt","pow","location","id","toFixed","push","reduce","sum","p","initMap","setMap","Map","mapTypeId","MapTypeId","ROADMAP","mapTypeControl","scaleControl","streetViewControl","rotateControl","fullscreenControl","mapTypeControlOptions","style","MapTypeControlStyle","HORIZONTAL_BAR","ControlPosition","TOP_RIGHT","backgroundColor","disableDefaultUI","maxZoom","minZoom","tilt","zoomControlOptions","RIGHT_TOP","restriction","latLngBounds","north","south","east","west","strictBounds","createMarkers","title","clusterIndex","clusterMarker","newZoom","error","checkAndInit","children","ref","fileName","_jsxFileName","lineNumber","columnNumber","_c2","$RefreshReg$"],"sources":["C:/Users/user/지도기반사이트만들기/src/components/GoogleMap.tsx"],"sourcesContent":["import React, { useEffect, useRef, useState } from 'react';\r\nimport styled from 'styled-components';\r\nimport { Property } from '../types';\r\n\r\nconst MapContainer = styled.div`\r\n  width: 100%;\r\n  height: 100%;\r\n  min-height: 400px;\r\n  background: #f0f0f0;\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n  color: #666;\r\n  font-size: 1rem;\r\n  position: relative;\r\n  overflow: visible;\r\n\r\n  /* 마름모형 기호 완전 제거 */\r\n  .gmnoprint {\r\n    display: none !important;\r\n  }\r\n  \r\n  /* 지도 타입 컨트롤 완전 제거 */\r\n  .gm-style-mtc {\r\n    display: none !important;\r\n  }\r\n  \r\n  /* 모든 불필요한 컨트롤 제거 */\r\n  .gm-style button[title*=\"Map\"] {\r\n    display: none !important;\r\n  }\r\n`;\r\n\r\ninterface GoogleMapProps {\r\n  properties: Property[];\r\n  onMarkerClick?: (property: Property) => void;\r\n  onClusterClick?: (properties: Property[]) => void;\r\n  center?: { lat: number; lng: number };\r\n  zoom?: number;\r\n}\r\n\r\ndeclare global {\r\n  interface Window {\r\n    google: any;\r\n  }\r\n}\r\n\r\nconst GoogleMap: React.FC<GoogleMapProps> = ({\r\n  properties,\r\n  onMarkerClick,\r\n  onClusterClick,\r\n  center = { lat: 37.5665, lng: 126.9780 }, // 서울 중심\r\n  zoom = 10 // 서울 중심에 맞는 줌 레벨\r\n}) => {\r\n  const mapRef = useRef<HTMLDivElement>(null);\r\n  const mapInstance = useRef<any>(null);\r\n  const markersRef = useRef<any[]>([]);\r\n  const [isMapLoaded, setIsMapLoaded] = useState(false);\r\n  const isClusterClicking = useRef(false); // 클러스터 클릭 중인지 확인하는 플래그\r\n\r\n  // 마커 클러스터링 함수\r\n  const createClusterMarker = (properties: Property[], center: { lat: number; lng: number }) => {\r\n    const marker = new window.google.maps.Marker({\r\n      position: center,\r\n      map: mapInstance.current,\r\n      icon: {\r\n        url: 'data:image/svg+xml;charset=UTF-8,' + encodeURIComponent(`\r\n          <svg width=\"40\" height=\"40\" viewBox=\"0 0 40 40\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\r\n            <circle cx=\"20\" cy=\"20\" r=\"18\" fill=\"#2563eb\" stroke=\"#1e40af\" stroke-width=\"2\"/>\r\n            <text x=\"20\" y=\"25\" text-anchor=\"middle\" fill=\"white\" font-family=\"Arial, sans-serif\" font-size=\"12\" font-weight=\"bold\">${properties.length}</text>\r\n          </svg>\r\n        `),\r\n        scaledSize: new window.google.maps.Size(40, 40),\r\n        anchor: new window.google.maps.Point(20, 20)\r\n      }\r\n    });\r\n\r\n    // 클러스터 마커 클릭 시 해당 지역으로 줌\r\n    marker.addListener('click', () => {\r\n      console.log(`클러스터 클릭: ${properties.length}개 매물`);\r\n      \r\n      if (properties.length === 1) {\r\n        // 단일 매물인 경우 해당 매물 클릭 이벤트 실행\r\n        if (onMarkerClick) {\r\n          onMarkerClick(properties[0]);\r\n        }\r\n      } else {\r\n        // 여러 매물인 경우 클러스터 클릭 이벤트 실행\r\n        isClusterClicking.current = true; // 클러스터 클릭 플래그 설정\r\n        \r\n        // 현재 지도 상태 보존\r\n        const currentCenter = mapInstance.current.getCenter();\r\n        const currentZoom = mapInstance.current.getZoom();\r\n        \r\n        // 지도 이벤트 완전 비활성화\r\n        mapInstance.current.setOptions({\r\n          gestureHandling: 'none',\r\n          zoomControl: false,\r\n          scrollwheel: false,\r\n          draggable: false,\r\n          disableDoubleClickZoom: true,\r\n          keyboardShortcuts: false\r\n        });\r\n        \r\n        if (onClusterClick) {\r\n          onClusterClick(properties);\r\n        }\r\n        \r\n        console.log(`클러스터 클릭 - 현재 줌: ${currentZoom}, 중심점: ${currentCenter.lat()}, ${currentCenter.lng()}`);\r\n        \r\n        // 지도 상태 강제 복원 및 이벤트 재활성화 (더 긴 지연 시간)\r\n        setTimeout(() => {\r\n          mapInstance.current.setCenter(currentCenter);\r\n          mapInstance.current.setZoom(currentZoom);\r\n          mapInstance.current.setOptions({\r\n            gestureHandling: 'greedy',\r\n            zoomControl: true,\r\n            scrollwheel: true,\r\n            draggable: true,\r\n            disableDoubleClickZoom: false,\r\n            keyboardShortcuts: true\r\n          });\r\n          isClusterClicking.current = false;\r\n        }, 500);\r\n      }\r\n    });\r\n\r\n    return marker;\r\n  };\r\n\r\n  // 마커 클러스터링 로직\r\n  const clusterMarkers = (markers: any[], zoom: number) => {\r\n    const clusters: { center: { lat: number; lng: number }; properties: Property[] }[] = [];\r\n    \r\n    // 줌 레벨에 따른 클러스터 반경 조정 (매우 작은 반경으로 설정)\r\n    let clusterRadius: number;\r\n    if (zoom < 10) {\r\n      clusterRadius = 0.02; // 매우 넓은 반경 (줌 아웃 시)\r\n    } else if (zoom < 12) {\r\n      clusterRadius = 0.01; // 넓은 반경\r\n    } else if (zoom < 14) {\r\n      clusterRadius = 0.005; // 중간 반경\r\n    } else if (zoom < 16) {\r\n      clusterRadius = 0.002; // 좁은 반경\r\n    } else if (zoom < 18) {\r\n      clusterRadius = 0.001; // 매우 좁은 반경\r\n    } else {\r\n      clusterRadius = 0.00001; // 거의 개별 마커 (최대 줌 시)\r\n    }\r\n\r\n    console.log(`현재 줌 레벨: ${zoom}, 클러스터 반경: ${clusterRadius}`);\r\n\r\n    // 각 매물을 클러스터에 할당\r\n    properties.forEach((property, index) => {\r\n      let addedToCluster = false;\r\n\r\n      // 기존 클러스터에 추가할 수 있는지 확인\r\n      for (const cluster of clusters) {\r\n        const distance = Math.sqrt(\r\n          Math.pow(property.location.lat - cluster.center.lat, 2) +\r\n          Math.pow(property.location.lng - cluster.center.lng, 2)\r\n        );\r\n\r\n        console.log(`매물 ${property.id}와 클러스터 중심 거리: ${distance.toFixed(8)} (임계값: ${clusterRadius})`);\r\n\r\n        if (distance < clusterRadius) {\r\n          // 기존 클러스터에 추가\r\n          cluster.properties.push(property);\r\n          // 클러스터 중심 재계산\r\n          cluster.center = {\r\n            lat: cluster.properties.reduce((sum, p) => sum + p.location.lat, 0) / cluster.properties.length,\r\n            lng: cluster.properties.reduce((sum, p) => sum + p.location.lng, 0) / cluster.properties.length\r\n          };\r\n          addedToCluster = true;\r\n          console.log(`매물 ${property.id}를 기존 클러스터에 추가 (총 ${cluster.properties.length}개)`);\r\n          break;\r\n        }\r\n      }\r\n\r\n      if (!addedToCluster) {\r\n        // 새 클러스터 생성\r\n        clusters.push({\r\n          center: property.location,\r\n          properties: [property]\r\n        });\r\n        console.log(`새 클러스터 생성: 매물 ${property.id}`);\r\n      }\r\n    });\r\n\r\n    console.log(`총 ${clusters.length}개의 클러스터 생성됨`);\r\n    return clusters;\r\n  };\r\n\r\n  // 지도 초기화\r\n  useEffect(() => {\r\n    const initMap = () => {\r\n      if (!mapRef.current || !window.google || !window.google.maps) {\r\n        return false;\r\n      }\r\n\r\n      try {\r\n        // 기존 마커들 제거\r\n        markersRef.current.forEach(marker => {\r\n          if (marker && marker.setMap) {\r\n            marker.setMap(null);\r\n          }\r\n        });\r\n        markersRef.current = [];\r\n\r\n        // 지도 생성\r\n        const map = new window.google.maps.Map(mapRef.current, {\r\n          center,\r\n          zoom,\r\n          mapTypeId: window.google.maps.MapTypeId.ROADMAP,\r\n          zoomControl: true,\r\n          mapTypeControl: false,\r\n          scaleControl: false,\r\n          streetViewControl: false,\r\n          rotateControl: false,\r\n          fullscreenControl: false,\r\n          // Ctrl+스크롤 해제 및 화면 흔들림 방지\r\n          gestureHandling: 'greedy',\r\n          // 위성 타일 안정성 개선\r\n          mapTypeControlOptions: {\r\n            style: window.google.maps.MapTypeControlStyle.HORIZONTAL_BAR,\r\n            position: window.google.maps.ControlPosition.TOP_RIGHT\r\n          },\r\n          // 타일 로딩 최적화\r\n          backgroundColor: '#f0f0f0',\r\n          // 위성 타일 캐싱 개선\r\n          disableDefaultUI: false,\r\n          // 타일 로딩 성능 개선\r\n          maxZoom: 20,\r\n          minZoom: 8,\r\n          // 위성 타일 품질 개선\r\n          tilt: 0,\r\n          // 타일 로딩 최적화\r\n          zoomControlOptions: {\r\n            position: window.google.maps.ControlPosition.RIGHT_TOP\r\n          },\r\n          // 타일 렌더링 안정성 개선\r\n          disableDoubleClickZoom: false,\r\n          // 대한민국 본토만 표시 (주변국 최소화)\r\n          restriction: {\r\n            latLngBounds: {\r\n              north: 38.0, // 최북단 (강원도)\r\n              south: 34.5, // 최남단 (경남)\r\n              east: 131.0, // 최동단 (울릉도)\r\n              west: 125.0  // 최서단 (서해안)\r\n            },\r\n            strictBounds: false // 경계를 넘어서도 줌 가능하도록\r\n          }\r\n        });\r\n\r\n        mapInstance.current = map;\r\n\r\n        // 지도 로드 완료 이벤트 추가\r\n        map.addListener('tilesloaded', () => {\r\n          console.log('지도 타일 로드 완료');\r\n          setIsMapLoaded(true);\r\n        });\r\n\r\n        // 지도 완전 로드 이벤트\r\n        map.addListener('idle', () => {\r\n          console.log('지도 완전 로드됨');\r\n          setIsMapLoaded(true);\r\n        });\r\n\r\n        // 지도가 생성되면 즉시 로드된 것으로 설정\r\n        setIsMapLoaded(true);\r\n        console.log('지도 초기화 완료');\r\n\r\n        // 마커 생성 및 클러스터링\r\n        const createMarkers = () => {\r\n          const currentZoom = map.getZoom();\r\n          console.log(`마커 생성 시작 - 줌 레벨: ${currentZoom}, 매물 수: ${properties.length}`);\r\n          \r\n          // 줌 레벨이 18 이상이면 클러스터링 없이 개별 마커 생성\r\n          if (currentZoom >= 18) {\r\n            console.log('높은 줌 레벨 - 개별 마커만 생성');\r\n            properties.forEach((property, index) => {\r\n              const marker = new window.google.maps.Marker({\r\n                position: property.location,\r\n                map,\r\n                title: property.title,\r\n                icon: {\r\n                  url: 'data:image/svg+xml;charset=UTF-8,' + encodeURIComponent(`\r\n                    <svg width=\"30\" height=\"30\" viewBox=\"0 0 30 30\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\r\n                      <circle cx=\"15\" cy=\"15\" r=\"13\" fill=\"#2563eb\" stroke=\"#1e40af\" stroke-width=\"2\"/>\r\n                      <text x=\"15\" y=\"19\" text-anchor=\"middle\" fill=\"white\" font-family=\"Arial, sans-serif\" font-size=\"10\" font-weight=\"bold\">1</text>\r\n                    </svg>\r\n                  `),\r\n                  scaledSize: new window.google.maps.Size(30, 30),\r\n                  anchor: new window.google.maps.Point(15, 15)\r\n                }\r\n              });\r\n\r\n              if (onMarkerClick) {\r\n                marker.addListener('click', () => {\r\n                  onMarkerClick(property);\r\n                });\r\n              }\r\n\r\n              markersRef.current.push(marker);\r\n              console.log(`개별 마커 생성: 매물 ${property.id} (${property.location.lat}, ${property.location.lng})`);\r\n            });\r\n          } else {\r\n            // 일반적인 클러스터링 로직\r\n            const clusters = clusterMarkers([], currentZoom);\r\n\r\n            clusters.forEach((cluster, clusterIndex) => {\r\n              console.log(`클러스터 ${clusterIndex + 1}: ${cluster.properties.length}개 매물`);\r\n              \r\n              if (cluster.properties.length === 1) {\r\n                // 단일 마커 - \"1\" 표시\r\n                const property = cluster.properties[0];\r\n                const marker = new window.google.maps.Marker({\r\n                  position: property.location,\r\n                  map,\r\n                  title: property.title,\r\n                  icon: {\r\n                    url: 'data:image/svg+xml;charset=UTF-8,' + encodeURIComponent(`\r\n                      <svg width=\"30\" height=\"30\" viewBox=\"0 0 30 30\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\r\n                        <circle cx=\"15\" cy=\"15\" r=\"13\" fill=\"#2563eb\" stroke=\"#1e40af\" stroke-width=\"2\"/>\r\n                        <text x=\"15\" y=\"19\" text-anchor=\"middle\" fill=\"white\" font-family=\"Arial, sans-serif\" font-size=\"10\" font-weight=\"bold\">1</text>\r\n                      </svg>\r\n                    `),\r\n                    scaledSize: new window.google.maps.Size(30, 30),\r\n                    anchor: new window.google.maps.Point(15, 15)\r\n                  }\r\n                });\r\n\r\n                if (onMarkerClick) {\r\n                  marker.addListener('click', () => {\r\n                    onMarkerClick(property);\r\n                  });\r\n                }\r\n\r\n                markersRef.current.push(marker);\r\n                console.log(`단일 마커 생성: 매물 ${property.id} (${property.location.lat}, ${property.location.lng})`);\r\n              } else {\r\n                // 클러스터 마커 - 묶인 개수 표시\r\n                const clusterMarker = createClusterMarker(cluster.properties, cluster.center);\r\n                markersRef.current.push(clusterMarker);\r\n                console.log(`클러스터 마커 생성: ${cluster.properties.length}개 매물 (중심: ${cluster.center.lat}, ${cluster.center.lng})`);\r\n              }\r\n            });\r\n          }\r\n          \r\n          console.log(`총 ${markersRef.current.length}개의 마커 생성 완료`);\r\n        };\r\n\r\n        // 초기 마커 생성\r\n        createMarkers();\r\n\r\n        // 줌 변경 시 마커 재생성\r\n        map.addListener('zoom_changed', () => {\r\n          // 클러스터 클릭 중일 때는 마커 재생성하지 않음\r\n          if (isClusterClicking.current) {\r\n            console.log('클러스터 클릭 중 - 마커 재생성 건너뜀');\r\n            return;\r\n          }\r\n          \r\n          const newZoom = map.getZoom();\r\n          console.log('줌 레벨 변경됨:', newZoom);\r\n          \r\n          // 기존 마커 제거\r\n          markersRef.current.forEach(marker => {\r\n            if (marker && marker.setMap) {\r\n              marker.setMap(null);\r\n            }\r\n          });\r\n          markersRef.current = [];\r\n\r\n          // 새 마커 생성 (지연 시간 단축)\r\n          setTimeout(() => {\r\n            // 다시 한번 클러스터 클릭 중인지 확인\r\n            if (!isClusterClicking.current) {\r\n              try {\r\n                createMarkers();\r\n              } catch (error) {\r\n                console.error('마커 재생성 중 오류:', error);\r\n              }\r\n            }\r\n          }, 100);\r\n        });\r\n\r\n        return true;\r\n      } catch (error) {\r\n        console.error('지도 초기화 오류:', error);\r\n        return false;\r\n      }\r\n    };\r\n\r\n    // Google Maps API 로딩 확인 및 지도 초기화\r\n    const checkAndInit = () => {\r\n      if (window.google && window.google.maps) {\r\n        if (initMap()) {\r\n          setIsMapLoaded(true); // 지도가 로드되면 상태 업데이트\r\n          return;\r\n        }\r\n      }\r\n      \r\n      // API가 로드되지 않았으면 100ms 후 다시 시도\r\n      setTimeout(checkAndInit, 100);\r\n    };\r\n\r\n    checkAndInit();\r\n\r\n    // 컴포넌트 언마운트 시 정리\r\n    return () => {\r\n      markersRef.current.forEach(marker => {\r\n        if (marker && marker.setMap) {\r\n          marker.setMap(null);\r\n        }\r\n      });\r\n      markersRef.current = [];\r\n    };\r\n  }, [properties, onMarkerClick, onClusterClick, center, zoom]);\r\n\r\n  return (\r\n    <>\r\n      <MapContainer ref={mapRef} />\r\n    </>\r\n  );\r\n};\r\n\r\nexport default GoogleMap; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}