{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\user\\\\\\uC9C0\\uB3C4\\uAE30\\uBC18\\uC0AC\\uC774\\uD2B8\\uB9CC\\uB4E4\\uAE30\\\\src\\\\components\\\\GoogleMap.tsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useRef, useState, useCallback } from 'react';\nimport styled from 'styled-components';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst MapContainer = styled.div`\n  width: 100%;\n  height: 100%;\n  min-height: 400px;\n  position: relative;\n  overflow: visible;\n  background: #f0f0f0;\n`;\n_c = MapContainer;\nconst FallbackMap = styled.div`\n  width: 100%;\n  height: 100%;\n  background: linear-gradient(45deg, #e5e7eb 25%, transparent 25%), \n              linear-gradient(-45deg, #e5e7eb 25%, transparent 25%), \n              linear-gradient(45deg, transparent 75%, #e5e7eb 75%), \n              linear-gradient(-45deg, transparent 75%, #e5e7eb 75%);\n  background-size: 20px 20px;\n  background-position: 0 0, 0 10px, 10px -10px, -10px 0px;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  color: #6b7280;\n  font-size: 1.2rem;\n  font-weight: 500;\n`;\n_c2 = FallbackMap;\nconst MapError = styled.div`\n  text-align: center;\n  padding: 2rem;\n  background: white;\n  border-radius: 8px;\n  box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);\n  max-width: 400px;\n`;\n_c3 = MapError;\nconst GoogleMap = ({\n  properties,\n  onMarkerClick,\n  onClusterClick,\n  selectedMarkerId,\n  setSelectedMarkerId,\n  selectedClusterId,\n  setSelectedClusterId\n}) => {\n  _s();\n  const mapRef = useRef(null);\n  const mapInstance = useRef(null);\n  const markersRef = useRef([]);\n  const isClusterClicking = useRef(false);\n  const [isMapLoaded, setIsMapLoaded] = useState(false);\n  const [mapError, setMapError] = useState(null);\n\n  // 가격 포맷팅 함수\n  const formatPrice = useCallback(price => {\n    if (price >= 100000000) {\n      return `${Math.floor(price / 100000000)}억원`;\n    } else if (price >= 10000) {\n      return `${Math.floor(price / 10000)}만원`;\n    }\n    return `${price.toLocaleString()}원`;\n  }, []);\n\n  // 마커 클러스터링 함수\n  const createClusterMarker = useCallback((properties, center) => {\n    const clusterId = properties.map(p => p.id).join(',');\n    const isSelected = selectedClusterId === clusterId;\n    const propertyCount = properties.length;\n\n    // 매물 개수에 따른 클러스터 마커 크기와 색상 결정\n    let markerSize = 40;\n    let fontSize = 14;\n    let backgroundColor = '#2563eb';\n    let borderColor = '#1e40af';\n    if (propertyCount >= 10) {\n      markerSize = 50;\n      fontSize = 16;\n      backgroundColor = '#dc2626'; // 빨간색\n      borderColor = '#b91c1c';\n    } else if (propertyCount >= 5) {\n      markerSize = 45;\n      fontSize = 15;\n      backgroundColor = '#f59e0b'; // 주황색\n      borderColor = '#d97706';\n    } else if (propertyCount >= 3) {\n      markerSize = 42;\n      fontSize = 14;\n      backgroundColor = '#10b981'; // 초록색\n      borderColor = '#059669';\n    }\n    const marker = new window.google.maps.Marker({\n      position: center,\n      map: mapInstance.current,\n      icon: {\n        url: 'data:image/svg+xml;charset=UTF-8,' + encodeURIComponent(isSelected ? `<svg width=\"${markerSize + 4}\" height=\"${markerSize + 4}\" viewBox=\"0 0 ${markerSize + 4} ${markerSize + 4}\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n                <circle cx=\"${(markerSize + 4) / 2}\" cy=\"${(markerSize + 4) / 2}\" r=\"${markerSize / 2}\" fill=\"white\" stroke=\"#111\" stroke-width=\"3\"/>\n                <text x=\"${(markerSize + 4) / 2}\" y=\"${(markerSize + 4) / 2 + fontSize / 3}\" text-anchor=\"middle\" fill=\"#111\" font-family=\"Arial, sans-serif\" font-size=\"${fontSize}\" font-weight=\"bold\">${propertyCount}</text>\n              </svg>` : `<svg width=\"${markerSize}\" height=\"${markerSize}\" viewBox=\"0 0 ${markerSize} ${markerSize}\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n                <circle cx=\"${markerSize / 2}\" cy=\"${markerSize / 2}\" r=\"${markerSize / 2 - 2}\" fill=\"${backgroundColor}\" stroke=\"${borderColor}\" stroke-width=\"3\"/>\n                <text x=\"${markerSize / 2}\" y=\"${markerSize / 2 + fontSize / 3}\" text-anchor=\"middle\" fill=\"white\" font-family=\"Arial, sans-serif\" font-size=\"${fontSize}\" font-weight=\"bold\">${propertyCount}</text>\n              </svg>`),\n        scaledSize: isSelected ? new window.google.maps.Size(markerSize + 4, markerSize + 4) : new window.google.maps.Size(markerSize, markerSize),\n        anchor: isSelected ? new window.google.maps.Point((markerSize + 4) / 2, (markerSize + 4) / 2) : new window.google.maps.Point(markerSize / 2, markerSize / 2)\n      }\n    });\n\n    // 클러스터 마커 hover 이벤트 - 흰색 배경에 검정 글씨\n    marker.addListener('mouseover', () => {\n      marker.setIcon({\n        url: 'data:image/svg+xml;charset=UTF-8,' + encodeURIComponent(`<svg width=\"${markerSize + 2}\" height=\"${markerSize + 2}\" viewBox=\"0 0 ${markerSize + 2} ${markerSize + 2}\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n            <circle cx=\"${(markerSize + 2) / 2}\" cy=\"${(markerSize + 2) / 2}\" r=\"${markerSize / 2}\" fill=\"white\" stroke=\"#111\" stroke-width=\"3\"/>\n            <text x=\"${(markerSize + 2) / 2}\" y=\"${(markerSize + 2) / 2 + fontSize / 3}\" text-anchor=\"middle\" fill=\"#111\" font-family=\"Arial, sans-serif\" font-size=\"${fontSize}\" font-weight=\"bold\">${propertyCount}</text>\n          </svg>`),\n        scaledSize: new window.google.maps.Size(markerSize + 2, markerSize + 2),\n        anchor: new window.google.maps.Point((markerSize + 2) / 2, (markerSize + 2) / 2)\n      });\n    });\n    marker.addListener('mouseout', () => {\n      marker.setIcon({\n        url: 'data:image/svg+xml;charset=UTF-8,' + encodeURIComponent(isSelected ? `<svg width=\"${markerSize + 4}\" height=\"${markerSize + 4}\" viewBox=\"0 0 ${markerSize + 4} ${markerSize + 4}\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n                <circle cx=\"${(markerSize + 4) / 2}\" cy=\"${(markerSize + 4) / 2}\" r=\"${markerSize / 2}\" fill=\"white\" stroke=\"#111\" stroke-width=\"3\"/>\n                <text x=\"${(markerSize + 4) / 2}\" y=\"${(markerSize + 4) / 2 + fontSize / 3}\" text-anchor=\"middle\" fill=\"#111\" font-family=\"Arial, sans-serif\" font-size=\"${fontSize}\" font-weight=\"bold\">${propertyCount}</text>\n              </svg>` : `<svg width=\"${markerSize}\" height=\"${markerSize}\" viewBox=\"0 0 ${markerSize} ${markerSize}\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n                <circle cx=\"${markerSize / 2}\" cy=\"${markerSize / 2}\" r=\"${markerSize / 2 - 2}\" fill=\"${backgroundColor}\" stroke=\"${borderColor}\" stroke-width=\"3\"/>\n                <text x=\"${markerSize / 2}\" y=\"${markerSize / 2 + fontSize / 3}\" text-anchor=\"middle\" fill=\"white\" font-family=\"Arial, sans-serif\" font-size=\"${fontSize}\" font-weight=\"bold\">${propertyCount}</text>\n              </svg>`),\n        scaledSize: isSelected ? new window.google.maps.Size(markerSize + 4, markerSize + 4) : new window.google.maps.Size(markerSize, markerSize),\n        anchor: isSelected ? new window.google.maps.Point((markerSize + 4) / 2, (markerSize + 4) / 2) : new window.google.maps.Point(markerSize / 2, markerSize / 2)\n      });\n    });\n    marker.addListener('click', () => {\n      console.log(`클러스터 클릭: ${propertyCount}개 매물`);\n      isClusterClicking.current = true;\n      if (propertyCount === 1) {\n        if (onMarkerClick) {\n          onMarkerClick(properties[0]);\n        }\n      } else {\n        if (onClusterClick) {\n          onClusterClick(properties);\n        }\n      }\n      setTimeout(() => {\n        isClusterClicking.current = false;\n      }, 1500);\n    });\n    return marker;\n  }, [onMarkerClick, onClusterClick, selectedClusterId, formatPrice]);\n\n  // 마커 클러스터링 로직\n  const clusterMarkers = (markers, zoom) => {\n    const clusters = [];\n\n    // 줌 레벨에 따른 클러스터 반경 설정 - 더 좁게 조정\n    let clusterRadius;\n    if (zoom < 8) {\n      clusterRadius = 0.05; // 매우 넓은 범위\n    } else if (zoom < 10) {\n      clusterRadius = 0.02; // 넓은 범위\n    } else if (zoom < 12) {\n      clusterRadius = 0.01; // 중간 범위\n    } else if (zoom < 14) {\n      clusterRadius = 0.005; // 좁은 범위\n    } else if (zoom < 16) {\n      clusterRadius = 0.002; // 매우 좁은 범위\n    } else if (zoom < 18) {\n      clusterRadius = 0.001; // 개별 마커 근처\n    } else {\n      clusterRadius = 0.0001; // 거의 개별 마커\n    }\n    console.log(`줌 레벨 ${zoom}, 클러스터 반경: ${clusterRadius}`);\n    properties.forEach((property, index) => {\n      let addedToCluster = false;\n      for (const cluster of clusters) {\n        const distance = Math.sqrt(Math.pow(property.location.lat - cluster.center.lat, 2) + Math.pow(property.location.lng - cluster.center.lng, 2));\n        if (distance < clusterRadius) {\n          cluster.properties.push(property);\n          // 클러스터 중심점을 매물들의 평균 위치로 업데이트\n          cluster.center = {\n            lat: cluster.properties.reduce((sum, p) => sum + p.location.lat, 0) / cluster.properties.length,\n            lng: cluster.properties.reduce((sum, p) => sum + p.location.lng, 0) / cluster.properties.length\n          };\n          addedToCluster = true;\n          break;\n        }\n      }\n      if (!addedToCluster) {\n        clusters.push({\n          center: property.location,\n          properties: [property]\n        });\n      }\n    });\n    console.log(`총 ${properties.length}개 매물이 ${clusters.length}개 클러스터로 그룹화됨`);\n    return clusters;\n  };\n\n  // 지도 초기화\n  const initMap = useCallback(() => {\n    var _window$google;\n    console.log('지도 초기화 시도...');\n    console.log('mapRef.current:', mapRef.current);\n    console.log('window.google:', window.google);\n    console.log('window.google.maps:', (_window$google = window.google) === null || _window$google === void 0 ? void 0 : _window$google.maps);\n    if (!mapRef.current) {\n      console.log('mapRef가 없음');\n      return false;\n    }\n    if (!window.google) {\n      console.log('Google Maps API가 로드되지 않음');\n      return false;\n    }\n    if (!window.google.maps) {\n      console.log('Google Maps 객체가 없음');\n      return false;\n    }\n    if (mapInstance.current) {\n      console.log('기존 지도 인스턴스 업데이트');\n      updateMarkers();\n      return true;\n    }\n    try {\n      console.log('새 지도 인스턴스 생성 시작...');\n      markersRef.current.forEach(marker => {\n        if (marker && marker.setMap) {\n          marker.setMap(null);\n        }\n      });\n      markersRef.current = [];\n      const map = new window.google.maps.Map(mapRef.current, {\n        center: {\n          lat: 37.5665,\n          lng: 126.9780\n        },\n        zoom: 10,\n        mapTypeId: window.google.maps.MapTypeId.ROADMAP,\n        zoomControl: true,\n        mapTypeControl: false,\n        scaleControl: false,\n        streetViewControl: false,\n        rotateControl: false,\n        fullscreenControl: false,\n        gestureHandling: 'greedy',\n        backgroundColor: '#f0f0f0',\n        disableDefaultUI: false,\n        maxZoom: 20,\n        minZoom: 8,\n        tilt: 0,\n        zoomControlOptions: {\n          position: window.google.maps.ControlPosition.RIGHT_TOP\n        },\n        disableDoubleClickZoom: false,\n        restriction: {\n          latLngBounds: {\n            north: 38.0,\n            south: 34.5,\n            east: 131.0,\n            west: 125.0\n          },\n          strictBounds: false\n        }\n      });\n      console.log('지도 인스턴스 생성 완료:', map);\n      mapInstance.current = map;\n\n      // 지도가 완전히 로드된 후 마커 생성\n      map.addListener('idle', () => {\n        console.log('지도 로드 완료, 마커 생성 시작');\n        createMarkers();\n      });\n      map.addListener('zoom_changed', () => {\n        if (isClusterClicking.current) {\n          return;\n        }\n        markersRef.current.forEach(marker => {\n          if (marker && marker.setMap) {\n            marker.setMap(null);\n          }\n        });\n        markersRef.current = [];\n        setTimeout(() => {\n          if (!isClusterClicking.current) {\n            createMarkers();\n          }\n        }, 300);\n      });\n      console.log('지도 초기화 완료');\n      setIsMapLoaded(true);\n      setMapError(null);\n      return true;\n    } catch (error) {\n      console.error('지도 초기화 오류:', error);\n      setMapError('지도를 로드할 수 없습니다. Google Maps API를 확인해주세요.');\n      setIsMapLoaded(false);\n      return false;\n    }\n  }, []);\n  const createMarkers = () => {\n    if (!mapInstance.current) {\n      console.log('mapInstance가 없어서 마커 생성 불가');\n      return;\n    }\n    console.log('마커 생성 시작, properties 개수:', properties.length);\n    const currentZoom = mapInstance.current.getZoom() || 15;\n    console.log('현재 줌 레벨:', currentZoom);\n    if (currentZoom >= 18) {\n      console.log('개별 마커 생성 모드');\n      properties.forEach((property, index) => {\n        console.log(`마커 ${index + 1} 생성:`, property.title, property.location);\n        const isSelected = selectedMarkerId === property.id;\n        const marker = new window.google.maps.Marker({\n          position: property.location,\n          map: mapInstance.current,\n          title: property.title,\n          icon: {\n            url: 'data:image/svg+xml;charset=UTF-8,' + encodeURIComponent(isSelected ? `<svg width=\"44\" height=\"44\" viewBox=\"0 0 44 44\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\"><circle cx=\"22\" cy=\"22\" r=\"20\" fill=\"white\" stroke=\"#111\" stroke-width=\"3\"/><text x=\"22\" y=\"29\" text-anchor=\"middle\" fill=\"#111\" font-family=\"Arial, sans-serif\" font-size=\"16\" font-weight=\"bold\">1</text></svg>` : `<svg width=\"30\" height=\"30\" viewBox=\"0 0 30 30\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\"><circle cx=\"15\" cy=\"15\" r=\"13\" fill=\"#2563eb\" stroke=\"#1e40af\" stroke-width=\"2\"/><text x=\"15\" y=\"19\" text-anchor=\"middle\" fill=\"white\" font-family=\"Arial, sans-serif\" font-size=\"10\" font-weight=\"bold\">1</text></svg>`),\n            scaledSize: isSelected ? new window.google.maps.Size(44, 44) : new window.google.maps.Size(30, 30),\n            anchor: isSelected ? new window.google.maps.Point(22, 22) : new window.google.maps.Point(15, 15)\n          }\n        });\n\n        // 마커 hover 이벤트 - 흰색 배경에 검정 글씨\n        marker.addListener('mouseover', () => {\n          marker.setIcon({\n            url: 'data:image/svg+xml;charset=UTF-8,' + encodeURIComponent(`<svg width=\"34\" height=\"34\" viewBox=\"0 0 34 34\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\"><circle cx=\"17\" cy=\"17\" r=\"15\" fill=\"white\" stroke=\"#111\" stroke-width=\"3\"/><text x=\"17\" y=\"22\" text-anchor=\"middle\" fill=\"#111\" font-family=\"Arial, sans-serif\" font-size=\"12\" font-weight=\"bold\">1</text></svg>`),\n            scaledSize: new window.google.maps.Size(34, 34),\n            anchor: new window.google.maps.Point(17, 17)\n          });\n        });\n        marker.addListener('mouseout', () => {\n          marker.setIcon({\n            url: 'data:image/svg+xml;charset=UTF-8,' + encodeURIComponent(isSelected ? `<svg width=\"44\" height=\"44\" viewBox=\"0 0 44 44\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\"><circle cx=\"22\" cy=\"22\" r=\"20\" fill=\"white\" stroke=\"#111\" stroke-width=\"3\"/><text x=\"22\" y=\"29\" text-anchor=\"middle\" fill=\"#111\" font-family=\"Arial, sans-serif\" font-size=\"16\" font-weight=\"bold\">1</text></svg>` : `<svg width=\"30\" height=\"30\" viewBox=\"0 0 30 30\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\"><circle cx=\"15\" cy=\"15\" r=\"13\" fill=\"#2563eb\" stroke=\"#1e40af\" stroke-width=\"2\"/><text x=\"15\" y=\"19\" text-anchor=\"middle\" fill=\"white\" font-family=\"Arial, sans-serif\" font-size=\"10\" font-weight=\"bold\">1</text></svg>`),\n            scaledSize: isSelected ? new window.google.maps.Size(44, 44) : new window.google.maps.Size(30, 30),\n            anchor: isSelected ? new window.google.maps.Point(22, 22) : new window.google.maps.Point(15, 15)\n          });\n        });\n        if (onMarkerClick) {\n          marker.addListener('click', () => {\n            console.log(`개별 마커 클릭됨: ${property.id} - ${property.title}`);\n            isClusterClicking.current = true;\n            if (setSelectedMarkerId) setSelectedMarkerId(property.id);\n            if (setSelectedClusterId) setSelectedClusterId('');\n            onMarkerClick(property);\n            setTimeout(() => {\n              isClusterClicking.current = false;\n            }, 1500);\n          });\n        }\n        markersRef.current.push(marker);\n      });\n      console.log('개별 마커 생성 완료, 총 마커 개수:', markersRef.current.length);\n    } else {\n      console.log('클러스터 모드');\n      const clusters = clusterMarkers([], currentZoom);\n      console.log('생성된 클러스터 개수:', clusters.length);\n      clusters.forEach((cluster, clusterIndex) => {\n        console.log(`클러스터 ${clusterIndex + 1}: ${cluster.properties.length}개 매물`);\n        if (cluster.properties.length === 1) {\n          const property = cluster.properties[0];\n          const isSelected = selectedMarkerId === property.id;\n          const marker = new window.google.maps.Marker({\n            position: property.location,\n            map: mapInstance.current,\n            title: property.title,\n            icon: {\n              url: 'data:image/svg+xml;charset=UTF-8,' + encodeURIComponent(isSelected ? `<svg width=\"44\" height=\"44\" viewBox=\"0 0 44 44\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\"><circle cx=\"22\" cy=\"22\" r=\"20\" fill=\"white\" stroke=\"#111\" stroke-width=\"3\"/><text x=\"22\" y=\"29\" text-anchor=\"middle\" fill=\"#111\" font-family=\"Arial, sans-serif\" font-size=\"16\" font-weight=\"bold\">1</text></svg>` : `<svg width=\"30\" height=\"30\" viewBox=\"0 0 30 30\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\"><circle cx=\"15\" cy=\"15\" r=\"13\" fill=\"#2563eb\" stroke=\"#1e40af\" stroke-width=\"2\"/><text x=\"15\" y=\"19\" text-anchor=\"middle\" fill=\"white\" font-family=\"Arial, sans-serif\" font-size=\"10\" font-weight=\"bold\">1</text></svg>`),\n              scaledSize: isSelected ? new window.google.maps.Size(44, 44) : new window.google.maps.Size(30, 30),\n              anchor: isSelected ? new window.google.maps.Point(22, 22) : new window.google.maps.Point(15, 15)\n            }\n          });\n\n          // 마커 hover 이벤트 - 흰색 배경에 검정 글씨\n          marker.addListener('mouseover', () => {\n            marker.setIcon({\n              url: 'data:image/svg+xml;charset=UTF-8,' + encodeURIComponent(`<svg width=\"34\" height=\"34\" viewBox=\"0 0 34 34\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\"><circle cx=\"17\" cy=\"17\" r=\"15\" fill=\"white\" stroke=\"#111\" stroke-width=\"3\"/><text x=\"17\" y=\"22\" text-anchor=\"middle\" fill=\"#111\" font-family=\"Arial, sans-serif\" font-size=\"12\" font-weight=\"bold\">1</text></svg>`),\n              scaledSize: new window.google.maps.Size(34, 34),\n              anchor: new window.google.maps.Point(17, 17)\n            });\n          });\n          marker.addListener('mouseout', () => {\n            marker.setIcon({\n              url: 'data:image/svg+xml;charset=UTF-8,' + encodeURIComponent(isSelected ? `<svg width=\"44\" height=\"44\" viewBox=\"0 0 44 44\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\"><circle cx=\"22\" cy=\"22\" r=\"20\" fill=\"white\" stroke=\"#111\" stroke-width=\"3\"/><text x=\"22\" y=\"29\" text-anchor=\"middle\" fill=\"#111\" font-family=\"Arial, sans-serif\" font-size=\"16\" font-weight=\"bold\">1</text></svg>` : `<svg width=\"30\" height=\"30\" viewBox=\"0 0 30 30\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\"><circle cx=\"15\" cy=\"15\" r=\"13\" fill=\"#2563eb\" stroke=\"#1e40af\" stroke-width=\"2\"/><text x=\"15\" y=\"19\" text-anchor=\"middle\" fill=\"white\" font-family=\"Arial, sans-serif\" font-size=\"10\" font-weight=\"bold\">1</text></svg>`),\n              scaledSize: isSelected ? new window.google.maps.Size(44, 44) : new window.google.maps.Size(30, 30),\n              anchor: isSelected ? new window.google.maps.Point(22, 22) : new window.google.maps.Point(15, 15)\n            });\n          });\n          if (onMarkerClick) {\n            marker.addListener('click', () => {\n              console.log(`클러스터링된 단일 마커 클릭됨: ${property.id} - ${property.title}`);\n              isClusterClicking.current = true;\n              if (setSelectedMarkerId) setSelectedMarkerId(property.id);\n              if (setSelectedClusterId) setSelectedClusterId('');\n              onMarkerClick(property);\n              setTimeout(() => {\n                isClusterClicking.current = false;\n              }, 1500);\n            });\n          }\n          markersRef.current.push(marker);\n        } else {\n          const clusterMarker = createClusterMarker(cluster.properties, cluster.center);\n          markersRef.current.push(clusterMarker);\n        }\n      });\n      console.log('클러스터 마커 생성 완료, 총 마커 개수:', markersRef.current.length);\n    }\n  };\n  const updateMarkers = () => {\n    if (!mapInstance.current) return;\n    markersRef.current.forEach(marker => {\n      if (marker && marker.setMap) {\n        marker.setMap(null);\n      }\n    });\n    markersRef.current = [];\n    createMarkers();\n  };\n  const checkAndInit = useCallback(() => {\n    console.log('Google Maps API 확인 중...');\n    if (window.google && window.google.maps) {\n      console.log('Google Maps API 로드됨, 지도 초기화 시도');\n      if (initMap()) {\n        console.log('지도 초기화 성공');\n        return;\n      }\n    } else {\n      console.log('Google Maps API 아직 로드되지 않음, 재시도...');\n    }\n    setTimeout(checkAndInit, 100);\n  }, [initMap]);\n  useEffect(() => {\n    checkAndInit();\n    return () => {\n      markersRef.current.forEach(marker => {\n        if (marker && marker.setMap) {\n          marker.setMap(null);\n        }\n      });\n      markersRef.current = [];\n    };\n  }, [checkAndInit]);\n\n  // properties가 변경될 때 마커 업데이트\n  useEffect(() => {\n    if (mapInstance.current && isMapLoaded) {\n      updateMarkers();\n    }\n  }, [properties, selectedMarkerId, selectedClusterId, isMapLoaded]);\n  return /*#__PURE__*/_jsxDEV(MapContainer, {\n    children: !isMapLoaded && mapError ? /*#__PURE__*/_jsxDEV(FallbackMap, {\n      children: /*#__PURE__*/_jsxDEV(MapError, {\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          style: {\n            marginBottom: '1rem',\n            fontSize: '1.5rem'\n          },\n          children: \"\\uD83D\\uDDFA\\uFE0F\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 572,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          style: {\n            marginBottom: '0.5rem',\n            fontWeight: 'bold'\n          },\n          children: \"\\uC9C0\\uB3C4 \\uB85C\\uB4DC \\uC2E4\\uD328\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 573,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          style: {\n            fontSize: '0.9rem',\n            color: '#6b7280'\n          },\n          children: mapError\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 574,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => {\n            setMapError(null);\n            setIsMapLoaded(false);\n            checkAndInit();\n          },\n          style: {\n            marginTop: '1rem',\n            padding: '0.5rem 1rem',\n            background: '#2563eb',\n            color: 'white',\n            border: 'none',\n            borderRadius: '4px',\n            cursor: 'pointer'\n          },\n          children: \"\\uB2E4\\uC2DC \\uC2DC\\uB3C4\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 575,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 571,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 570,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n      ref: mapRef,\n      style: {\n        width: '100%',\n        height: '100%'\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 596,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 568,\n    columnNumber: 5\n  }, this);\n};\n_s(GoogleMap, \"GhnMtgUf8AmZenibXKSDOMxjEzY=\");\n_c4 = GoogleMap;\nexport default GoogleMap;\nvar _c, _c2, _c3, _c4;\n$RefreshReg$(_c, \"MapContainer\");\n$RefreshReg$(_c2, \"FallbackMap\");\n$RefreshReg$(_c3, \"MapError\");\n$RefreshReg$(_c4, \"GoogleMap\");","map":{"version":3,"names":["React","useEffect","useRef","useState","useCallback","styled","jsxDEV","_jsxDEV","MapContainer","div","_c","FallbackMap","_c2","MapError","_c3","GoogleMap","properties","onMarkerClick","onClusterClick","selectedMarkerId","setSelectedMarkerId","selectedClusterId","setSelectedClusterId","_s","mapRef","mapInstance","markersRef","isClusterClicking","isMapLoaded","setIsMapLoaded","mapError","setMapError","formatPrice","price","Math","floor","toLocaleString","createClusterMarker","center","clusterId","map","p","id","join","isSelected","propertyCount","length","markerSize","fontSize","backgroundColor","borderColor","marker","window","google","maps","Marker","position","current","icon","url","encodeURIComponent","scaledSize","Size","anchor","Point","addListener","setIcon","console","log","setTimeout","clusterMarkers","markers","zoom","clusters","clusterRadius","forEach","property","index","addedToCluster","cluster","distance","sqrt","pow","location","lat","lng","push","reduce","sum","initMap","_window$google","updateMarkers","setMap","Map","mapTypeId","MapTypeId","ROADMAP","zoomControl","mapTypeControl","scaleControl","streetViewControl","rotateControl","fullscreenControl","gestureHandling","disableDefaultUI","maxZoom","minZoom","tilt","zoomControlOptions","ControlPosition","RIGHT_TOP","disableDoubleClickZoom","restriction","latLngBounds","north","south","east","west","strictBounds","createMarkers","error","currentZoom","getZoom","title","clusterIndex","clusterMarker","checkAndInit","children","style","marginBottom","fileName","_jsxFileName","lineNumber","columnNumber","fontWeight","color","onClick","marginTop","padding","background","border","borderRadius","cursor","ref","width","height","_c4","$RefreshReg$"],"sources":["C:/Users/user/지도기반사이트만들기/src/components/GoogleMap.tsx"],"sourcesContent":["import React, { useEffect, useRef, useState, useCallback } from 'react';\nimport styled from 'styled-components';\nimport { Property } from '../types';\n\nconst MapContainer = styled.div`\n  width: 100%;\n  height: 100%;\n  min-height: 400px;\n  position: relative;\n  overflow: visible;\n  background: #f0f0f0;\n`;\n\nconst FallbackMap = styled.div`\n  width: 100%;\n  height: 100%;\n  background: linear-gradient(45deg, #e5e7eb 25%, transparent 25%), \n              linear-gradient(-45deg, #e5e7eb 25%, transparent 25%), \n              linear-gradient(45deg, transparent 75%, #e5e7eb 75%), \n              linear-gradient(-45deg, transparent 75%, #e5e7eb 75%);\n  background-size: 20px 20px;\n  background-position: 0 0, 0 10px, 10px -10px, -10px 0px;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  color: #6b7280;\n  font-size: 1.2rem;\n  font-weight: 500;\n`;\n\nconst MapError = styled.div`\n  text-align: center;\n  padding: 2rem;\n  background: white;\n  border-radius: 8px;\n  box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);\n  max-width: 400px;\n`;\n\ninterface GoogleMapProps {\n  properties: Property[];\n  onMarkerClick?: (property: Property) => void;\n  onClusterClick?: (properties: Property[]) => void;\n  selectedMarkerId?: string | null;\n  setSelectedMarkerId?: (id: string) => void;\n  selectedClusterId?: string | null;\n  setSelectedClusterId?: (id: string) => void;\n}\n\ndeclare global {\n  interface Window {\n    google: any;\n  }\n}\n\nconst GoogleMap: React.FC<GoogleMapProps> = ({\n  properties,\n  onMarkerClick,\n  onClusterClick,\n  selectedMarkerId,\n  setSelectedMarkerId,\n  selectedClusterId,\n  setSelectedClusterId\n}) => {\n  const mapRef = useRef<HTMLDivElement>(null);\n  const mapInstance = useRef<google.maps.Map | null>(null);\n  const markersRef = useRef<google.maps.Marker[]>([]);\n  const isClusterClicking = useRef(false);\n  const [isMapLoaded, setIsMapLoaded] = useState(false);\n  const [mapError, setMapError] = useState<string | null>(null);\n\n  // 가격 포맷팅 함수\n  const formatPrice = useCallback((price: number) => {\n    if (price >= 100000000) {\n      return `${Math.floor(price / 100000000)}억원`;\n    } else if (price >= 10000) {\n      return `${Math.floor(price / 10000)}만원`;\n    }\n    return `${price.toLocaleString()}원`;\n  }, []);\n\n  // 마커 클러스터링 함수\n  const createClusterMarker = useCallback((properties: Property[], center: { lat: number; lng: number }) => {\n    const clusterId = properties.map(p => p.id).join(',');\n    const isSelected = selectedClusterId === clusterId;\n    const propertyCount = properties.length;\n    \n    // 매물 개수에 따른 클러스터 마커 크기와 색상 결정\n    let markerSize = 40;\n    let fontSize = 14;\n    let backgroundColor = '#2563eb';\n    let borderColor = '#1e40af';\n    \n    if (propertyCount >= 10) {\n      markerSize = 50;\n      fontSize = 16;\n      backgroundColor = '#dc2626'; // 빨간색\n      borderColor = '#b91c1c';\n    } else if (propertyCount >= 5) {\n      markerSize = 45;\n      fontSize = 15;\n      backgroundColor = '#f59e0b'; // 주황색\n      borderColor = '#d97706';\n    } else if (propertyCount >= 3) {\n      markerSize = 42;\n      fontSize = 14;\n      backgroundColor = '#10b981'; // 초록색\n      borderColor = '#059669';\n    }\n    \n    const marker = new window.google.maps.Marker({\n      position: center,\n      map: mapInstance.current,\n      icon: {\n        url: 'data:image/svg+xml;charset=UTF-8,' + encodeURIComponent(\n          isSelected\n            ? `<svg width=\"${markerSize + 4}\" height=\"${markerSize + 4}\" viewBox=\"0 0 ${markerSize + 4} ${markerSize + 4}\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n                <circle cx=\"${(markerSize + 4) / 2}\" cy=\"${(markerSize + 4) / 2}\" r=\"${markerSize / 2}\" fill=\"white\" stroke=\"#111\" stroke-width=\"3\"/>\n                <text x=\"${(markerSize + 4) / 2}\" y=\"${(markerSize + 4) / 2 + fontSize / 3}\" text-anchor=\"middle\" fill=\"#111\" font-family=\"Arial, sans-serif\" font-size=\"${fontSize}\" font-weight=\"bold\">${propertyCount}</text>\n              </svg>`\n            : `<svg width=\"${markerSize}\" height=\"${markerSize}\" viewBox=\"0 0 ${markerSize} ${markerSize}\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n                <circle cx=\"${markerSize / 2}\" cy=\"${markerSize / 2}\" r=\"${markerSize / 2 - 2}\" fill=\"${backgroundColor}\" stroke=\"${borderColor}\" stroke-width=\"3\"/>\n                <text x=\"${markerSize / 2}\" y=\"${markerSize / 2 + fontSize / 3}\" text-anchor=\"middle\" fill=\"white\" font-family=\"Arial, sans-serif\" font-size=\"${fontSize}\" font-weight=\"bold\">${propertyCount}</text>\n              </svg>`\n        ),\n        scaledSize: isSelected\n          ? new window.google.maps.Size(markerSize + 4, markerSize + 4)\n          : new window.google.maps.Size(markerSize, markerSize),\n        anchor: isSelected\n          ? new window.google.maps.Point((markerSize + 4) / 2, (markerSize + 4) / 2)\n          : new window.google.maps.Point(markerSize / 2, markerSize / 2)\n      }\n    });\n\n    // 클러스터 마커 hover 이벤트 - 흰색 배경에 검정 글씨\n    marker.addListener('mouseover', () => {\n      marker.setIcon({\n        url: 'data:image/svg+xml;charset=UTF-8,' + encodeURIComponent(\n          `<svg width=\"${markerSize + 2}\" height=\"${markerSize + 2}\" viewBox=\"0 0 ${markerSize + 2} ${markerSize + 2}\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n            <circle cx=\"${(markerSize + 2) / 2}\" cy=\"${(markerSize + 2) / 2}\" r=\"${markerSize / 2}\" fill=\"white\" stroke=\"#111\" stroke-width=\"3\"/>\n            <text x=\"${(markerSize + 2) / 2}\" y=\"${(markerSize + 2) / 2 + fontSize / 3}\" text-anchor=\"middle\" fill=\"#111\" font-family=\"Arial, sans-serif\" font-size=\"${fontSize}\" font-weight=\"bold\">${propertyCount}</text>\n          </svg>`\n        ),\n        scaledSize: new window.google.maps.Size(markerSize + 2, markerSize + 2),\n        anchor: new window.google.maps.Point((markerSize + 2) / 2, (markerSize + 2) / 2)\n      });\n    });\n\n    marker.addListener('mouseout', () => {\n      marker.setIcon({\n        url: 'data:image/svg+xml;charset=UTF-8,' + encodeURIComponent(\n          isSelected\n            ? `<svg width=\"${markerSize + 4}\" height=\"${markerSize + 4}\" viewBox=\"0 0 ${markerSize + 4} ${markerSize + 4}\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n                <circle cx=\"${(markerSize + 4) / 2}\" cy=\"${(markerSize + 4) / 2}\" r=\"${markerSize / 2}\" fill=\"white\" stroke=\"#111\" stroke-width=\"3\"/>\n                <text x=\"${(markerSize + 4) / 2}\" y=\"${(markerSize + 4) / 2 + fontSize / 3}\" text-anchor=\"middle\" fill=\"#111\" font-family=\"Arial, sans-serif\" font-size=\"${fontSize}\" font-weight=\"bold\">${propertyCount}</text>\n              </svg>`\n            : `<svg width=\"${markerSize}\" height=\"${markerSize}\" viewBox=\"0 0 ${markerSize} ${markerSize}\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n                <circle cx=\"${markerSize / 2}\" cy=\"${markerSize / 2}\" r=\"${markerSize / 2 - 2}\" fill=\"${backgroundColor}\" stroke=\"${borderColor}\" stroke-width=\"3\"/>\n                <text x=\"${markerSize / 2}\" y=\"${markerSize / 2 + fontSize / 3}\" text-anchor=\"middle\" fill=\"white\" font-family=\"Arial, sans-serif\" font-size=\"${fontSize}\" font-weight=\"bold\">${propertyCount}</text>\n              </svg>`\n        ),\n        scaledSize: isSelected\n          ? new window.google.maps.Size(markerSize + 4, markerSize + 4)\n          : new window.google.maps.Size(markerSize, markerSize),\n        anchor: isSelected\n          ? new window.google.maps.Point((markerSize + 4) / 2, (markerSize + 4) / 2)\n          : new window.google.maps.Point(markerSize / 2, markerSize / 2)\n      });\n    });\n\n    marker.addListener('click', () => {\n      console.log(`클러스터 클릭: ${propertyCount}개 매물`);\n      \n      isClusterClicking.current = true;\n      \n      if (propertyCount === 1) {\n        if (onMarkerClick) {\n          onMarkerClick(properties[0]);\n        }\n      } else {\n        if (onClusterClick) {\n          onClusterClick(properties);\n        }\n      }\n      \n      setTimeout(() => {\n        isClusterClicking.current = false;\n      }, 1500);\n    });\n\n    return marker;\n  }, [onMarkerClick, onClusterClick, selectedClusterId, formatPrice]);\n\n  // 마커 클러스터링 로직\n  const clusterMarkers = (markers: any[], zoom: number) => {\n    const clusters: { center: { lat: number; lng: number }; properties: Property[] }[] = [];\n    \n    // 줌 레벨에 따른 클러스터 반경 설정 - 더 좁게 조정\n    let clusterRadius: number;\n    if (zoom < 8) {\n      clusterRadius = 0.05; // 매우 넓은 범위\n    } else if (zoom < 10) {\n      clusterRadius = 0.02; // 넓은 범위\n    } else if (zoom < 12) {\n      clusterRadius = 0.01; // 중간 범위\n    } else if (zoom < 14) {\n      clusterRadius = 0.005; // 좁은 범위\n    } else if (zoom < 16) {\n      clusterRadius = 0.002; // 매우 좁은 범위\n    } else if (zoom < 18) {\n      clusterRadius = 0.001; // 개별 마커 근처\n    } else {\n      clusterRadius = 0.0001; // 거의 개별 마커\n    }\n\n    console.log(`줌 레벨 ${zoom}, 클러스터 반경: ${clusterRadius}`);\n\n    properties.forEach((property, index) => {\n      let addedToCluster = false;\n      \n      for (const cluster of clusters) {\n        const distance = Math.sqrt(\n          Math.pow(property.location.lat - cluster.center.lat, 2) +\n          Math.pow(property.location.lng - cluster.center.lng, 2)\n        );\n        \n        if (distance < clusterRadius) {\n          cluster.properties.push(property);\n          // 클러스터 중심점을 매물들의 평균 위치로 업데이트\n          cluster.center = {\n            lat: cluster.properties.reduce((sum, p) => sum + p.location.lat, 0) / cluster.properties.length,\n            lng: cluster.properties.reduce((sum, p) => sum + p.location.lng, 0) / cluster.properties.length\n          };\n          addedToCluster = true;\n          break;\n        }\n      }\n      \n      if (!addedToCluster) {\n        clusters.push({\n          center: property.location,\n          properties: [property]\n        });\n      }\n    });\n\n    console.log(`총 ${properties.length}개 매물이 ${clusters.length}개 클러스터로 그룹화됨`);\n    return clusters;\n  };\n\n  // 지도 초기화\n  const initMap = useCallback(() => {\n    console.log('지도 초기화 시도...');\n    console.log('mapRef.current:', mapRef.current);\n    console.log('window.google:', window.google);\n    console.log('window.google.maps:', window.google?.maps);\n    \n    if (!mapRef.current) {\n      console.log('mapRef가 없음');\n      return false;\n    }\n    \n    if (!window.google) {\n      console.log('Google Maps API가 로드되지 않음');\n      return false;\n    }\n    \n    if (!window.google.maps) {\n      console.log('Google Maps 객체가 없음');\n      return false;\n    }\n\n    if (mapInstance.current) {\n      console.log('기존 지도 인스턴스 업데이트');\n      updateMarkers();\n      return true;\n    }\n\n    try {\n      console.log('새 지도 인스턴스 생성 시작...');\n      markersRef.current.forEach(marker => {\n        if (marker && marker.setMap) {\n          marker.setMap(null);\n        }\n      });\n      markersRef.current = [];\n\n      const map = new window.google.maps.Map(mapRef.current, {\n        center: { lat: 37.5665, lng: 126.9780 },\n        zoom: 10,\n        mapTypeId: window.google.maps.MapTypeId.ROADMAP,\n        zoomControl: true,\n        mapTypeControl: false,\n        scaleControl: false,\n        streetViewControl: false,\n        rotateControl: false,\n        fullscreenControl: false,\n        gestureHandling: 'greedy',\n        backgroundColor: '#f0f0f0',\n        disableDefaultUI: false,\n        maxZoom: 20,\n        minZoom: 8,\n        tilt: 0,\n        zoomControlOptions: {\n          position: window.google.maps.ControlPosition.RIGHT_TOP\n        },\n        disableDoubleClickZoom: false,\n        restriction: {\n          latLngBounds: {\n            north: 38.0,\n            south: 34.5,\n            east: 131.0,\n            west: 125.0\n          },\n          strictBounds: false\n        }\n      });\n\n      console.log('지도 인스턴스 생성 완료:', map);\n      mapInstance.current = map;\n      \n      // 지도가 완전히 로드된 후 마커 생성\n      map.addListener('idle', () => {\n        console.log('지도 로드 완료, 마커 생성 시작');\n        createMarkers();\n      });\n\n      map.addListener('zoom_changed', () => {\n        if (isClusterClicking.current) {\n          return;\n        }\n        \n        markersRef.current.forEach(marker => {\n          if (marker && marker.setMap) {\n            marker.setMap(null);\n          }\n        });\n        markersRef.current = [];\n\n        setTimeout(() => {\n          if (!isClusterClicking.current) {\n            createMarkers();\n          }\n        }, 300);\n      });\n\n      console.log('지도 초기화 완료');\n      setIsMapLoaded(true);\n      setMapError(null);\n      return true;\n    } catch (error) {\n      console.error('지도 초기화 오류:', error);\n      setMapError('지도를 로드할 수 없습니다. Google Maps API를 확인해주세요.');\n      setIsMapLoaded(false);\n      return false;\n    }\n  }, []);\n\n  const createMarkers = () => {\n    if (!mapInstance.current) {\n      console.log('mapInstance가 없어서 마커 생성 불가');\n      return;\n    }\n    \n    console.log('마커 생성 시작, properties 개수:', properties.length);\n    const currentZoom = mapInstance.current.getZoom() || 15;\n    console.log('현재 줌 레벨:', currentZoom);\n    \n    if (currentZoom >= 18) {\n      console.log('개별 마커 생성 모드');\n      properties.forEach((property, index) => {\n        console.log(`마커 ${index + 1} 생성:`, property.title, property.location);\n        const isSelected = selectedMarkerId === property.id;\n        const marker = new window.google.maps.Marker({\n          position: property.location,\n          map: mapInstance.current,\n          title: property.title,\n          icon: {\n            url: 'data:image/svg+xml;charset=UTF-8,' + encodeURIComponent(\n              isSelected\n                ? `<svg width=\"44\" height=\"44\" viewBox=\"0 0 44 44\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\"><circle cx=\"22\" cy=\"22\" r=\"20\" fill=\"white\" stroke=\"#111\" stroke-width=\"3\"/><text x=\"22\" y=\"29\" text-anchor=\"middle\" fill=\"#111\" font-family=\"Arial, sans-serif\" font-size=\"16\" font-weight=\"bold\">1</text></svg>`\n                : `<svg width=\"30\" height=\"30\" viewBox=\"0 0 30 30\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\"><circle cx=\"15\" cy=\"15\" r=\"13\" fill=\"#2563eb\" stroke=\"#1e40af\" stroke-width=\"2\"/><text x=\"15\" y=\"19\" text-anchor=\"middle\" fill=\"white\" font-family=\"Arial, sans-serif\" font-size=\"10\" font-weight=\"bold\">1</text></svg>`\n            ),\n            scaledSize: isSelected\n              ? new window.google.maps.Size(44, 44)\n              : new window.google.maps.Size(30, 30),\n            anchor: isSelected\n              ? new window.google.maps.Point(22, 22)\n              : new window.google.maps.Point(15, 15)\n          }\n        });\n\n        // 마커 hover 이벤트 - 흰색 배경에 검정 글씨\n        marker.addListener('mouseover', () => {\n          marker.setIcon({\n            url: 'data:image/svg+xml;charset=UTF-8,' + encodeURIComponent(\n              `<svg width=\"34\" height=\"34\" viewBox=\"0 0 34 34\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\"><circle cx=\"17\" cy=\"17\" r=\"15\" fill=\"white\" stroke=\"#111\" stroke-width=\"3\"/><text x=\"17\" y=\"22\" text-anchor=\"middle\" fill=\"#111\" font-family=\"Arial, sans-serif\" font-size=\"12\" font-weight=\"bold\">1</text></svg>`\n            ),\n            scaledSize: new window.google.maps.Size(34, 34),\n            anchor: new window.google.maps.Point(17, 17)\n          });\n        });\n\n        marker.addListener('mouseout', () => {\n          marker.setIcon({\n            url: 'data:image/svg+xml;charset=UTF-8,' + encodeURIComponent(\n              isSelected\n                ? `<svg width=\"44\" height=\"44\" viewBox=\"0 0 44 44\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\"><circle cx=\"22\" cy=\"22\" r=\"20\" fill=\"white\" stroke=\"#111\" stroke-width=\"3\"/><text x=\"22\" y=\"29\" text-anchor=\"middle\" fill=\"#111\" font-family=\"Arial, sans-serif\" font-size=\"16\" font-weight=\"bold\">1</text></svg>`\n                : `<svg width=\"30\" height=\"30\" viewBox=\"0 0 30 30\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\"><circle cx=\"15\" cy=\"15\" r=\"13\" fill=\"#2563eb\" stroke=\"#1e40af\" stroke-width=\"2\"/><text x=\"15\" y=\"19\" text-anchor=\"middle\" fill=\"white\" font-family=\"Arial, sans-serif\" font-size=\"10\" font-weight=\"bold\">1</text></svg>`\n            ),\n            scaledSize: isSelected\n              ? new window.google.maps.Size(44, 44)\n              : new window.google.maps.Size(30, 30),\n            anchor: isSelected\n              ? new window.google.maps.Point(22, 22)\n              : new window.google.maps.Point(15, 15)\n          });\n        });\n\n        if (onMarkerClick) {\n          marker.addListener('click', () => {\n            console.log(`개별 마커 클릭됨: ${property.id} - ${property.title}`);\n            isClusterClicking.current = true;\n            \n            if (setSelectedMarkerId) setSelectedMarkerId(property.id);\n            if (setSelectedClusterId) setSelectedClusterId('');\n            onMarkerClick(property);\n            \n            setTimeout(() => {\n              isClusterClicking.current = false;\n            }, 1500);\n          });\n        }\n\n        markersRef.current.push(marker);\n      });\n      console.log('개별 마커 생성 완료, 총 마커 개수:', markersRef.current.length);\n    } else {\n      console.log('클러스터 모드');\n      const clusters = clusterMarkers([], currentZoom);\n      console.log('생성된 클러스터 개수:', clusters.length);\n\n      clusters.forEach((cluster, clusterIndex) => {\n        console.log(`클러스터 ${clusterIndex + 1}: ${cluster.properties.length}개 매물`);\n        if (cluster.properties.length === 1) {\n          const property = cluster.properties[0];\n          const isSelected = selectedMarkerId === property.id;\n          const marker = new window.google.maps.Marker({\n            position: property.location,\n            map: mapInstance.current,\n            title: property.title,\n            icon: {\n              url: 'data:image/svg+xml;charset=UTF-8,' + encodeURIComponent(\n                isSelected\n                  ? `<svg width=\"44\" height=\"44\" viewBox=\"0 0 44 44\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\"><circle cx=\"22\" cy=\"22\" r=\"20\" fill=\"white\" stroke=\"#111\" stroke-width=\"3\"/><text x=\"22\" y=\"29\" text-anchor=\"middle\" fill=\"#111\" font-family=\"Arial, sans-serif\" font-size=\"16\" font-weight=\"bold\">1</text></svg>`\n                  : `<svg width=\"30\" height=\"30\" viewBox=\"0 0 30 30\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\"><circle cx=\"15\" cy=\"15\" r=\"13\" fill=\"#2563eb\" stroke=\"#1e40af\" stroke-width=\"2\"/><text x=\"15\" y=\"19\" text-anchor=\"middle\" fill=\"white\" font-family=\"Arial, sans-serif\" font-size=\"10\" font-weight=\"bold\">1</text></svg>`\n              ),\n              scaledSize: isSelected\n                ? new window.google.maps.Size(44, 44)\n                : new window.google.maps.Size(30, 30),\n              anchor: isSelected\n                ? new window.google.maps.Point(22, 22)\n                : new window.google.maps.Point(15, 15)\n            }\n          });\n\n          // 마커 hover 이벤트 - 흰색 배경에 검정 글씨\n          marker.addListener('mouseover', () => {\n            marker.setIcon({\n              url: 'data:image/svg+xml;charset=UTF-8,' + encodeURIComponent(\n                `<svg width=\"34\" height=\"34\" viewBox=\"0 0 34 34\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\"><circle cx=\"17\" cy=\"17\" r=\"15\" fill=\"white\" stroke=\"#111\" stroke-width=\"3\"/><text x=\"17\" y=\"22\" text-anchor=\"middle\" fill=\"#111\" font-family=\"Arial, sans-serif\" font-size=\"12\" font-weight=\"bold\">1</text></svg>`\n              ),\n              scaledSize: new window.google.maps.Size(34, 34),\n              anchor: new window.google.maps.Point(17, 17)\n            });\n          });\n\n          marker.addListener('mouseout', () => {\n            marker.setIcon({\n              url: 'data:image/svg+xml;charset=UTF-8,' + encodeURIComponent(\n                isSelected\n                  ? `<svg width=\"44\" height=\"44\" viewBox=\"0 0 44 44\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\"><circle cx=\"22\" cy=\"22\" r=\"20\" fill=\"white\" stroke=\"#111\" stroke-width=\"3\"/><text x=\"22\" y=\"29\" text-anchor=\"middle\" fill=\"#111\" font-family=\"Arial, sans-serif\" font-size=\"16\" font-weight=\"bold\">1</text></svg>`\n                  : `<svg width=\"30\" height=\"30\" viewBox=\"0 0 30 30\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\"><circle cx=\"15\" cy=\"15\" r=\"13\" fill=\"#2563eb\" stroke=\"#1e40af\" stroke-width=\"2\"/><text x=\"15\" y=\"19\" text-anchor=\"middle\" fill=\"white\" font-family=\"Arial, sans-serif\" font-size=\"10\" font-weight=\"bold\">1</text></svg>`\n              ),\n              scaledSize: isSelected\n                ? new window.google.maps.Size(44, 44)\n                : new window.google.maps.Size(30, 30),\n              anchor: isSelected\n                ? new window.google.maps.Point(22, 22)\n                : new window.google.maps.Point(15, 15)\n            });\n          });\n\n          if (onMarkerClick) {\n            marker.addListener('click', () => {\n              console.log(`클러스터링된 단일 마커 클릭됨: ${property.id} - ${property.title}`);\n              isClusterClicking.current = true;\n              \n              if (setSelectedMarkerId) setSelectedMarkerId(property.id);\n              if (setSelectedClusterId) setSelectedClusterId('');\n              onMarkerClick(property);\n              \n              setTimeout(() => {\n                isClusterClicking.current = false;\n              }, 1500);\n            });\n          }\n\n          markersRef.current.push(marker);\n        } else {\n          const clusterMarker = createClusterMarker(cluster.properties, cluster.center);\n          markersRef.current.push(clusterMarker);\n        }\n      });\n      console.log('클러스터 마커 생성 완료, 총 마커 개수:', markersRef.current.length);\n    }\n  };\n\n  const updateMarkers = () => {\n    if (!mapInstance.current) return;\n    \n    markersRef.current.forEach(marker => {\n      if (marker && marker.setMap) {\n        marker.setMap(null);\n      }\n    });\n    markersRef.current = [];\n\n    createMarkers();\n  };\n\n  const checkAndInit = useCallback(() => {\n    console.log('Google Maps API 확인 중...');\n    if (window.google && window.google.maps) {\n      console.log('Google Maps API 로드됨, 지도 초기화 시도');\n      if (initMap()) {\n        console.log('지도 초기화 성공');\n        return;\n      }\n    } else {\n      console.log('Google Maps API 아직 로드되지 않음, 재시도...');\n    }\n    \n    setTimeout(checkAndInit, 100);\n  }, [initMap]);\n\n  useEffect(() => {\n    checkAndInit();\n\n    return () => {\n      markersRef.current.forEach(marker => {\n        if (marker && marker.setMap) {\n          marker.setMap(null);\n        }\n      });\n      markersRef.current = [];\n    };\n  }, [checkAndInit]);\n\n  // properties가 변경될 때 마커 업데이트\n  useEffect(() => {\n    if (mapInstance.current && isMapLoaded) {\n      updateMarkers();\n    }\n  }, [properties, selectedMarkerId, selectedClusterId, isMapLoaded]);\n\n  return (\n    <MapContainer>\n      {!isMapLoaded && mapError ? (\n        <FallbackMap>\n          <MapError>\n            <div style={{ marginBottom: '1rem', fontSize: '1.5rem' }}>🗺️</div>\n            <div style={{ marginBottom: '0.5rem', fontWeight: 'bold' }}>지도 로드 실패</div>\n            <div style={{ fontSize: '0.9rem', color: '#6b7280' }}>{mapError}</div>\n            <button \n              onClick={() => {\n                setMapError(null);\n                setIsMapLoaded(false);\n                checkAndInit();\n              }}\n              style={{\n                marginTop: '1rem',\n                padding: '0.5rem 1rem',\n                background: '#2563eb',\n                color: 'white',\n                border: 'none',\n                borderRadius: '4px',\n                cursor: 'pointer'\n              }}\n            >\n              다시 시도\n            </button>\n          </MapError>\n        </FallbackMap>\n      ) : (\n        <div ref={mapRef} style={{ width: '100%', height: '100%' }} />\n      )}\n    </MapContainer>\n  );\n};\n\nexport default GoogleMap;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}