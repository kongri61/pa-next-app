{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\user\\\\\\uC9C0\\uB3C4\\uAE30\\uBC18\\uC0AC\\uC774\\uD2B8\\uB9CC\\uB4E4\\uAE30\\\\src\\\\components\\\\GoogleMap.tsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useRef, useState } from 'react';\nimport styled from 'styled-components';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst MapContainer = styled.div`\n  width: 100%;\n  height: 100%;\n  min-height: 400px;\n  background: #f0f0f0;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  color: #666;\n  font-size: 1rem;\n  position: relative;\n  overflow: visible;\n\n  /* 마름모형 기호 완전 제거 */\n  .gmnoprint {\n    display: none !important;\n  }\n  \n  /* 지도 타입 컨트롤 완전 제거 */\n  .gm-style-mtc {\n    display: none !important;\n  }\n  \n  /* 모든 불필요한 컨트롤 제거 */\n  .gm-style button[title*=\"Map\"] {\n    display: none !important;\n  }\n`;\n_c = MapContainer;\nconst SatelliteButton = styled.button`\n  position: fixed;\n  top: 120px;\n  left: 20px;\n  z-index: 99999;\n  background: #32CD32;\n  border: 2px solid #006400;\n  border-radius: 4px;\n  padding: 6px 10px;\n  font-size: 11px;\n  font-weight: bold;\n  color: white;\n  cursor: pointer;\n  box-shadow: 0 2px 4px rgba(0, 0, 0, 0.3);\n  transition: all 0.2s;\n  min-width: 60px;\n  text-align: center;\n\n  &:hover {\n    background: #228B22;\n    transform: translateY(-1px);\n    box-shadow: 0 3px 6px rgba(0, 0, 0, 0.4);\n  }\n\n  &.active {\n    background: #DC143C;\n    border-color: #8B0000;\n    color: white;\n  }\n`;\n_c2 = SatelliteButton;\nconst GoogleMap = ({\n  properties,\n  onMarkerClick,\n  center = {\n    lat: 37.5665,\n    lng: 126.9780\n  },\n  // 서울 중심\n  zoom = 10 // 서울 중심에 맞는 줌 레벨\n}) => {\n  _s();\n  const mapRef = useRef(null);\n  const mapInstance = useRef(null);\n  const markersRef = useRef([]);\n  const [isSatellite, setIsSatellite] = useState(false);\n\n  // 위성지도 토글 함수\n  const toggleSatellite = () => {\n    console.log('버튼 클릭됨');\n    console.log('지도 인스턴스:', mapInstance.current);\n    console.log('Google Maps API:', window.google);\n    if (mapInstance.current && window.google && window.google.maps) {\n      try {\n        const newMapType = isSatellite ? window.google.maps.MapTypeId.ROADMAP : window.google.maps.MapTypeId.SATELLITE;\n        console.log('현재 상태:', isSatellite);\n        console.log('새 지도 타입:', newMapType);\n        mapInstance.current.setMapTypeId(newMapType);\n        setIsSatellite(!isSatellite);\n        console.log('지도 타입 변경 완료');\n      } catch (error) {\n        console.error('지도 타입 변경 오류:', error);\n      }\n    } else {\n      console.log('지도 인스턴스가 없거나 Google Maps API가 로드되지 않음');\n    }\n  };\n\n  // 지도 초기화\n  useEffect(() => {\n    const initMap = () => {\n      if (!mapRef.current || !window.google || !window.google.maps) {\n        return false;\n      }\n      try {\n        // 기존 마커들 제거\n        markersRef.current.forEach(marker => {\n          if (marker && marker.setMap) {\n            marker.setMap(null);\n          }\n        });\n        markersRef.current = [];\n\n        // 지도 생성\n        const map = new window.google.maps.Map(mapRef.current, {\n          center,\n          zoom,\n          mapTypeId: window.google.maps.MapTypeId.ROADMAP,\n          zoomControl: true,\n          mapTypeControl: false,\n          scaleControl: false,\n          streetViewControl: false,\n          rotateControl: false,\n          fullscreenControl: false,\n          gestureHandling: 'greedy',\n          // 대한민국 본토만 표시 (주변국 최소화)\n          restriction: {\n            latLngBounds: {\n              north: 38.0,\n              // 최북단 (강원도)\n              south: 34.5,\n              // 최남단 (경남)\n              east: 131.0,\n              // 최동단 (울릉도)\n              west: 125.0 // 최서단 (서해안)\n            },\n            strictBounds: false // 경계를 넘어서도 줌 가능하도록\n          },\n          // 최소 줌 레벨 설정 (본토 중심)\n          minZoom: 8,\n          // 최대 줌 레벨 설정\n          maxZoom: 18\n        });\n        mapInstance.current = map;\n\n        // 마커 생성\n        properties.forEach(property => {\n          const marker = new window.google.maps.Marker({\n            position: property.location,\n            map,\n            title: property.title,\n            icon: {\n              url: 'data:image/svg+xml;charset=UTF-8,' + encodeURIComponent(`\n                <svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n                  <path d=\"M12 2C8.13 2 5 5.13 5 9c0 5.25 7 13 7 13s7-7.75 7-13c0-3.87-3.13-7-7-7zm0 9.5c-1.38 0-2.5-1.12-2.5-2.5s1.12-2.5 2.5-2.5 2.5 1.12 2.5 2.5-1.12 2.5-2.5 2.5z\" fill=\"#2563eb\"/>\n                </svg>\n              `),\n              scaledSize: new window.google.maps.Size(24, 24),\n              anchor: new window.google.maps.Point(12, 12)\n            }\n          });\n          if (onMarkerClick) {\n            marker.addListener('click', () => {\n              onMarkerClick(property);\n            });\n          }\n          markersRef.current.push(marker);\n        });\n        return true;\n      } catch (error) {\n        console.error('지도 초기화 오류:', error);\n        return false;\n      }\n    };\n\n    // Google Maps API 로딩 확인 및 지도 초기화\n    const checkAndInit = () => {\n      if (window.google && window.google.maps) {\n        if (initMap()) {\n          return;\n        }\n      }\n\n      // API가 로드되지 않았으면 100ms 후 다시 시도\n      setTimeout(checkAndInit, 100);\n    };\n    checkAndInit();\n\n    // 컴포넌트 언마운트 시 정리\n    return () => {\n      markersRef.current.forEach(marker => {\n        if (marker && marker.setMap) {\n          marker.setMap(null);\n        }\n      });\n      markersRef.current = [];\n    };\n  }, [properties, onMarkerClick, center, zoom]);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(SatelliteButton, {\n      onClick: toggleSatellite,\n      className: isSatellite ? 'active' : '',\n      children: isSatellite ? '일반지도' : '위성지도'\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 222,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(MapContainer, {\n      ref: mapRef\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 228,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n};\n_s(GoogleMap, \"YpoQyAQ5cVVjfeJOKicl/xAGmfA=\");\n_c3 = GoogleMap;\nexport default GoogleMap;\nvar _c, _c2, _c3;\n$RefreshReg$(_c, \"MapContainer\");\n$RefreshReg$(_c2, \"SatelliteButton\");\n$RefreshReg$(_c3, \"GoogleMap\");","map":{"version":3,"names":["React","useEffect","useRef","useState","styled","jsxDEV","_jsxDEV","Fragment","_Fragment","MapContainer","div","_c","SatelliteButton","button","_c2","GoogleMap","properties","onMarkerClick","center","lat","lng","zoom","_s","mapRef","mapInstance","markersRef","isSatellite","setIsSatellite","toggleSatellite","console","log","current","window","google","maps","newMapType","MapTypeId","ROADMAP","SATELLITE","setMapTypeId","error","initMap","forEach","marker","setMap","map","Map","mapTypeId","zoomControl","mapTypeControl","scaleControl","streetViewControl","rotateControl","fullscreenControl","gestureHandling","restriction","latLngBounds","north","south","east","west","strictBounds","minZoom","maxZoom","property","Marker","position","location","title","icon","url","encodeURIComponent","scaledSize","Size","anchor","Point","addListener","push","checkAndInit","setTimeout","children","onClick","className","fileName","_jsxFileName","lineNumber","columnNumber","ref","_c3","$RefreshReg$"],"sources":["C:/Users/user/지도기반사이트만들기/src/components/GoogleMap.tsx"],"sourcesContent":["import React, { useEffect, useRef, useState } from 'react';\r\nimport styled from 'styled-components';\r\nimport { Property } from '../types';\r\n\r\nconst MapContainer = styled.div`\r\n  width: 100%;\r\n  height: 100%;\r\n  min-height: 400px;\r\n  background: #f0f0f0;\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n  color: #666;\r\n  font-size: 1rem;\r\n  position: relative;\r\n  overflow: visible;\r\n\r\n  /* 마름모형 기호 완전 제거 */\r\n  .gmnoprint {\r\n    display: none !important;\r\n  }\r\n  \r\n  /* 지도 타입 컨트롤 완전 제거 */\r\n  .gm-style-mtc {\r\n    display: none !important;\r\n  }\r\n  \r\n  /* 모든 불필요한 컨트롤 제거 */\r\n  .gm-style button[title*=\"Map\"] {\r\n    display: none !important;\r\n  }\r\n`;\r\n\r\nconst SatelliteButton = styled.button`\r\n  position: fixed;\r\n  top: 120px;\r\n  left: 20px;\r\n  z-index: 99999;\r\n  background: #32CD32;\r\n  border: 2px solid #006400;\r\n  border-radius: 4px;\r\n  padding: 6px 10px;\r\n  font-size: 11px;\r\n  font-weight: bold;\r\n  color: white;\r\n  cursor: pointer;\r\n  box-shadow: 0 2px 4px rgba(0, 0, 0, 0.3);\r\n  transition: all 0.2s;\r\n  min-width: 60px;\r\n  text-align: center;\r\n\r\n  &:hover {\r\n    background: #228B22;\r\n    transform: translateY(-1px);\r\n    box-shadow: 0 3px 6px rgba(0, 0, 0, 0.4);\r\n  }\r\n\r\n  &.active {\r\n    background: #DC143C;\r\n    border-color: #8B0000;\r\n    color: white;\r\n  }\r\n`;\r\n\r\ninterface GoogleMapProps {\r\n  properties: Property[];\r\n  onMarkerClick?: (property: Property) => void;\r\n  center?: { lat: number; lng: number };\r\n  zoom?: number;\r\n}\r\n\r\ndeclare global {\r\n  interface Window {\r\n    google: any;\r\n  }\r\n}\r\n\r\nconst GoogleMap: React.FC<GoogleMapProps> = ({\r\n  properties,\r\n  onMarkerClick,\r\n  center = { lat: 37.5665, lng: 126.9780 }, // 서울 중심\r\n  zoom = 10 // 서울 중심에 맞는 줌 레벨\r\n}) => {\r\n  const mapRef = useRef<HTMLDivElement>(null);\r\n  const mapInstance = useRef<any>(null);\r\n  const markersRef = useRef<any[]>([]);\r\n  const [isSatellite, setIsSatellite] = useState(false);\r\n\r\n  // 위성지도 토글 함수\r\n  const toggleSatellite = () => {\r\n    console.log('버튼 클릭됨');\r\n    console.log('지도 인스턴스:', mapInstance.current);\r\n    console.log('Google Maps API:', window.google);\r\n    \r\n    if (mapInstance.current && window.google && window.google.maps) {\r\n      try {\r\n        const newMapType = isSatellite \r\n          ? window.google.maps.MapTypeId.ROADMAP \r\n          : window.google.maps.MapTypeId.SATELLITE;\r\n        \r\n        console.log('현재 상태:', isSatellite);\r\n        console.log('새 지도 타입:', newMapType);\r\n        \r\n        mapInstance.current.setMapTypeId(newMapType);\r\n        setIsSatellite(!isSatellite);\r\n        \r\n        console.log('지도 타입 변경 완료');\r\n      } catch (error) {\r\n        console.error('지도 타입 변경 오류:', error);\r\n      }\r\n    } else {\r\n      console.log('지도 인스턴스가 없거나 Google Maps API가 로드되지 않음');\r\n    }\r\n  };\r\n\r\n  // 지도 초기화\r\n  useEffect(() => {\r\n    const initMap = () => {\r\n      if (!mapRef.current || !window.google || !window.google.maps) {\r\n        return false;\r\n      }\r\n\r\n      try {\r\n        // 기존 마커들 제거\r\n        markersRef.current.forEach(marker => {\r\n          if (marker && marker.setMap) {\r\n            marker.setMap(null);\r\n          }\r\n        });\r\n        markersRef.current = [];\r\n\r\n        // 지도 생성\r\n        const map = new window.google.maps.Map(mapRef.current, {\r\n          center,\r\n          zoom,\r\n          mapTypeId: window.google.maps.MapTypeId.ROADMAP,\r\n          zoomControl: true,\r\n          mapTypeControl: false,\r\n          scaleControl: false,\r\n          streetViewControl: false,\r\n          rotateControl: false,\r\n          fullscreenControl: false,\r\n          gestureHandling: 'greedy',\r\n          // 대한민국 본토만 표시 (주변국 최소화)\r\n          restriction: {\r\n            latLngBounds: {\r\n              north: 38.0, // 최북단 (강원도)\r\n              south: 34.5, // 최남단 (경남)\r\n              east: 131.0, // 최동단 (울릉도)\r\n              west: 125.0  // 최서단 (서해안)\r\n            },\r\n            strictBounds: false // 경계를 넘어서도 줌 가능하도록\r\n          },\r\n          // 최소 줌 레벨 설정 (본토 중심)\r\n          minZoom: 8,\r\n          // 최대 줌 레벨 설정\r\n          maxZoom: 18\r\n        });\r\n\r\n        mapInstance.current = map;\r\n\r\n        // 마커 생성\r\n        properties.forEach(property => {\r\n          const marker = new window.google.maps.Marker({\r\n            position: property.location,\r\n            map,\r\n            title: property.title,\r\n            icon: {\r\n              url: 'data:image/svg+xml;charset=UTF-8,' + encodeURIComponent(`\r\n                <svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\r\n                  <path d=\"M12 2C8.13 2 5 5.13 5 9c0 5.25 7 13 7 13s7-7.75 7-13c0-3.87-3.13-7-7-7zm0 9.5c-1.38 0-2.5-1.12-2.5-2.5s1.12-2.5 2.5-2.5 2.5 1.12 2.5 2.5-1.12 2.5-2.5 2.5z\" fill=\"#2563eb\"/>\r\n                </svg>\r\n              `),\r\n              scaledSize: new window.google.maps.Size(24, 24),\r\n              anchor: new window.google.maps.Point(12, 12)\r\n            }\r\n          });\r\n\r\n          if (onMarkerClick) {\r\n            marker.addListener('click', () => {\r\n              onMarkerClick(property);\r\n            });\r\n          }\r\n\r\n          markersRef.current.push(marker);\r\n        });\r\n\r\n        return true;\r\n      } catch (error) {\r\n        console.error('지도 초기화 오류:', error);\r\n        return false;\r\n      }\r\n    };\r\n\r\n    // Google Maps API 로딩 확인 및 지도 초기화\r\n    const checkAndInit = () => {\r\n      if (window.google && window.google.maps) {\r\n        if (initMap()) {\r\n          return;\r\n        }\r\n      }\r\n      \r\n      // API가 로드되지 않았으면 100ms 후 다시 시도\r\n      setTimeout(checkAndInit, 100);\r\n    };\r\n\r\n    checkAndInit();\r\n\r\n    // 컴포넌트 언마운트 시 정리\r\n    return () => {\r\n      markersRef.current.forEach(marker => {\r\n        if (marker && marker.setMap) {\r\n          marker.setMap(null);\r\n        }\r\n      });\r\n      markersRef.current = [];\r\n    };\r\n  }, [properties, onMarkerClick, center, zoom]);\r\n\r\n  return (\r\n    <>\r\n      <SatelliteButton \r\n        onClick={toggleSatellite}\r\n        className={isSatellite ? 'active' : ''}\r\n      >\r\n        {isSatellite ? '일반지도' : '위성지도'}\r\n      </SatelliteButton>\r\n      <MapContainer ref={mapRef} />\r\n    </>\r\n  );\r\n};\r\n\r\nexport default GoogleMap; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}