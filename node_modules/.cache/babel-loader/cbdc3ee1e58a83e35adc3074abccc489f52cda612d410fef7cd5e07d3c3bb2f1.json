{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\user\\\\\\uC9C0\\uB3C4\\uAE30\\uBC18\\uC0AC\\uC774\\uD2B8\\uB9CC\\uB4E4\\uAE30\\\\src\\\\components\\\\GoogleMap.tsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useRef, useState } from 'react';\nimport styled from 'styled-components';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst MapContainer = styled.div`\n  width: 100%;\n  height: 100%;\n  min-height: 400px;\n  background: #f0f0f0;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  color: #666;\n  font-size: 1rem;\n  position: relative;\n  overflow: visible;\n\n  /* 마름모형 기호 완전 제거 */\n  .gmnoprint {\n    display: none !important;\n  }\n  \n  /* 지도 타입 컨트롤 완전 제거 */\n  .gm-style-mtc {\n    display: none !important;\n  }\n  \n  /* 모든 불필요한 컨트롤 제거 */\n  .gm-style button[title*=\"Map\"] {\n    display: none !important;\n  }\n`;\n_c = MapContainer;\nconst SatelliteButton = styled.button`\n  position: fixed;\n  top: 120px;\n  left: 20px;\n  z-index: 99999;\n  background: #4CAF50;\n  border: 3px solid #2E7D32;\n  border-radius: 6px;\n  padding: 8px 12px;\n  font-size: 12px;\n  font-weight: bold;\n  color: white;\n  cursor: pointer;\n  box-shadow: 0 3px 6px rgba(0, 0, 0, 0.4);\n  transition: all 0.3s ease;\n  min-width: 70px;\n  text-align: center;\n  user-select: none;\n  pointer-events: auto;\n\n  &:hover {\n    background: #45a049;\n    transform: translateY(-2px);\n    box-shadow: 0 5px 10px rgba(0, 0, 0, 0.5);\n  }\n\n  &:active {\n    transform: translateY(0);\n    box-shadow: 0 2px 4px rgba(0, 0, 0, 0.4);\n  }\n\n  &.satellite {\n    background: #FF5722;\n    border-color: #D84315;\n    \n    &:hover {\n      background: #F4511E;\n    }\n  }\n\n  &.roadmap {\n    background: #2196F3;\n    border-color: #1976D2;\n    \n    &:hover {\n      background: #1E88E5;\n    }\n  }\n`;\n_c2 = SatelliteButton;\nconst GoogleMap = ({\n  properties,\n  onMarkerClick,\n  center = {\n    lat: 37.5665,\n    lng: 126.9780\n  },\n  // 서울 중심\n  zoom = 10 // 서울 중심에 맞는 줌 레벨\n}) => {\n  _s();\n  const mapRef = useRef(null);\n  const mapInstance = useRef(null);\n  const markersRef = useRef([]);\n  const [isSatellite, setIsSatellite] = useState(false);\n  const [isMapLoaded, setIsMapLoaded] = useState(false);\n\n  // 위성지도 토글 함수\n  const toggleSatellite = () => {\n    console.log('=== 버튼 클릭 시작 ===');\n    console.log('현재 isSatellite 상태:', isSatellite);\n    console.log('지도 인스턴스:', mapInstance.current);\n    console.log('Google Maps API:', window.google);\n    if (mapInstance.current && window.google && window.google.maps && isMapLoaded) {\n      try {\n        // 현재 지도의 실제 타입 확인\n        const currentMapType = mapInstance.current.getMapTypeId();\n        console.log('현재 지도 타입:', currentMapType);\n\n        // 새로운 지도 타입 결정 (현재 상태의 반대로)\n        let newMapType;\n        if (isSatellite) {\n          // 현재 위성 모드이면 일반지도로\n          newMapType = window.google.maps.MapTypeId.ROADMAP;\n        } else {\n          // 현재 일반 모드이면 위성지도로\n          newMapType = window.google.maps.MapTypeId.SATELLITE;\n        }\n        console.log('변경할 지도 타입:', newMapType);\n\n        // 지도 타입 변경\n        mapInstance.current.setMapTypeId(newMapType);\n\n        // 위성으로 변경할 때 타일 강제 로드\n        if (!isSatellite) {\n          setTimeout(() => {\n            if (mapInstance.current) {\n              // 현재 중심점과 줌 저장\n              const center = mapInstance.current.getCenter();\n              const zoom = mapInstance.current.getZoom();\n\n              // 줌 조정으로 타일 새로고침 (화면 움직임 없음)\n              const currentZoom = mapInstance.current.getZoom();\n              mapInstance.current.setZoom(currentZoom + 0.1);\n              setTimeout(() => {\n                if (mapInstance.current) {\n                  mapInstance.current.setZoom(currentZoom);\n                  mapInstance.current.setCenter(center);\n                  console.log('위성 타일 강제 로드 완료');\n                }\n              }, 300);\n            }\n          }, 1000);\n        }\n\n        // 변경된 지도 타입 확인\n        const changedMapType = mapInstance.current.getMapTypeId();\n        console.log('변경된 지도 타입:', changedMapType);\n\n        // 상태 업데이트 (지도 타입 변경 후)\n        const newSatelliteState = !isSatellite;\n        setIsSatellite(newSatelliteState);\n        console.log('새 위성 상태:', newSatelliteState);\n        console.log('=== 버튼 클릭 완료 ===');\n      } catch (error) {\n        console.error('지도 타입 변경 오류:', error);\n      }\n    } else {\n      console.log('지도가 아직 로드되지 않았거나 Google Maps API가 없음');\n      console.log('mapInstance.current:', mapInstance.current);\n      console.log('window.google:', window.google);\n    }\n  };\n\n  // 지도 초기화\n  useEffect(() => {\n    const initMap = () => {\n      if (!mapRef.current || !window.google || !window.google.maps) {\n        return false;\n      }\n      try {\n        // 기존 마커들 제거\n        markersRef.current.forEach(marker => {\n          if (marker && marker.setMap) {\n            marker.setMap(null);\n          }\n        });\n        markersRef.current = [];\n\n        // 지도 생성\n        const map = new window.google.maps.Map(mapRef.current, {\n          center,\n          zoom,\n          mapTypeId: window.google.maps.MapTypeId.ROADMAP,\n          zoomControl: true,\n          mapTypeControl: false,\n          scaleControl: false,\n          streetViewControl: false,\n          rotateControl: false,\n          fullscreenControl: false,\n          // Ctrl+스크롤 해제 및 화면 흔들림 방지\n          gestureHandling: 'greedy',\n          // 위성 타일 안정성 개선\n          mapTypeControlOptions: {\n            style: window.google.maps.MapTypeControlStyle.HORIZONTAL_BAR,\n            position: window.google.maps.ControlPosition.TOP_RIGHT\n          },\n          // 타일 로딩 최적화\n          backgroundColor: '#f0f0f0',\n          // 위성 타일 캐싱 개선\n          disableDefaultUI: false,\n          // 타일 로딩 성능 개선\n          maxZoom: 18,\n          minZoom: 8,\n          // 위성 타일 품질 개선\n          tilt: 0,\n          // 타일 로딩 최적화\n          zoomControlOptions: {\n            position: window.google.maps.ControlPosition.RIGHT_TOP\n          },\n          // 타일 렌더링 안정성 개선\n          disableDoubleClickZoom: false,\n          // 대한민국 본토만 표시 (주변국 최소화)\n          restriction: {\n            latLngBounds: {\n              north: 38.0,\n              // 최북단 (강원도)\n              south: 34.5,\n              // 최남단 (경남)\n              east: 131.0,\n              // 최동단 (울릉도)\n              west: 125.0 // 최서단 (서해안)\n            },\n            strictBounds: false // 경계를 넘어서도 줌 가능하도록\n          }\n        });\n        mapInstance.current = map;\n\n        // 지도 로드 완료 이벤트 추가\n        map.addListener('tilesloaded', () => {\n          console.log('지도 타일 로드 완료');\n          setIsMapLoaded(true);\n        });\n\n        // 지도 완전 로드 이벤트\n        map.addListener('idle', () => {\n          console.log('지도 완전 로드됨');\n          setIsMapLoaded(true);\n        });\n\n        // 지도가 생성되면 즉시 로드된 것으로 설정\n        setIsMapLoaded(true);\n        console.log('지도 초기화 완료');\n\n        // 위성 타일 미리 로드 (3초 후)\n        setTimeout(() => {\n          if (mapInstance.current) {\n            console.log('위성 타일 미리 로드 시작');\n            const originalType = mapInstance.current.getMapTypeId();\n            const originalCenter = mapInstance.current.getCenter();\n            const originalZoom = mapInstance.current.getZoom();\n\n            // 위성 모드로 전환\n            mapInstance.current.setMapTypeId(window.google.maps.MapTypeId.SATELLITE);\n\n            // 위성 타일 로드 대기\n            setTimeout(() => {\n              if (mapInstance.current) {\n                // 원래 타입으로 복원\n                mapInstance.current.setMapTypeId(originalType);\n                mapInstance.current.setCenter(originalCenter);\n                mapInstance.current.setZoom(originalZoom);\n                console.log('위성 타일 미리 로드 완료');\n              }\n            }, 1500);\n          }\n        }, 3000);\n\n        // 마커 생성\n        properties.forEach(property => {\n          const marker = new window.google.maps.Marker({\n            position: property.location,\n            map,\n            title: property.title,\n            icon: {\n              url: 'data:image/svg+xml;charset=UTF-8,' + encodeURIComponent(`\n                <svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n                  <path d=\"M12 2C8.13 2 5 5.13 5 9c0 5.25 7 13 7 13s7-7.75 7-13c0-3.87-3.13-7-7-7zm0 9.5c-1.38 0-2.5-1.12-2.5-2.5s1.12-2.5 2.5-2.5 2.5 1.12 2.5 2.5-1.12 2.5-2.5 2.5z\" fill=\"#2563eb\"/>\n                </svg>\n              `),\n              scaledSize: new window.google.maps.Size(24, 24),\n              anchor: new window.google.maps.Point(12, 12)\n            }\n          });\n          if (onMarkerClick) {\n            marker.addListener('click', () => {\n              onMarkerClick(property);\n            });\n          }\n          markersRef.current.push(marker);\n        });\n        return true;\n      } catch (error) {\n        console.error('지도 초기화 오류:', error);\n        return false;\n      }\n    };\n\n    // Google Maps API 로딩 확인 및 지도 초기화\n    const checkAndInit = () => {\n      if (window.google && window.google.maps) {\n        if (initMap()) {\n          setIsMapLoaded(true); // 지도가 로드되면 상태 업데이트\n          return;\n        }\n      }\n\n      // API가 로드되지 않았으면 100ms 후 다시 시도\n      setTimeout(checkAndInit, 100);\n    };\n    checkAndInit();\n\n    // 컴포넌트 언마운트 시 정리\n    return () => {\n      markersRef.current.forEach(marker => {\n        if (marker && marker.setMap) {\n          marker.setMap(null);\n        }\n      });\n      markersRef.current = [];\n    };\n  }, [properties, onMarkerClick, center, zoom]);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(SatelliteButton, {\n      onClick: toggleSatellite,\n      className: isSatellite ? 'satellite' : 'roadmap',\n      style: {\n        display: 'block'\n      },\n      children: isSatellite ? '일반지도' : '위성지도'\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 343,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(MapContainer, {\n      ref: mapRef\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 350,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n};\n_s(GoogleMap, \"/mlQqCAN8pGBDoBZ2IVV9ALXBOA=\");\n_c3 = GoogleMap;\nexport default GoogleMap;\nvar _c, _c2, _c3;\n$RefreshReg$(_c, \"MapContainer\");\n$RefreshReg$(_c2, \"SatelliteButton\");\n$RefreshReg$(_c3, \"GoogleMap\");","map":{"version":3,"names":["React","useEffect","useRef","useState","styled","jsxDEV","_jsxDEV","Fragment","_Fragment","MapContainer","div","_c","SatelliteButton","button","_c2","GoogleMap","properties","onMarkerClick","center","lat","lng","zoom","_s","mapRef","mapInstance","markersRef","isSatellite","setIsSatellite","isMapLoaded","setIsMapLoaded","toggleSatellite","console","log","current","window","google","maps","currentMapType","getMapTypeId","newMapType","MapTypeId","ROADMAP","SATELLITE","setMapTypeId","setTimeout","getCenter","getZoom","currentZoom","setZoom","setCenter","changedMapType","newSatelliteState","error","initMap","forEach","marker","setMap","map","Map","mapTypeId","zoomControl","mapTypeControl","scaleControl","streetViewControl","rotateControl","fullscreenControl","gestureHandling","mapTypeControlOptions","style","MapTypeControlStyle","HORIZONTAL_BAR","position","ControlPosition","TOP_RIGHT","backgroundColor","disableDefaultUI","maxZoom","minZoom","tilt","zoomControlOptions","RIGHT_TOP","disableDoubleClickZoom","restriction","latLngBounds","north","south","east","west","strictBounds","addListener","originalType","originalCenter","originalZoom","property","Marker","location","title","icon","url","encodeURIComponent","scaledSize","Size","anchor","Point","push","checkAndInit","children","onClick","className","display","fileName","_jsxFileName","lineNumber","columnNumber","ref","_c3","$RefreshReg$"],"sources":["C:/Users/user/지도기반사이트만들기/src/components/GoogleMap.tsx"],"sourcesContent":["import React, { useEffect, useRef, useState } from 'react';\r\nimport styled from 'styled-components';\r\nimport { Property } from '../types';\r\n\r\nconst MapContainer = styled.div`\r\n  width: 100%;\r\n  height: 100%;\r\n  min-height: 400px;\r\n  background: #f0f0f0;\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n  color: #666;\r\n  font-size: 1rem;\r\n  position: relative;\r\n  overflow: visible;\r\n\r\n  /* 마름모형 기호 완전 제거 */\r\n  .gmnoprint {\r\n    display: none !important;\r\n  }\r\n  \r\n  /* 지도 타입 컨트롤 완전 제거 */\r\n  .gm-style-mtc {\r\n    display: none !important;\r\n  }\r\n  \r\n  /* 모든 불필요한 컨트롤 제거 */\r\n  .gm-style button[title*=\"Map\"] {\r\n    display: none !important;\r\n  }\r\n`;\r\n\r\nconst SatelliteButton = styled.button`\r\n  position: fixed;\r\n  top: 120px;\r\n  left: 20px;\r\n  z-index: 99999;\r\n  background: #4CAF50;\r\n  border: 3px solid #2E7D32;\r\n  border-radius: 6px;\r\n  padding: 8px 12px;\r\n  font-size: 12px;\r\n  font-weight: bold;\r\n  color: white;\r\n  cursor: pointer;\r\n  box-shadow: 0 3px 6px rgba(0, 0, 0, 0.4);\r\n  transition: all 0.3s ease;\r\n  min-width: 70px;\r\n  text-align: center;\r\n  user-select: none;\r\n  pointer-events: auto;\r\n\r\n  &:hover {\r\n    background: #45a049;\r\n    transform: translateY(-2px);\r\n    box-shadow: 0 5px 10px rgba(0, 0, 0, 0.5);\r\n  }\r\n\r\n  &:active {\r\n    transform: translateY(0);\r\n    box-shadow: 0 2px 4px rgba(0, 0, 0, 0.4);\r\n  }\r\n\r\n  &.satellite {\r\n    background: #FF5722;\r\n    border-color: #D84315;\r\n    \r\n    &:hover {\r\n      background: #F4511E;\r\n    }\r\n  }\r\n\r\n  &.roadmap {\r\n    background: #2196F3;\r\n    border-color: #1976D2;\r\n    \r\n    &:hover {\r\n      background: #1E88E5;\r\n    }\r\n  }\r\n`;\r\n\r\ninterface GoogleMapProps {\r\n  properties: Property[];\r\n  onMarkerClick?: (property: Property) => void;\r\n  center?: { lat: number; lng: number };\r\n  zoom?: number;\r\n}\r\n\r\ndeclare global {\r\n  interface Window {\r\n    google: any;\r\n  }\r\n}\r\n\r\nconst GoogleMap: React.FC<GoogleMapProps> = ({\r\n  properties,\r\n  onMarkerClick,\r\n  center = { lat: 37.5665, lng: 126.9780 }, // 서울 중심\r\n  zoom = 10 // 서울 중심에 맞는 줌 레벨\r\n}) => {\r\n  const mapRef = useRef<HTMLDivElement>(null);\r\n  const mapInstance = useRef<any>(null);\r\n  const markersRef = useRef<any[]>([]);\r\n  const [isSatellite, setIsSatellite] = useState(false);\r\n  const [isMapLoaded, setIsMapLoaded] = useState(false);\r\n\r\n  // 위성지도 토글 함수\r\n  const toggleSatellite = () => {\r\n    console.log('=== 버튼 클릭 시작 ===');\r\n    console.log('현재 isSatellite 상태:', isSatellite);\r\n    console.log('지도 인스턴스:', mapInstance.current);\r\n    console.log('Google Maps API:', window.google);\r\n    \r\n    if (mapInstance.current && window.google && window.google.maps && isMapLoaded) {\r\n      try {\r\n        // 현재 지도의 실제 타입 확인\r\n        const currentMapType = mapInstance.current.getMapTypeId();\r\n        console.log('현재 지도 타입:', currentMapType);\r\n        \r\n        // 새로운 지도 타입 결정 (현재 상태의 반대로)\r\n        let newMapType;\r\n        if (isSatellite) {\r\n          // 현재 위성 모드이면 일반지도로\r\n          newMapType = window.google.maps.MapTypeId.ROADMAP;\r\n        } else {\r\n          // 현재 일반 모드이면 위성지도로\r\n          newMapType = window.google.maps.MapTypeId.SATELLITE;\r\n        }\r\n        \r\n        console.log('변경할 지도 타입:', newMapType);\r\n        \r\n        // 지도 타입 변경\r\n        mapInstance.current.setMapTypeId(newMapType);\r\n        \r\n        // 위성으로 변경할 때 타일 강제 로드\r\n        if (!isSatellite) {\r\n          setTimeout(() => {\r\n            if (mapInstance.current) {\r\n              // 현재 중심점과 줌 저장\r\n              const center = mapInstance.current.getCenter();\r\n              const zoom = mapInstance.current.getZoom();\r\n              \r\n              // 줌 조정으로 타일 새로고침 (화면 움직임 없음)\r\n              const currentZoom = mapInstance.current.getZoom();\r\n              mapInstance.current.setZoom(currentZoom + 0.1);\r\n              setTimeout(() => {\r\n                if (mapInstance.current) {\r\n                  mapInstance.current.setZoom(currentZoom);\r\n                  mapInstance.current.setCenter(center);\r\n                  console.log('위성 타일 강제 로드 완료');\r\n                }\r\n              }, 300);\r\n            }\r\n          }, 1000);\r\n        }\r\n        \r\n        // 변경된 지도 타입 확인\r\n        const changedMapType = mapInstance.current.getMapTypeId();\r\n        console.log('변경된 지도 타입:', changedMapType);\r\n        \r\n        // 상태 업데이트 (지도 타입 변경 후)\r\n        const newSatelliteState = !isSatellite;\r\n        setIsSatellite(newSatelliteState);\r\n        \r\n        console.log('새 위성 상태:', newSatelliteState);\r\n        console.log('=== 버튼 클릭 완료 ===');\r\n      } catch (error) {\r\n        console.error('지도 타입 변경 오류:', error);\r\n      }\r\n    } else {\r\n      console.log('지도가 아직 로드되지 않았거나 Google Maps API가 없음');\r\n      console.log('mapInstance.current:', mapInstance.current);\r\n      console.log('window.google:', window.google);\r\n    }\r\n  };\r\n\r\n  // 지도 초기화\r\n  useEffect(() => {\r\n    const initMap = () => {\r\n      if (!mapRef.current || !window.google || !window.google.maps) {\r\n        return false;\r\n      }\r\n\r\n      try {\r\n        // 기존 마커들 제거\r\n        markersRef.current.forEach(marker => {\r\n          if (marker && marker.setMap) {\r\n            marker.setMap(null);\r\n          }\r\n        });\r\n        markersRef.current = [];\r\n\r\n        // 지도 생성\r\n        const map = new window.google.maps.Map(mapRef.current, {\r\n          center,\r\n          zoom,\r\n          mapTypeId: window.google.maps.MapTypeId.ROADMAP,\r\n          zoomControl: true,\r\n          mapTypeControl: false,\r\n          scaleControl: false,\r\n          streetViewControl: false,\r\n          rotateControl: false,\r\n          fullscreenControl: false,\r\n          // Ctrl+스크롤 해제 및 화면 흔들림 방지\r\n          gestureHandling: 'greedy',\r\n          // 위성 타일 안정성 개선\r\n          mapTypeControlOptions: {\r\n            style: window.google.maps.MapTypeControlStyle.HORIZONTAL_BAR,\r\n            position: window.google.maps.ControlPosition.TOP_RIGHT\r\n          },\r\n          // 타일 로딩 최적화\r\n          backgroundColor: '#f0f0f0',\r\n          // 위성 타일 캐싱 개선\r\n          disableDefaultUI: false,\r\n          // 타일 로딩 성능 개선\r\n          maxZoom: 18,\r\n          minZoom: 8,\r\n          // 위성 타일 품질 개선\r\n          tilt: 0,\r\n          // 타일 로딩 최적화\r\n          zoomControlOptions: {\r\n            position: window.google.maps.ControlPosition.RIGHT_TOP\r\n          },\r\n          // 타일 렌더링 안정성 개선\r\n          disableDoubleClickZoom: false,\r\n          // 대한민국 본토만 표시 (주변국 최소화)\r\n          restriction: {\r\n            latLngBounds: {\r\n              north: 38.0, // 최북단 (강원도)\r\n              south: 34.5, // 최남단 (경남)\r\n              east: 131.0, // 최동단 (울릉도)\r\n              west: 125.0  // 최서단 (서해안)\r\n            },\r\n            strictBounds: false // 경계를 넘어서도 줌 가능하도록\r\n          }\r\n        });\r\n\r\n        mapInstance.current = map;\r\n\r\n        // 지도 로드 완료 이벤트 추가\r\n        map.addListener('tilesloaded', () => {\r\n          console.log('지도 타일 로드 완료');\r\n          setIsMapLoaded(true);\r\n        });\r\n\r\n        // 지도 완전 로드 이벤트\r\n        map.addListener('idle', () => {\r\n          console.log('지도 완전 로드됨');\r\n          setIsMapLoaded(true);\r\n        });\r\n\r\n        // 지도가 생성되면 즉시 로드된 것으로 설정\r\n        setIsMapLoaded(true);\r\n        console.log('지도 초기화 완료');\r\n\r\n        // 위성 타일 미리 로드 (3초 후)\r\n        setTimeout(() => {\r\n          if (mapInstance.current) {\r\n            console.log('위성 타일 미리 로드 시작');\r\n            const originalType = mapInstance.current.getMapTypeId();\r\n            const originalCenter = mapInstance.current.getCenter();\r\n            const originalZoom = mapInstance.current.getZoom();\r\n            \r\n            // 위성 모드로 전환\r\n            mapInstance.current.setMapTypeId(window.google.maps.MapTypeId.SATELLITE);\r\n            \r\n            // 위성 타일 로드 대기\r\n            setTimeout(() => {\r\n              if (mapInstance.current) {\r\n                // 원래 타입으로 복원\r\n                mapInstance.current.setMapTypeId(originalType);\r\n                mapInstance.current.setCenter(originalCenter);\r\n                mapInstance.current.setZoom(originalZoom);\r\n                console.log('위성 타일 미리 로드 완료');\r\n              }\r\n            }, 1500);\r\n          }\r\n        }, 3000);\r\n\r\n        // 마커 생성\r\n        properties.forEach(property => {\r\n          const marker = new window.google.maps.Marker({\r\n            position: property.location,\r\n            map,\r\n            title: property.title,\r\n            icon: {\r\n              url: 'data:image/svg+xml;charset=UTF-8,' + encodeURIComponent(`\r\n                <svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\r\n                  <path d=\"M12 2C8.13 2 5 5.13 5 9c0 5.25 7 13 7 13s7-7.75 7-13c0-3.87-3.13-7-7-7zm0 9.5c-1.38 0-2.5-1.12-2.5-2.5s1.12-2.5 2.5-2.5 2.5 1.12 2.5 2.5-1.12 2.5-2.5 2.5z\" fill=\"#2563eb\"/>\r\n                </svg>\r\n              `),\r\n              scaledSize: new window.google.maps.Size(24, 24),\r\n              anchor: new window.google.maps.Point(12, 12)\r\n            }\r\n          });\r\n\r\n          if (onMarkerClick) {\r\n            marker.addListener('click', () => {\r\n              onMarkerClick(property);\r\n            });\r\n          }\r\n\r\n          markersRef.current.push(marker);\r\n        });\r\n\r\n        return true;\r\n      } catch (error) {\r\n        console.error('지도 초기화 오류:', error);\r\n        return false;\r\n      }\r\n    };\r\n\r\n    // Google Maps API 로딩 확인 및 지도 초기화\r\n    const checkAndInit = () => {\r\n      if (window.google && window.google.maps) {\r\n        if (initMap()) {\r\n          setIsMapLoaded(true); // 지도가 로드되면 상태 업데이트\r\n          return;\r\n        }\r\n      }\r\n      \r\n      // API가 로드되지 않았으면 100ms 후 다시 시도\r\n      setTimeout(checkAndInit, 100);\r\n    };\r\n\r\n    checkAndInit();\r\n\r\n    // 컴포넌트 언마운트 시 정리\r\n    return () => {\r\n      markersRef.current.forEach(marker => {\r\n        if (marker && marker.setMap) {\r\n          marker.setMap(null);\r\n        }\r\n      });\r\n      markersRef.current = [];\r\n    };\r\n  }, [properties, onMarkerClick, center, zoom]);\r\n\r\n  return (\r\n    <>\r\n      <SatelliteButton \r\n        onClick={toggleSatellite}\r\n        className={isSatellite ? 'satellite' : 'roadmap'}\r\n        style={{ display: 'block' }}\r\n      >\r\n        {isSatellite ? '일반지도' : '위성지도'}\r\n      </SatelliteButton>\r\n      <MapContainer ref={mapRef} />\r\n    </>\r\n  );\r\n};\r\n\r\nexport default GoogleMap; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}