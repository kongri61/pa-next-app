{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\user\\\\\\uC9C0\\uB3C4\\uAE30\\uBC18\\uC0AC\\uC774\\uD2B8\\uB9CC\\uB4E4\\uAE30\\\\src\\\\components\\\\GoogleMap.tsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useRef, useState } from 'react';\nimport styled from 'styled-components';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst MapContainer = styled.div`\n  width: 100%;\n  height: 100%;\n  min-height: 400px;\n  background: #f0f0f0;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  color: #666;\n  font-size: 1rem;\n  position: relative;\n  overflow: visible;\n\n  /* 마름모형 기호 완전 제거 */\n  .gmnoprint {\n    display: none !important;\n  }\n  \n  /* 지도 타입 컨트롤 완전 제거 */\n  .gm-style-mtc {\n    display: none !important;\n  }\n  \n  /* 모든 불필요한 컨트롤 제거 */\n  .gm-style button[title*=\"Map\"] {\n    display: none !important;\n  }\n`;\n_c = MapContainer;\nconst GoogleMap = ({\n  properties,\n  onMarkerClick,\n  center = {\n    lat: 37.5665,\n    lng: 126.9780\n  },\n  // 서울 중심\n  zoom = 10 // 서울 중심에 맞는 줌 레벨\n}) => {\n  _s();\n  const mapRef = useRef(null);\n  const mapInstance = useRef(null);\n  const markersRef = useRef([]);\n  const [isMapLoaded, setIsMapLoaded] = useState(false);\n\n  // 마커 클러스터링 함수\n  const createClusterMarker = (properties, center) => {\n    const marker = new window.google.maps.Marker({\n      position: center,\n      map: mapInstance.current,\n      icon: {\n        url: 'data:image/svg+xml;charset=UTF-8,' + encodeURIComponent(`\n          <svg width=\"40\" height=\"40\" viewBox=\"0 0 40 40\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n            <circle cx=\"20\" cy=\"20\" r=\"18\" fill=\"#2563eb\" stroke=\"#1e40af\" stroke-width=\"2\"/>\n            <text x=\"20\" y=\"25\" text-anchor=\"middle\" fill=\"white\" font-family=\"Arial, sans-serif\" font-size=\"12\" font-weight=\"bold\">${properties.length}</text>\n          </svg>\n        `),\n        scaledSize: new window.google.maps.Size(40, 40),\n        anchor: new window.google.maps.Point(20, 20)\n      }\n    });\n\n    // 클러스터 마커 클릭 시 해당 지역으로 줌\n    marker.addListener('click', () => {\n      const bounds = new window.google.maps.LatLngBounds();\n      properties.forEach(property => {\n        bounds.extend(property.location);\n      });\n      mapInstance.current.fitBounds(bounds);\n    });\n    return marker;\n  };\n\n  // 마커 클러스터링 로직\n  const clusterMarkers = (markers, zoom) => {\n    const clusters = [];\n\n    // 줌 레벨에 따른 클러스터 반경 조정 (더 큰 반경으로 변경)\n    let clusterRadius;\n    if (zoom < 10) {\n      clusterRadius = 0.05; // 매우 넓은 반경 (줌 아웃 시)\n    } else if (zoom < 12) {\n      clusterRadius = 0.02; // 넓은 반경\n    } else if (zoom < 14) {\n      clusterRadius = 0.01; // 중간 반경\n    } else if (zoom < 16) {\n      clusterRadius = 0.005; // 좁은 반경\n    } else {\n      clusterRadius = 0.001; // 매우 좁은 반경 (줌 인 시)\n    }\n    console.log(`현재 줌 레벨: ${zoom}, 클러스터 반경: ${clusterRadius}`);\n    markers.forEach((marker, index) => {\n      const property = properties[index];\n      let addedToCluster = false;\n      for (const cluster of clusters) {\n        const distance = Math.sqrt(Math.pow(property.location.lat - cluster.center.lat, 2) + Math.pow(property.location.lng - cluster.center.lng, 2));\n        if (distance < clusterRadius) {\n          // 기존 클러스터에 추가\n          cluster.properties.push(property);\n          cluster.center = {\n            lat: cluster.properties.reduce((sum, p) => sum + p.location.lat, 0) / cluster.properties.length,\n            lng: cluster.properties.reduce((sum, p) => sum + p.location.lng, 0) / cluster.properties.length\n          };\n          addedToCluster = true;\n          console.log(`매물 ${property.id}를 기존 클러스터에 추가 (총 ${cluster.properties.length}개)`);\n          break;\n        }\n      }\n      if (!addedToCluster) {\n        // 새 클러스터 생성\n        clusters.push({\n          center: property.location,\n          properties: [property]\n        });\n        console.log(`새 클러스터 생성: 매물 ${property.id}`);\n      }\n    });\n    console.log(`총 ${clusters.length}개의 클러스터 생성됨`);\n    return clusters;\n  };\n\n  // 지도 초기화\n  useEffect(() => {\n    const initMap = () => {\n      if (!mapRef.current || !window.google || !window.google.maps) {\n        return false;\n      }\n      try {\n        // 기존 마커들 제거\n        markersRef.current.forEach(marker => {\n          if (marker && marker.setMap) {\n            marker.setMap(null);\n          }\n        });\n        markersRef.current = [];\n\n        // 지도 생성\n        const map = new window.google.maps.Map(mapRef.current, {\n          center,\n          zoom,\n          mapTypeId: window.google.maps.MapTypeId.ROADMAP,\n          zoomControl: true,\n          mapTypeControl: false,\n          scaleControl: false,\n          streetViewControl: false,\n          rotateControl: false,\n          fullscreenControl: false,\n          // Ctrl+스크롤 해제 및 화면 흔들림 방지\n          gestureHandling: 'greedy',\n          // 위성 타일 안정성 개선\n          mapTypeControlOptions: {\n            style: window.google.maps.MapTypeControlStyle.HORIZONTAL_BAR,\n            position: window.google.maps.ControlPosition.TOP_RIGHT\n          },\n          // 타일 로딩 최적화\n          backgroundColor: '#f0f0f0',\n          // 위성 타일 캐싱 개선\n          disableDefaultUI: false,\n          // 타일 로딩 성능 개선\n          maxZoom: 18,\n          minZoom: 8,\n          // 위성 타일 품질 개선\n          tilt: 0,\n          // 타일 로딩 최적화\n          zoomControlOptions: {\n            position: window.google.maps.ControlPosition.RIGHT_TOP\n          },\n          // 타일 렌더링 안정성 개선\n          disableDoubleClickZoom: false,\n          // 대한민국 본토만 표시 (주변국 최소화)\n          restriction: {\n            latLngBounds: {\n              north: 38.0,\n              // 최북단 (강원도)\n              south: 34.5,\n              // 최남단 (경남)\n              east: 131.0,\n              // 최동단 (울릉도)\n              west: 125.0 // 최서단 (서해안)\n            },\n            strictBounds: false // 경계를 넘어서도 줌 가능하도록\n          }\n        });\n        mapInstance.current = map;\n\n        // 지도 로드 완료 이벤트 추가\n        map.addListener('tilesloaded', () => {\n          console.log('지도 타일 로드 완료');\n          setIsMapLoaded(true);\n        });\n\n        // 지도 완전 로드 이벤트\n        map.addListener('idle', () => {\n          console.log('지도 완전 로드됨');\n          setIsMapLoaded(true);\n        });\n\n        // 지도가 생성되면 즉시 로드된 것으로 설정\n        setIsMapLoaded(true);\n        console.log('지도 초기화 완료');\n\n        // 마커 생성 및 클러스터링\n        const createMarkers = () => {\n          const currentZoom = map.getZoom();\n          const clusters = clusterMarkers(properties.map((_, index) => index), currentZoom);\n          clusters.forEach(cluster => {\n            if (cluster.properties.length === 1) {\n              // 단일 마커 - 항상 \"1\" 표시\n              const property = cluster.properties[0];\n              const marker = new window.google.maps.Marker({\n                position: property.location,\n                map,\n                title: property.title,\n                icon: {\n                  url: 'data:image/svg+xml;charset=UTF-8,' + encodeURIComponent(`\n                    <svg width=\"30\" height=\"30\" viewBox=\"0 0 30 30\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n                      <circle cx=\"15\" cy=\"15\" r=\"13\" fill=\"#2563eb\" stroke=\"#1e40af\" stroke-width=\"2\"/>\n                      <text x=\"15\" y=\"19\" text-anchor=\"middle\" fill=\"white\" font-family=\"Arial, sans-serif\" font-size=\"10\" font-weight=\"bold\">1</text>\n                    </svg>\n                  `),\n                  scaledSize: new window.google.maps.Size(30, 30),\n                  anchor: new window.google.maps.Point(15, 15)\n                }\n              });\n              if (onMarkerClick) {\n                marker.addListener('click', () => {\n                  onMarkerClick(property);\n                });\n              }\n              markersRef.current.push(marker);\n            } else {\n              // 클러스터 마커 - 묶인 개수 표시\n              const clusterMarker = createClusterMarker(cluster.properties, cluster.center);\n              markersRef.current.push(clusterMarker);\n            }\n          });\n        };\n\n        // 초기 마커 생성\n        createMarkers();\n\n        // 줌 변경 시 마커 재생성\n        map.addListener('zoom_changed', () => {\n          // 기존 마커 제거\n          markersRef.current.forEach(marker => {\n            if (marker && marker.setMap) {\n              marker.setMap(null);\n            }\n          });\n          markersRef.current = [];\n\n          // 새 마커 생성\n          setTimeout(createMarkers, 100);\n        });\n        return true;\n      } catch (error) {\n        console.error('지도 초기화 오류:', error);\n        return false;\n      }\n    };\n\n    // Google Maps API 로딩 확인 및 지도 초기화\n    const checkAndInit = () => {\n      if (window.google && window.google.maps) {\n        if (initMap()) {\n          setIsMapLoaded(true); // 지도가 로드되면 상태 업데이트\n          return;\n        }\n      }\n\n      // API가 로드되지 않았으면 100ms 후 다시 시도\n      setTimeout(checkAndInit, 100);\n    };\n    checkAndInit();\n\n    // 컴포넌트 언마운트 시 정리\n    return () => {\n      markersRef.current.forEach(marker => {\n        if (marker && marker.setMap) {\n          marker.setMap(null);\n        }\n      });\n      markersRef.current = [];\n    };\n  }, [properties, onMarkerClick, center, zoom]);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(MapContainer, {\n      ref: mapRef\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 315,\n      columnNumber: 7\n    }, this)\n  }, void 0, false);\n};\n_s(GoogleMap, \"+kJ3fuNrfwqiLlXwxo6gTFj+DAk=\");\n_c2 = GoogleMap;\nexport default GoogleMap;\nvar _c, _c2;\n$RefreshReg$(_c, \"MapContainer\");\n$RefreshReg$(_c2, \"GoogleMap\");","map":{"version":3,"names":["React","useEffect","useRef","useState","styled","jsxDEV","_jsxDEV","Fragment","_Fragment","MapContainer","div","_c","GoogleMap","properties","onMarkerClick","center","lat","lng","zoom","_s","mapRef","mapInstance","markersRef","isMapLoaded","setIsMapLoaded","createClusterMarker","marker","window","google","maps","Marker","position","map","current","icon","url","encodeURIComponent","length","scaledSize","Size","anchor","Point","addListener","bounds","LatLngBounds","forEach","property","extend","location","fitBounds","clusterMarkers","markers","clusters","clusterRadius","console","log","index","addedToCluster","cluster","distance","Math","sqrt","pow","push","reduce","sum","p","id","initMap","setMap","Map","mapTypeId","MapTypeId","ROADMAP","zoomControl","mapTypeControl","scaleControl","streetViewControl","rotateControl","fullscreenControl","gestureHandling","mapTypeControlOptions","style","MapTypeControlStyle","HORIZONTAL_BAR","ControlPosition","TOP_RIGHT","backgroundColor","disableDefaultUI","maxZoom","minZoom","tilt","zoomControlOptions","RIGHT_TOP","disableDoubleClickZoom","restriction","latLngBounds","north","south","east","west","strictBounds","createMarkers","currentZoom","getZoom","_","title","clusterMarker","setTimeout","error","checkAndInit","children","ref","fileName","_jsxFileName","lineNumber","columnNumber","_c2","$RefreshReg$"],"sources":["C:/Users/user/지도기반사이트만들기/src/components/GoogleMap.tsx"],"sourcesContent":["import React, { useEffect, useRef, useState } from 'react';\r\nimport styled from 'styled-components';\r\nimport { Property } from '../types';\r\n\r\nconst MapContainer = styled.div`\r\n  width: 100%;\r\n  height: 100%;\r\n  min-height: 400px;\r\n  background: #f0f0f0;\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n  color: #666;\r\n  font-size: 1rem;\r\n  position: relative;\r\n  overflow: visible;\r\n\r\n  /* 마름모형 기호 완전 제거 */\r\n  .gmnoprint {\r\n    display: none !important;\r\n  }\r\n  \r\n  /* 지도 타입 컨트롤 완전 제거 */\r\n  .gm-style-mtc {\r\n    display: none !important;\r\n  }\r\n  \r\n  /* 모든 불필요한 컨트롤 제거 */\r\n  .gm-style button[title*=\"Map\"] {\r\n    display: none !important;\r\n  }\r\n`;\r\n\r\ninterface GoogleMapProps {\r\n  properties: Property[];\r\n  onMarkerClick?: (property: Property) => void;\r\n  center?: { lat: number; lng: number };\r\n  zoom?: number;\r\n}\r\n\r\ndeclare global {\r\n  interface Window {\r\n    google: any;\r\n  }\r\n}\r\n\r\nconst GoogleMap: React.FC<GoogleMapProps> = ({\r\n  properties,\r\n  onMarkerClick,\r\n  center = { lat: 37.5665, lng: 126.9780 }, // 서울 중심\r\n  zoom = 10 // 서울 중심에 맞는 줌 레벨\r\n}) => {\r\n  const mapRef = useRef<HTMLDivElement>(null);\r\n  const mapInstance = useRef<any>(null);\r\n  const markersRef = useRef<any[]>([]);\r\n  const [isMapLoaded, setIsMapLoaded] = useState(false);\r\n\r\n  // 마커 클러스터링 함수\r\n  const createClusterMarker = (properties: Property[], center: { lat: number; lng: number }) => {\r\n    const marker = new window.google.maps.Marker({\r\n      position: center,\r\n      map: mapInstance.current,\r\n      icon: {\r\n        url: 'data:image/svg+xml;charset=UTF-8,' + encodeURIComponent(`\r\n          <svg width=\"40\" height=\"40\" viewBox=\"0 0 40 40\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\r\n            <circle cx=\"20\" cy=\"20\" r=\"18\" fill=\"#2563eb\" stroke=\"#1e40af\" stroke-width=\"2\"/>\r\n            <text x=\"20\" y=\"25\" text-anchor=\"middle\" fill=\"white\" font-family=\"Arial, sans-serif\" font-size=\"12\" font-weight=\"bold\">${properties.length}</text>\r\n          </svg>\r\n        `),\r\n        scaledSize: new window.google.maps.Size(40, 40),\r\n        anchor: new window.google.maps.Point(20, 20)\r\n      }\r\n    });\r\n\r\n    // 클러스터 마커 클릭 시 해당 지역으로 줌\r\n    marker.addListener('click', () => {\r\n      const bounds = new window.google.maps.LatLngBounds();\r\n      properties.forEach(property => {\r\n        bounds.extend(property.location);\r\n      });\r\n      mapInstance.current.fitBounds(bounds);\r\n    });\r\n\r\n    return marker;\r\n  };\r\n\r\n  // 마커 클러스터링 로직\r\n  const clusterMarkers = (markers: any[], zoom: number) => {\r\n    const clusters: { center: { lat: number; lng: number }; properties: Property[] }[] = [];\r\n    \r\n    // 줌 레벨에 따른 클러스터 반경 조정 (더 큰 반경으로 변경)\r\n    let clusterRadius: number;\r\n    if (zoom < 10) {\r\n      clusterRadius = 0.05; // 매우 넓은 반경 (줌 아웃 시)\r\n    } else if (zoom < 12) {\r\n      clusterRadius = 0.02; // 넓은 반경\r\n    } else if (zoom < 14) {\r\n      clusterRadius = 0.01; // 중간 반경\r\n    } else if (zoom < 16) {\r\n      clusterRadius = 0.005; // 좁은 반경\r\n    } else {\r\n      clusterRadius = 0.001; // 매우 좁은 반경 (줌 인 시)\r\n    }\r\n\r\n    console.log(`현재 줌 레벨: ${zoom}, 클러스터 반경: ${clusterRadius}`);\r\n\r\n    markers.forEach((marker, index) => {\r\n      const property = properties[index];\r\n      let addedToCluster = false;\r\n\r\n      for (const cluster of clusters) {\r\n        const distance = Math.sqrt(\r\n          Math.pow(property.location.lat - cluster.center.lat, 2) +\r\n          Math.pow(property.location.lng - cluster.center.lng, 2)\r\n        );\r\n\r\n        if (distance < clusterRadius) {\r\n          // 기존 클러스터에 추가\r\n          cluster.properties.push(property);\r\n          cluster.center = {\r\n            lat: cluster.properties.reduce((sum, p) => sum + p.location.lat, 0) / cluster.properties.length,\r\n            lng: cluster.properties.reduce((sum, p) => sum + p.location.lng, 0) / cluster.properties.length\r\n          };\r\n          addedToCluster = true;\r\n          console.log(`매물 ${property.id}를 기존 클러스터에 추가 (총 ${cluster.properties.length}개)`);\r\n          break;\r\n        }\r\n      }\r\n\r\n      if (!addedToCluster) {\r\n        // 새 클러스터 생성\r\n        clusters.push({\r\n          center: property.location,\r\n          properties: [property]\r\n        });\r\n        console.log(`새 클러스터 생성: 매물 ${property.id}`);\r\n      }\r\n    });\r\n\r\n    console.log(`총 ${clusters.length}개의 클러스터 생성됨`);\r\n    return clusters;\r\n  };\r\n\r\n  // 지도 초기화\r\n  useEffect(() => {\r\n    const initMap = () => {\r\n      if (!mapRef.current || !window.google || !window.google.maps) {\r\n        return false;\r\n      }\r\n\r\n      try {\r\n        // 기존 마커들 제거\r\n        markersRef.current.forEach(marker => {\r\n          if (marker && marker.setMap) {\r\n            marker.setMap(null);\r\n          }\r\n        });\r\n        markersRef.current = [];\r\n\r\n        // 지도 생성\r\n        const map = new window.google.maps.Map(mapRef.current, {\r\n          center,\r\n          zoom,\r\n          mapTypeId: window.google.maps.MapTypeId.ROADMAP,\r\n          zoomControl: true,\r\n          mapTypeControl: false,\r\n          scaleControl: false,\r\n          streetViewControl: false,\r\n          rotateControl: false,\r\n          fullscreenControl: false,\r\n          // Ctrl+스크롤 해제 및 화면 흔들림 방지\r\n          gestureHandling: 'greedy',\r\n          // 위성 타일 안정성 개선\r\n          mapTypeControlOptions: {\r\n            style: window.google.maps.MapTypeControlStyle.HORIZONTAL_BAR,\r\n            position: window.google.maps.ControlPosition.TOP_RIGHT\r\n          },\r\n          // 타일 로딩 최적화\r\n          backgroundColor: '#f0f0f0',\r\n          // 위성 타일 캐싱 개선\r\n          disableDefaultUI: false,\r\n          // 타일 로딩 성능 개선\r\n          maxZoom: 18,\r\n          minZoom: 8,\r\n          // 위성 타일 품질 개선\r\n          tilt: 0,\r\n          // 타일 로딩 최적화\r\n          zoomControlOptions: {\r\n            position: window.google.maps.ControlPosition.RIGHT_TOP\r\n          },\r\n          // 타일 렌더링 안정성 개선\r\n          disableDoubleClickZoom: false,\r\n          // 대한민국 본토만 표시 (주변국 최소화)\r\n          restriction: {\r\n            latLngBounds: {\r\n              north: 38.0, // 최북단 (강원도)\r\n              south: 34.5, // 최남단 (경남)\r\n              east: 131.0, // 최동단 (울릉도)\r\n              west: 125.0  // 최서단 (서해안)\r\n            },\r\n            strictBounds: false // 경계를 넘어서도 줌 가능하도록\r\n          }\r\n        });\r\n\r\n        mapInstance.current = map;\r\n\r\n        // 지도 로드 완료 이벤트 추가\r\n        map.addListener('tilesloaded', () => {\r\n          console.log('지도 타일 로드 완료');\r\n          setIsMapLoaded(true);\r\n        });\r\n\r\n        // 지도 완전 로드 이벤트\r\n        map.addListener('idle', () => {\r\n          console.log('지도 완전 로드됨');\r\n          setIsMapLoaded(true);\r\n        });\r\n\r\n        // 지도가 생성되면 즉시 로드된 것으로 설정\r\n        setIsMapLoaded(true);\r\n        console.log('지도 초기화 완료');\r\n\r\n        // 마커 생성 및 클러스터링\r\n        const createMarkers = () => {\r\n          const currentZoom = map.getZoom();\r\n          const clusters = clusterMarkers(properties.map((_, index) => index), currentZoom);\r\n\r\n          clusters.forEach(cluster => {\r\n            if (cluster.properties.length === 1) {\r\n              // 단일 마커 - 항상 \"1\" 표시\r\n              const property = cluster.properties[0];\r\n              const marker = new window.google.maps.Marker({\r\n                position: property.location,\r\n                map,\r\n                title: property.title,\r\n                icon: {\r\n                  url: 'data:image/svg+xml;charset=UTF-8,' + encodeURIComponent(`\r\n                    <svg width=\"30\" height=\"30\" viewBox=\"0 0 30 30\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\r\n                      <circle cx=\"15\" cy=\"15\" r=\"13\" fill=\"#2563eb\" stroke=\"#1e40af\" stroke-width=\"2\"/>\r\n                      <text x=\"15\" y=\"19\" text-anchor=\"middle\" fill=\"white\" font-family=\"Arial, sans-serif\" font-size=\"10\" font-weight=\"bold\">1</text>\r\n                    </svg>\r\n                  `),\r\n                  scaledSize: new window.google.maps.Size(30, 30),\r\n                  anchor: new window.google.maps.Point(15, 15)\r\n                }\r\n              });\r\n\r\n              if (onMarkerClick) {\r\n                marker.addListener('click', () => {\r\n                  onMarkerClick(property);\r\n                });\r\n              }\r\n\r\n              markersRef.current.push(marker);\r\n            } else {\r\n              // 클러스터 마커 - 묶인 개수 표시\r\n              const clusterMarker = createClusterMarker(cluster.properties, cluster.center);\r\n              markersRef.current.push(clusterMarker);\r\n            }\r\n          });\r\n        };\r\n\r\n        // 초기 마커 생성\r\n        createMarkers();\r\n\r\n        // 줌 변경 시 마커 재생성\r\n        map.addListener('zoom_changed', () => {\r\n          // 기존 마커 제거\r\n          markersRef.current.forEach(marker => {\r\n            if (marker && marker.setMap) {\r\n              marker.setMap(null);\r\n            }\r\n          });\r\n          markersRef.current = [];\r\n\r\n          // 새 마커 생성\r\n          setTimeout(createMarkers, 100);\r\n        });\r\n\r\n        return true;\r\n      } catch (error) {\r\n        console.error('지도 초기화 오류:', error);\r\n        return false;\r\n      }\r\n    };\r\n\r\n    // Google Maps API 로딩 확인 및 지도 초기화\r\n    const checkAndInit = () => {\r\n      if (window.google && window.google.maps) {\r\n        if (initMap()) {\r\n          setIsMapLoaded(true); // 지도가 로드되면 상태 업데이트\r\n          return;\r\n        }\r\n      }\r\n      \r\n      // API가 로드되지 않았으면 100ms 후 다시 시도\r\n      setTimeout(checkAndInit, 100);\r\n    };\r\n\r\n    checkAndInit();\r\n\r\n    // 컴포넌트 언마운트 시 정리\r\n    return () => {\r\n      markersRef.current.forEach(marker => {\r\n        if (marker && marker.setMap) {\r\n          marker.setMap(null);\r\n        }\r\n      });\r\n      markersRef.current = [];\r\n    };\r\n  }, [properties, onMarkerClick, center, zoom]);\r\n\r\n  return (\r\n    <>\r\n      <MapContainer ref={mapRef} />\r\n    </>\r\n  );\r\n};\r\n\r\nexport default GoogleMap; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}