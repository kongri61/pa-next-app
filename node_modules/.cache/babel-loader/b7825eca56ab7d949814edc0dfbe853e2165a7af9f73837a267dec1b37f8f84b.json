{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\user\\\\\\uC9C0\\uB3C4\\uAE30\\uBC18\\uC0AC\\uC774\\uD2B8\\uB9CC\\uB4E4\\uAE30\\\\src\\\\components\\\\GoogleMap.tsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useRef, useState, useCallback } from 'react';\nimport styled from 'styled-components';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst MapContainer = styled.div`\n  width: 100%;\n  height: calc(100vh - 120px);\n  min-height: 600px;\n  position: relative;\n  overflow: visible;\n  background: #f0f0f0;\n`;\n_c = MapContainer;\nconst FallbackMap = styled.div`\n  width: 100%;\n  height: 100%;\n  background: linear-gradient(45deg, #e5e7eb 25%, transparent 25%), \n              linear-gradient(-45deg, #e5e7eb 25%, transparent 25%), \n              linear-gradient(45deg, transparent 75%, #e5e7eb 75%), \n              linear-gradient(-45deg, transparent 75%, #e5e7eb 75%);\n  background-size: 20px 20px;\n  background-position: 0 0, 0 10px, 10px -10px, -10px 0px;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  color: #6b7280;\n  font-size: 1.2rem;\n  font-weight: 500;\n`;\n_c2 = FallbackMap;\nconst MapError = styled.div`\n  text-align: center;\n  padding: 2rem;\n  background: white;\n  border-radius: 8px;\n  box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);\n  max-width: 400px;\n`;\n_c3 = MapError;\nconst GoogleMap = ({\n  properties,\n  onMarkerClick,\n  onClusterClick,\n  selectedMarkerId,\n  setSelectedMarkerId,\n  selectedClusterId,\n  setSelectedClusterId\n}) => {\n  _s();\n  const mapRef = useRef(null);\n  const mapInstance = useRef(null);\n  const markersRef = useRef([]);\n  const isClusterClicking = useRef(false);\n  const [isMapLoaded, setIsMapLoaded] = useState(false);\n  const [mapError, setMapError] = useState(null);\n  const [hoveredMarkerId, setHoveredMarkerId] = useState(null);\n\n  // 마커 클러스터링 함수\n  const createClusterMarker = useCallback((properties, center) => {\n    const clusterId = properties.map(p => p.id).join(',');\n    const isSelected = selectedClusterId === clusterId;\n    const isHovered = hoveredMarkerId === clusterId;\n    const propertyCount = properties.length;\n\n    // 매물 개수에 따른 클러스터 마커 크기와 색상 결정\n    let markerSize = 40;\n    let fontSize = 14;\n    let backgroundColor = '#2563eb';\n    let borderColor = '#1e40af';\n    if (propertyCount >= 10) {\n      markerSize = 50;\n      fontSize = 16;\n      backgroundColor = '#dc2626'; // 빨간색\n      borderColor = '#b91c1c';\n    } else if (propertyCount >= 5) {\n      markerSize = 45;\n      fontSize = 15;\n      backgroundColor = '#f59e0b'; // 주황색\n      borderColor = '#d97706';\n    } else if (propertyCount >= 3) {\n      markerSize = 42;\n      fontSize = 14;\n      backgroundColor = '#10b981'; // 초록색\n      borderColor = '#059669';\n    }\n    const marker = new window.google.maps.Marker({\n      position: center,\n      map: mapInstance.current,\n      icon: {\n        url: 'data:image/svg+xml;charset=UTF-8,' + encodeURIComponent(isSelected ? `<svg width=\"${markerSize + 4}\" height=\"${markerSize + 4}\" viewBox=\"0 0 ${markerSize + 4} ${markerSize + 4}\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n                <circle cx=\"${(markerSize + 4) / 2}\" cy=\"${(markerSize + 4) / 2}\" r=\"${markerSize / 2}\" fill=\"white\" stroke=\"#111\" stroke-width=\"3\"/>\n                <text x=\"${(markerSize + 4) / 2}\" y=\"${(markerSize + 4) / 2 + fontSize / 3}\" text-anchor=\"middle\" fill=\"#111\" font-family=\"Arial, sans-serif\" font-size=\"${fontSize}\" font-weight=\"bold\">${propertyCount}</text>\n              </svg>` : isHovered ? `<svg width=\"${markerSize + 2}\" height=\"${markerSize + 2}\" viewBox=\"0 0 ${markerSize + 2} ${markerSize + 2}\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n                  <circle cx=\"${(markerSize + 2) / 2}\" cy=\"${(markerSize + 2) / 2}\" r=\"${markerSize / 2}\" fill=\"white\" stroke=\"#111\" stroke-width=\"3\"/>\n                  <text x=\"${(markerSize + 2) / 2}\" y=\"${(markerSize + 2) / 2 + fontSize / 3}\" text-anchor=\"middle\" fill=\"#111\" font-family=\"Arial, sans-serif\" font-size=\"${fontSize}\" font-weight=\"bold\">${propertyCount}</text>\n                </svg>` : `<svg width=\"${markerSize}\" height=\"${markerSize}\" viewBox=\"0 0 ${markerSize} ${markerSize}\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n                  <circle cx=\"${markerSize / 2}\" cy=\"${markerSize / 2}\" r=\"${markerSize / 2 - 2}\" fill=\"${backgroundColor}\" stroke=\"${borderColor}\" stroke-width=\"3\"/>\n                  <text x=\"${markerSize / 2}\" y=\"${markerSize / 2 + fontSize / 3}\" text-anchor=\"middle\" fill=\"white\" font-family=\"Arial, sans-serif\" font-size=\"${fontSize}\" font-weight=\"bold\">${propertyCount}</text>\n                </svg>`),\n        scaledSize: isSelected ? new window.google.maps.Size(markerSize + 4, markerSize + 4) : isHovered ? new window.google.maps.Size(markerSize + 2, markerSize + 2) : new window.google.maps.Size(markerSize, markerSize),\n        anchor: isSelected ? new window.google.maps.Point((markerSize + 4) / 2, (markerSize + 4) / 2) : isHovered ? new window.google.maps.Point((markerSize + 2) / 2, (markerSize + 2) / 2) : new window.google.maps.Point(markerSize / 2, markerSize / 2)\n      }\n    });\n\n    // 클러스터 마커 hover 이벤트\n    marker.addListener('mouseover', () => {\n      setHoveredMarkerId(clusterId);\n    });\n    marker.addListener('mouseout', () => {\n      setHoveredMarkerId(null);\n    });\n    marker.addListener('click', () => {\n      console.log(`클러스터 클릭: ${propertyCount}개 매물`);\n      setHoveredMarkerId(null); // 클릭 시 hover 상태 해제\n\n      isClusterClicking.current = true;\n      if (propertyCount === 1) {\n        if (onMarkerClick) {\n          onMarkerClick(properties[0]);\n        }\n      } else {\n        if (onClusterClick) {\n          onClusterClick(properties);\n        }\n      }\n      setTimeout(() => {\n        isClusterClicking.current = false;\n      }, 1500);\n    });\n    return marker;\n  }, [onMarkerClick, onClusterClick, selectedClusterId, hoveredMarkerId]);\n\n  // 마커 클러스터링 로직\n  const clusterMarkers = (markers, zoom) => {\n    const clusters = [];\n\n    // 줌 레벨에 따른 클러스터 반경 설정 - 더 넓게 조정\n    let clusterRadius;\n    if (zoom < 8) {\n      clusterRadius = 0.15; // 매우 넓은 범위\n    } else if (zoom < 10) {\n      clusterRadius = 0.08; // 넓은 범위\n    } else if (zoom < 12) {\n      clusterRadius = 0.04; // 중간 범위\n    } else if (zoom < 14) {\n      clusterRadius = 0.02; // 좁은 범위\n    } else if (zoom < 16) {\n      clusterRadius = 0.01; // 매우 좁은 범위\n    } else if (zoom < 18) {\n      clusterRadius = 0.005; // 개별 마커 근처\n    } else {\n      clusterRadius = 0.002; // 거의 개별 마커\n    }\n    console.log(`줌 레벨 ${zoom}, 클러스터 반경: ${clusterRadius}`);\n    properties.forEach((property, index) => {\n      let addedToCluster = false;\n      for (const cluster of clusters) {\n        const distance = Math.sqrt(Math.pow(property.location.lat - cluster.center.lat, 2) + Math.pow(property.location.lng - cluster.center.lng, 2));\n        if (distance < clusterRadius) {\n          cluster.properties.push(property);\n          // 클러스터 중심점을 매물들의 평균 위치로 업데이트\n          cluster.center = {\n            lat: cluster.properties.reduce((sum, p) => sum + p.location.lat, 0) / cluster.properties.length,\n            lng: cluster.properties.reduce((sum, p) => sum + p.location.lng, 0) / cluster.properties.length\n          };\n          addedToCluster = true;\n          break;\n        }\n      }\n      if (!addedToCluster) {\n        clusters.push({\n          center: property.location,\n          properties: [property]\n        });\n      }\n    });\n    console.log(`총 ${properties.length}개 매물이 ${clusters.length}개 클러스터로 그룹화됨`);\n    return clusters;\n  };\n\n  // 지도 초기화\n  const initMap = useCallback(() => {\n    var _window$google;\n    console.log('지도 초기화 시도...');\n    console.log('mapRef.current:', mapRef.current);\n    console.log('window.google:', window.google);\n    console.log('window.google.maps:', (_window$google = window.google) === null || _window$google === void 0 ? void 0 : _window$google.maps);\n    if (!mapRef.current) {\n      console.log('mapRef가 없음');\n      return false;\n    }\n    if (!window.google) {\n      console.log('Google Maps API가 로드되지 않음');\n      return false;\n    }\n    if (!window.google.maps) {\n      console.log('Google Maps 객체가 없음');\n      return false;\n    }\n    if (mapInstance.current) {\n      console.log('기존 지도 인스턴스 업데이트');\n      updateMarkers();\n      return true;\n    }\n    try {\n      console.log('새 지도 인스턴스 생성 시작...');\n      markersRef.current.forEach(marker => {\n        if (marker && marker.setMap) {\n          marker.setMap(null);\n        }\n      });\n      markersRef.current = [];\n      const map = new window.google.maps.Map(mapRef.current, {\n        center: {\n          lat: 37.5665,\n          lng: 126.9780\n        },\n        zoom: 10,\n        mapTypeId: window.google.maps.MapTypeId.ROADMAP,\n        zoomControl: false,\n        // 확대/축소 버튼 제거\n        mapTypeControl: false,\n        scaleControl: false,\n        streetViewControl: false,\n        rotateControl: false,\n        fullscreenControl: false,\n        gestureHandling: 'greedy',\n        backgroundColor: '#f0f0f0',\n        disableDefaultUI: true,\n        // 모든 기본 UI 비활성화\n        clickableIcons: false,\n        // POI 클릭 비활성화\n        maxZoom: 20,\n        minZoom: 8,\n        tilt: 0,\n        disableDoubleClickZoom: false,\n        restriction: {\n          latLngBounds: {\n            north: 38.0,\n            south: 34.5,\n            east: 131.0,\n            west: 125.0\n          },\n          strictBounds: false\n        },\n        styles: [{\n          featureType: 'poi',\n          elementType: 'labels',\n          stylers: [{\n            visibility: 'off'\n          }]\n        }, {\n          featureType: 'transit',\n          elementType: 'labels',\n          stylers: [{\n            visibility: 'off'\n          }]\n        }, {\n          featureType: 'landscape',\n          elementType: 'labels',\n          stylers: [{\n            visibility: 'off'\n          }]\n        }]\n      });\n      console.log('지도 인스턴스 생성 완료:', map);\n      mapInstance.current = map;\n\n      // 지도가 완전히 로드된 후 마커 생성\n      map.addListener('idle', () => {\n        console.log('지도 로드 완료, 마커 생성 시작');\n        createMarkers();\n      });\n      map.addListener('zoom_changed', () => {\n        if (isClusterClicking.current) {\n          return;\n        }\n        markersRef.current.forEach(marker => {\n          if (marker && marker.setMap) {\n            marker.setMap(null);\n          }\n        });\n        markersRef.current = [];\n        setTimeout(() => {\n          if (!isClusterClicking.current) {\n            createMarkers();\n          }\n        }, 300);\n      });\n      console.log('지도 초기화 완료');\n      setIsMapLoaded(true);\n      setMapError(null);\n      return true;\n    } catch (error) {\n      console.error('지도 초기화 오류:', error);\n      setMapError('지도를 로드할 수 없습니다. Google Maps API를 확인해주세요.');\n      setIsMapLoaded(false);\n      return false;\n    }\n  }, []);\n  const createMarkers = () => {\n    if (!mapInstance.current) {\n      console.log('mapInstance가 없어서 마커 생성 불가');\n      return;\n    }\n    console.log('마커 생성 시작, properties 개수:', properties.length);\n    const currentZoom = mapInstance.current.getZoom() || 15;\n    console.log('현재 줌 레벨:', currentZoom);\n    if (currentZoom >= 18) {\n      console.log('개별 마커 생성 모드');\n      properties.forEach((property, index) => {\n        console.log(`마커 ${index + 1} 생성:`, property.title, property.location);\n        const isSelected = selectedMarkerId === property.id;\n        const isHovered = hoveredMarkerId === property.id;\n        const marker = new window.google.maps.Marker({\n          position: property.location,\n          map: mapInstance.current,\n          title: property.title,\n          icon: {\n            url: 'data:image/svg+xml;charset=UTF-8,' + encodeURIComponent(isSelected ? `<svg width=\"44\" height=\"44\" viewBox=\"0 0 44 44\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\"><circle cx=\"22\" cy=\"22\" r=\"20\" fill=\"white\" stroke=\"#111\" stroke-width=\"3\"/><text x=\"22\" y=\"29\" text-anchor=\"middle\" fill=\"#111\" font-family=\"Arial, sans-serif\" font-size=\"16\" font-weight=\"bold\">1</text></svg>` : isHovered ? `<svg width=\"34\" height=\"34\" viewBox=\"0 0 34 34\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\"><circle cx=\"17\" cy=\"17\" r=\"15\" fill=\"white\" stroke=\"#111\" stroke-width=\"3\"/><text x=\"17\" y=\"22\" text-anchor=\"middle\" fill=\"#111\" font-family=\"Arial, sans-serif\" font-size=\"12\" font-weight=\"bold\">1</text></svg>` : `<svg width=\"30\" height=\"30\" viewBox=\"0 0 30 30\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\"><circle cx=\"15\" cy=\"15\" r=\"13\" fill=\"#2563eb\" stroke=\"#1e40af\" stroke-width=\"2\"/><text x=\"15\" y=\"19\" text-anchor=\"middle\" fill=\"white\" font-family=\"Arial, sans-serif\" font-size=\"10\" font-weight=\"bold\">1</text></svg>`),\n            scaledSize: isSelected ? new window.google.maps.Size(44, 44) : isHovered ? new window.google.maps.Size(34, 34) : new window.google.maps.Size(30, 30),\n            anchor: isSelected ? new window.google.maps.Point(22, 22) : isHovered ? new window.google.maps.Point(17, 17) : new window.google.maps.Point(15, 15)\n          }\n        });\n\n        // 마커 hover 이벤트\n        marker.addListener('mouseover', () => {\n          setHoveredMarkerId(property.id);\n        });\n        marker.addListener('mouseout', () => {\n          setHoveredMarkerId(null);\n        });\n        if (onMarkerClick) {\n          marker.addListener('click', () => {\n            console.log(`개별 마커 클릭됨: ${property.id} - ${property.title}`);\n            setHoveredMarkerId(null); // 클릭 시 hover 상태 해제\n            isClusterClicking.current = true;\n            if (setSelectedMarkerId) setSelectedMarkerId(property.id);\n            if (setSelectedClusterId) setSelectedClusterId('');\n            onMarkerClick(property);\n            setTimeout(() => {\n              isClusterClicking.current = false;\n            }, 1500);\n          });\n        }\n        markersRef.current.push(marker);\n      });\n      console.log('개별 마커 생성 완료, 총 마커 개수:', markersRef.current.length);\n    } else {\n      console.log('클러스터 모드');\n      const clusters = clusterMarkers([], currentZoom);\n      console.log('생성된 클러스터 개수:', clusters.length);\n      clusters.forEach((cluster, clusterIndex) => {\n        console.log(`클러스터 ${clusterIndex + 1}: ${cluster.properties.length}개 매물`);\n        if (cluster.properties.length === 1) {\n          const property = cluster.properties[0];\n          const isSelected = selectedMarkerId === property.id;\n          const isHovered = hoveredMarkerId === property.id;\n          const marker = new window.google.maps.Marker({\n            position: property.location,\n            map: mapInstance.current,\n            title: property.title,\n            icon: {\n              url: 'data:image/svg+xml;charset=UTF-8,' + encodeURIComponent(isSelected ? `<svg width=\"44\" height=\"44\" viewBox=\"0 0 44 44\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\"><circle cx=\"22\" cy=\"22\" r=\"20\" fill=\"white\" stroke=\"#111\" stroke-width=\"3\"/><text x=\"22\" y=\"29\" text-anchor=\"middle\" fill=\"#111\" font-family=\"Arial, sans-serif\" font-size=\"16\" font-weight=\"bold\">1</text></svg>` : isHovered ? `<svg width=\"34\" height=\"34\" viewBox=\"0 0 34 34\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\"><circle cx=\"17\" cy=\"17\" r=\"15\" fill=\"white\" stroke=\"#111\" stroke-width=\"3\"/><text x=\"17\" y=\"22\" text-anchor=\"middle\" fill=\"#111\" font-family=\"Arial, sans-serif\" font-size=\"12\" font-weight=\"bold\">1</text></svg>` : `<svg width=\"30\" height=\"30\" viewBox=\"0 0 30 30\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\"><circle cx=\"15\" cy=\"15\" r=\"13\" fill=\"#2563eb\" stroke=\"#1e40af\" stroke-width=\"2\"/><text x=\"15\" y=\"19\" text-anchor=\"middle\" fill=\"white\" font-family=\"Arial, sans-serif\" font-size=\"10\" font-weight=\"bold\">1</text></svg>`),\n              scaledSize: isSelected ? new window.google.maps.Size(44, 44) : isHovered ? new window.google.maps.Size(34, 34) : new window.google.maps.Size(30, 30),\n              anchor: isSelected ? new window.google.maps.Point(22, 22) : isHovered ? new window.google.maps.Point(17, 17) : new window.google.maps.Point(15, 15)\n            }\n          });\n\n          // 마커 hover 이벤트\n          marker.addListener('mouseover', () => {\n            setHoveredMarkerId(property.id);\n          });\n          marker.addListener('mouseout', () => {\n            setHoveredMarkerId(null);\n          });\n          if (onMarkerClick) {\n            marker.addListener('click', () => {\n              console.log(`클러스터링된 단일 마커 클릭됨: ${property.id} - ${property.title}`);\n              setHoveredMarkerId(null); // 클릭 시 hover 상태 해제\n              isClusterClicking.current = true;\n              if (setSelectedMarkerId) setSelectedMarkerId(property.id);\n              if (setSelectedClusterId) setSelectedClusterId('');\n              onMarkerClick(property);\n              setTimeout(() => {\n                isClusterClicking.current = false;\n              }, 1500);\n            });\n          }\n          markersRef.current.push(marker);\n        } else {\n          const clusterMarker = createClusterMarker(cluster.properties, cluster.center);\n          markersRef.current.push(clusterMarker);\n        }\n      });\n      console.log('클러스터 마커 생성 완료, 총 마커 개수:', markersRef.current.length);\n    }\n  };\n  const updateMarkers = () => {\n    if (!mapInstance.current) return;\n    markersRef.current.forEach(marker => {\n      if (marker && marker.setMap) {\n        marker.setMap(null);\n      }\n    });\n    markersRef.current = [];\n    createMarkers();\n  };\n  const checkAndInit = useCallback(() => {\n    console.log('Google Maps API 확인 중...');\n    if (window.google && window.google.maps) {\n      console.log('Google Maps API 로드됨, 지도 초기화 시도');\n      if (initMap()) {\n        console.log('지도 초기화 성공');\n        return;\n      }\n    } else {\n      console.log('Google Maps API 아직 로드되지 않음, 재시도...');\n    }\n    setTimeout(checkAndInit, 100);\n  }, [initMap]);\n  useEffect(() => {\n    checkAndInit();\n    return () => {\n      markersRef.current.forEach(marker => {\n        if (marker && marker.setMap) {\n          marker.setMap(null);\n        }\n      });\n      markersRef.current = [];\n    };\n  }, [checkAndInit]);\n\n  // properties가 변경될 때 마커 업데이트\n  useEffect(() => {\n    if (mapInstance.current && isMapLoaded) {\n      updateMarkers();\n    }\n  }, [properties, selectedMarkerId, selectedClusterId, hoveredMarkerId, isMapLoaded]);\n  return /*#__PURE__*/_jsxDEV(MapContainer, {\n    children: !isMapLoaded && mapError ? /*#__PURE__*/_jsxDEV(FallbackMap, {\n      children: /*#__PURE__*/_jsxDEV(MapError, {\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          style: {\n            marginBottom: '1rem',\n            fontSize: '1.5rem'\n          },\n          children: \"\\uD83D\\uDDFA\\uFE0F\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 542,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          style: {\n            marginBottom: '0.5rem',\n            fontWeight: 'bold'\n          },\n          children: \"\\uC9C0\\uB3C4 \\uB85C\\uB4DC \\uC2E4\\uD328\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 543,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          style: {\n            fontSize: '0.9rem',\n            color: '#6b7280'\n          },\n          children: mapError\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 544,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => {\n            setMapError(null);\n            setIsMapLoaded(false);\n            checkAndInit();\n          },\n          style: {\n            marginTop: '1rem',\n            padding: '0.5rem 1rem',\n            background: '#2563eb',\n            color: 'white',\n            border: 'none',\n            borderRadius: '4px',\n            cursor: 'pointer'\n          },\n          children: \"\\uB2E4\\uC2DC \\uC2DC\\uB3C4\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 545,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 541,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 540,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n      ref: mapRef,\n      style: {\n        width: '100%',\n        height: '100%'\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 566,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 538,\n    columnNumber: 5\n  }, this);\n};\n_s(GoogleMap, \"L+clWcvXj42aKwW6vH37vBRiWyQ=\");\n_c4 = GoogleMap;\nexport default GoogleMap;\nvar _c, _c2, _c3, _c4;\n$RefreshReg$(_c, \"MapContainer\");\n$RefreshReg$(_c2, \"FallbackMap\");\n$RefreshReg$(_c3, \"MapError\");\n$RefreshReg$(_c4, \"GoogleMap\");","map":{"version":3,"names":["React","useEffect","useRef","useState","useCallback","styled","jsxDEV","_jsxDEV","MapContainer","div","_c","FallbackMap","_c2","MapError","_c3","GoogleMap","properties","onMarkerClick","onClusterClick","selectedMarkerId","setSelectedMarkerId","selectedClusterId","setSelectedClusterId","_s","mapRef","mapInstance","markersRef","isClusterClicking","isMapLoaded","setIsMapLoaded","mapError","setMapError","hoveredMarkerId","setHoveredMarkerId","createClusterMarker","center","clusterId","map","p","id","join","isSelected","isHovered","propertyCount","length","markerSize","fontSize","backgroundColor","borderColor","marker","window","google","maps","Marker","position","current","icon","url","encodeURIComponent","scaledSize","Size","anchor","Point","addListener","console","log","setTimeout","clusterMarkers","markers","zoom","clusters","clusterRadius","forEach","property","index","addedToCluster","cluster","distance","Math","sqrt","pow","location","lat","lng","push","reduce","sum","initMap","_window$google","updateMarkers","setMap","Map","mapTypeId","MapTypeId","ROADMAP","zoomControl","mapTypeControl","scaleControl","streetViewControl","rotateControl","fullscreenControl","gestureHandling","disableDefaultUI","clickableIcons","maxZoom","minZoom","tilt","disableDoubleClickZoom","restriction","latLngBounds","north","south","east","west","strictBounds","styles","featureType","elementType","stylers","visibility","createMarkers","error","currentZoom","getZoom","title","clusterIndex","clusterMarker","checkAndInit","children","style","marginBottom","fileName","_jsxFileName","lineNumber","columnNumber","fontWeight","color","onClick","marginTop","padding","background","border","borderRadius","cursor","ref","width","height","_c4","$RefreshReg$"],"sources":["C:/Users/user/지도기반사이트만들기/src/components/GoogleMap.tsx"],"sourcesContent":["import React, { useEffect, useRef, useState, useCallback } from 'react';\r\nimport styled from 'styled-components';\r\nimport { Property } from '../types';\r\n\r\nconst MapContainer = styled.div`\r\n  width: 100%;\r\n  height: calc(100vh - 120px);\r\n  min-height: 600px;\r\n  position: relative;\r\n  overflow: visible;\r\n  background: #f0f0f0;\r\n`;\r\n\r\nconst FallbackMap = styled.div`\r\n  width: 100%;\r\n  height: 100%;\r\n  background: linear-gradient(45deg, #e5e7eb 25%, transparent 25%), \r\n              linear-gradient(-45deg, #e5e7eb 25%, transparent 25%), \r\n              linear-gradient(45deg, transparent 75%, #e5e7eb 75%), \r\n              linear-gradient(-45deg, transparent 75%, #e5e7eb 75%);\r\n  background-size: 20px 20px;\r\n  background-position: 0 0, 0 10px, 10px -10px, -10px 0px;\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n  color: #6b7280;\r\n  font-size: 1.2rem;\r\n  font-weight: 500;\r\n`;\r\n\r\nconst MapError = styled.div`\r\n  text-align: center;\r\n  padding: 2rem;\r\n  background: white;\r\n  border-radius: 8px;\r\n  box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);\r\n  max-width: 400px;\r\n`;\r\n\r\ninterface GoogleMapProps {\r\n  properties: Property[];\r\n  onMarkerClick?: (property: Property) => void;\r\n  onClusterClick?: (properties: Property[]) => void;\r\n  selectedMarkerId?: string | null;\r\n  setSelectedMarkerId?: (id: string) => void;\r\n  selectedClusterId?: string | null;\r\n  setSelectedClusterId?: (id: string) => void;\r\n}\r\n\r\ndeclare global {\r\n  interface Window {\r\n    google: any;\r\n  }\r\n}\r\n\r\nconst GoogleMap: React.FC<GoogleMapProps> = ({\r\n  properties,\r\n  onMarkerClick,\r\n  onClusterClick,\r\n  selectedMarkerId,\r\n  setSelectedMarkerId,\r\n  selectedClusterId,\r\n  setSelectedClusterId\r\n}) => {\r\n  const mapRef = useRef<HTMLDivElement>(null);\r\n  const mapInstance = useRef<google.maps.Map | null>(null);\r\n  const markersRef = useRef<google.maps.Marker[]>([]);\r\n  const isClusterClicking = useRef(false);\r\n  const [isMapLoaded, setIsMapLoaded] = useState(false);\r\n  const [mapError, setMapError] = useState<string | null>(null);\r\n  const [hoveredMarkerId, setHoveredMarkerId] = useState<string | null>(null);\r\n\r\n  // 마커 클러스터링 함수\r\n  const createClusterMarker = useCallback((properties: Property[], center: { lat: number; lng: number }) => {\r\n    const clusterId = properties.map(p => p.id).join(',');\r\n    const isSelected = selectedClusterId === clusterId;\r\n    const isHovered = hoveredMarkerId === clusterId;\r\n    const propertyCount = properties.length;\r\n    \r\n    // 매물 개수에 따른 클러스터 마커 크기와 색상 결정\r\n    let markerSize = 40;\r\n    let fontSize = 14;\r\n    let backgroundColor = '#2563eb';\r\n    let borderColor = '#1e40af';\r\n    \r\n    if (propertyCount >= 10) {\r\n      markerSize = 50;\r\n      fontSize = 16;\r\n      backgroundColor = '#dc2626'; // 빨간색\r\n      borderColor = '#b91c1c';\r\n    } else if (propertyCount >= 5) {\r\n      markerSize = 45;\r\n      fontSize = 15;\r\n      backgroundColor = '#f59e0b'; // 주황색\r\n      borderColor = '#d97706';\r\n    } else if (propertyCount >= 3) {\r\n      markerSize = 42;\r\n      fontSize = 14;\r\n      backgroundColor = '#10b981'; // 초록색\r\n      borderColor = '#059669';\r\n    }\r\n    \r\n    const marker = new window.google.maps.Marker({\r\n      position: center,\r\n      map: mapInstance.current,\r\n      icon: {\r\n        url: 'data:image/svg+xml;charset=UTF-8,' + encodeURIComponent(\r\n          isSelected\r\n            ? `<svg width=\"${markerSize + 4}\" height=\"${markerSize + 4}\" viewBox=\"0 0 ${markerSize + 4} ${markerSize + 4}\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\r\n                <circle cx=\"${(markerSize + 4) / 2}\" cy=\"${(markerSize + 4) / 2}\" r=\"${markerSize / 2}\" fill=\"white\" stroke=\"#111\" stroke-width=\"3\"/>\r\n                <text x=\"${(markerSize + 4) / 2}\" y=\"${(markerSize + 4) / 2 + fontSize / 3}\" text-anchor=\"middle\" fill=\"#111\" font-family=\"Arial, sans-serif\" font-size=\"${fontSize}\" font-weight=\"bold\">${propertyCount}</text>\r\n              </svg>`\r\n            : isHovered\r\n              ? `<svg width=\"${markerSize + 2}\" height=\"${markerSize + 2}\" viewBox=\"0 0 ${markerSize + 2} ${markerSize + 2}\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\r\n                  <circle cx=\"${(markerSize + 2) / 2}\" cy=\"${(markerSize + 2) / 2}\" r=\"${markerSize / 2}\" fill=\"white\" stroke=\"#111\" stroke-width=\"3\"/>\r\n                  <text x=\"${(markerSize + 2) / 2}\" y=\"${(markerSize + 2) / 2 + fontSize / 3}\" text-anchor=\"middle\" fill=\"#111\" font-family=\"Arial, sans-serif\" font-size=\"${fontSize}\" font-weight=\"bold\">${propertyCount}</text>\r\n                </svg>`\r\n              : `<svg width=\"${markerSize}\" height=\"${markerSize}\" viewBox=\"0 0 ${markerSize} ${markerSize}\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\r\n                  <circle cx=\"${markerSize / 2}\" cy=\"${markerSize / 2}\" r=\"${markerSize / 2 - 2}\" fill=\"${backgroundColor}\" stroke=\"${borderColor}\" stroke-width=\"3\"/>\r\n                  <text x=\"${markerSize / 2}\" y=\"${markerSize / 2 + fontSize / 3}\" text-anchor=\"middle\" fill=\"white\" font-family=\"Arial, sans-serif\" font-size=\"${fontSize}\" font-weight=\"bold\">${propertyCount}</text>\r\n                </svg>`\r\n        ),\r\n        scaledSize: isSelected\r\n          ? new window.google.maps.Size(markerSize + 4, markerSize + 4)\r\n          : isHovered\r\n            ? new window.google.maps.Size(markerSize + 2, markerSize + 2)\r\n            : new window.google.maps.Size(markerSize, markerSize),\r\n        anchor: isSelected\r\n          ? new window.google.maps.Point((markerSize + 4) / 2, (markerSize + 4) / 2)\r\n          : isHovered\r\n            ? new window.google.maps.Point((markerSize + 2) / 2, (markerSize + 2) / 2)\r\n            : new window.google.maps.Point(markerSize / 2, markerSize / 2)\r\n      }\r\n    });\r\n\r\n    // 클러스터 마커 hover 이벤트\r\n    marker.addListener('mouseover', () => {\r\n      setHoveredMarkerId(clusterId);\r\n    });\r\n\r\n    marker.addListener('mouseout', () => {\r\n      setHoveredMarkerId(null);\r\n    });\r\n\r\n    marker.addListener('click', () => {\r\n      console.log(`클러스터 클릭: ${propertyCount}개 매물`);\r\n      setHoveredMarkerId(null); // 클릭 시 hover 상태 해제\r\n      \r\n      isClusterClicking.current = true;\r\n      \r\n      if (propertyCount === 1) {\r\n        if (onMarkerClick) {\r\n          onMarkerClick(properties[0]);\r\n        }\r\n      } else {\r\n        if (onClusterClick) {\r\n          onClusterClick(properties);\r\n        }\r\n      }\r\n      \r\n      setTimeout(() => {\r\n        isClusterClicking.current = false;\r\n      }, 1500);\r\n    });\r\n\r\n    return marker;\r\n  }, [onMarkerClick, onClusterClick, selectedClusterId, hoveredMarkerId]);\r\n\r\n  // 마커 클러스터링 로직\r\n  const clusterMarkers = (markers: any[], zoom: number) => {\r\n    const clusters: { center: { lat: number; lng: number }; properties: Property[] }[] = [];\r\n    \r\n    // 줌 레벨에 따른 클러스터 반경 설정 - 더 넓게 조정\r\n    let clusterRadius: number;\r\n    if (zoom < 8) {\r\n      clusterRadius = 0.15; // 매우 넓은 범위\r\n    } else if (zoom < 10) {\r\n      clusterRadius = 0.08; // 넓은 범위\r\n    } else if (zoom < 12) {\r\n      clusterRadius = 0.04; // 중간 범위\r\n    } else if (zoom < 14) {\r\n      clusterRadius = 0.02; // 좁은 범위\r\n    } else if (zoom < 16) {\r\n      clusterRadius = 0.01; // 매우 좁은 범위\r\n    } else if (zoom < 18) {\r\n      clusterRadius = 0.005; // 개별 마커 근처\r\n    } else {\r\n      clusterRadius = 0.002; // 거의 개별 마커\r\n    }\r\n\r\n    console.log(`줌 레벨 ${zoom}, 클러스터 반경: ${clusterRadius}`);\r\n\r\n    properties.forEach((property, index) => {\r\n      let addedToCluster = false;\r\n      \r\n      for (const cluster of clusters) {\r\n        const distance = Math.sqrt(\r\n          Math.pow(property.location.lat - cluster.center.lat, 2) +\r\n          Math.pow(property.location.lng - cluster.center.lng, 2)\r\n        );\r\n        \r\n        if (distance < clusterRadius) {\r\n          cluster.properties.push(property);\r\n          // 클러스터 중심점을 매물들의 평균 위치로 업데이트\r\n          cluster.center = {\r\n            lat: cluster.properties.reduce((sum, p) => sum + p.location.lat, 0) / cluster.properties.length,\r\n            lng: cluster.properties.reduce((sum, p) => sum + p.location.lng, 0) / cluster.properties.length\r\n          };\r\n          addedToCluster = true;\r\n          break;\r\n        }\r\n      }\r\n      \r\n      if (!addedToCluster) {\r\n        clusters.push({\r\n          center: property.location,\r\n          properties: [property]\r\n        });\r\n      }\r\n    });\r\n\r\n    console.log(`총 ${properties.length}개 매물이 ${clusters.length}개 클러스터로 그룹화됨`);\r\n    return clusters;\r\n  };\r\n\r\n  // 지도 초기화\r\n  const initMap = useCallback(() => {\r\n    console.log('지도 초기화 시도...');\r\n    console.log('mapRef.current:', mapRef.current);\r\n    console.log('window.google:', window.google);\r\n    console.log('window.google.maps:', window.google?.maps);\r\n    \r\n    if (!mapRef.current) {\r\n      console.log('mapRef가 없음');\r\n      return false;\r\n    }\r\n    \r\n    if (!window.google) {\r\n      console.log('Google Maps API가 로드되지 않음');\r\n      return false;\r\n    }\r\n    \r\n    if (!window.google.maps) {\r\n      console.log('Google Maps 객체가 없음');\r\n      return false;\r\n    }\r\n\r\n    if (mapInstance.current) {\r\n      console.log('기존 지도 인스턴스 업데이트');\r\n      updateMarkers();\r\n      return true;\r\n    }\r\n\r\n    try {\r\n      console.log('새 지도 인스턴스 생성 시작...');\r\n      markersRef.current.forEach(marker => {\r\n        if (marker && marker.setMap) {\r\n          marker.setMap(null);\r\n        }\r\n      });\r\n      markersRef.current = [];\r\n\r\n      const map = new window.google.maps.Map(mapRef.current, {\r\n        center: { lat: 37.5665, lng: 126.9780 },\r\n        zoom: 10,\r\n        mapTypeId: window.google.maps.MapTypeId.ROADMAP,\r\n        zoomControl: false, // 확대/축소 버튼 제거\r\n        mapTypeControl: false,\r\n        scaleControl: false,\r\n        streetViewControl: false,\r\n        rotateControl: false,\r\n        fullscreenControl: false,\r\n        gestureHandling: 'greedy',\r\n        backgroundColor: '#f0f0f0',\r\n        disableDefaultUI: true, // 모든 기본 UI 비활성화\r\n        clickableIcons: false, // POI 클릭 비활성화\r\n        maxZoom: 20,\r\n        minZoom: 8,\r\n        tilt: 0,\r\n        disableDoubleClickZoom: false,\r\n        restriction: {\r\n          latLngBounds: {\r\n            north: 38.0,\r\n            south: 34.5,\r\n            east: 131.0,\r\n            west: 125.0\r\n          },\r\n          strictBounds: false\r\n        },\r\n        styles: [\r\n          {\r\n            featureType: 'poi',\r\n            elementType: 'labels',\r\n            stylers: [{ visibility: 'off' }]\r\n          },\r\n          {\r\n            featureType: 'transit',\r\n            elementType: 'labels',\r\n            stylers: [{ visibility: 'off' }]\r\n          },\r\n          {\r\n            featureType: 'landscape',\r\n            elementType: 'labels',\r\n            stylers: [{ visibility: 'off' }]\r\n          }\r\n        ]\r\n      });\r\n\r\n      console.log('지도 인스턴스 생성 완료:', map);\r\n      mapInstance.current = map;\r\n      \r\n      // 지도가 완전히 로드된 후 마커 생성\r\n      map.addListener('idle', () => {\r\n        console.log('지도 로드 완료, 마커 생성 시작');\r\n        createMarkers();\r\n      });\r\n\r\n      map.addListener('zoom_changed', () => {\r\n        if (isClusterClicking.current) {\r\n          return;\r\n        }\r\n        \r\n        markersRef.current.forEach(marker => {\r\n          if (marker && marker.setMap) {\r\n            marker.setMap(null);\r\n          }\r\n        });\r\n        markersRef.current = [];\r\n\r\n        setTimeout(() => {\r\n          if (!isClusterClicking.current) {\r\n            createMarkers();\r\n          }\r\n        }, 300);\r\n      });\r\n\r\n      console.log('지도 초기화 완료');\r\n      setIsMapLoaded(true);\r\n      setMapError(null);\r\n      return true;\r\n    } catch (error) {\r\n      console.error('지도 초기화 오류:', error);\r\n      setMapError('지도를 로드할 수 없습니다. Google Maps API를 확인해주세요.');\r\n      setIsMapLoaded(false);\r\n      return false;\r\n    }\r\n  }, []);\r\n\r\n  const createMarkers = () => {\r\n    if (!mapInstance.current) {\r\n      console.log('mapInstance가 없어서 마커 생성 불가');\r\n      return;\r\n    }\r\n    \r\n    console.log('마커 생성 시작, properties 개수:', properties.length);\r\n    const currentZoom = mapInstance.current.getZoom() || 15;\r\n    console.log('현재 줌 레벨:', currentZoom);\r\n    \r\n    if (currentZoom >= 18) {\r\n      console.log('개별 마커 생성 모드');\r\n      properties.forEach((property, index) => {\r\n        console.log(`마커 ${index + 1} 생성:`, property.title, property.location);\r\n        const isSelected = selectedMarkerId === property.id;\r\n        const isHovered = hoveredMarkerId === property.id;\r\n        const marker = new window.google.maps.Marker({\r\n          position: property.location,\r\n          map: mapInstance.current,\r\n          title: property.title,\r\n          icon: {\r\n            url: 'data:image/svg+xml;charset=UTF-8,' + encodeURIComponent(\r\n              isSelected\r\n                ? `<svg width=\"44\" height=\"44\" viewBox=\"0 0 44 44\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\"><circle cx=\"22\" cy=\"22\" r=\"20\" fill=\"white\" stroke=\"#111\" stroke-width=\"3\"/><text x=\"22\" y=\"29\" text-anchor=\"middle\" fill=\"#111\" font-family=\"Arial, sans-serif\" font-size=\"16\" font-weight=\"bold\">1</text></svg>`\r\n                : isHovered\r\n                  ? `<svg width=\"34\" height=\"34\" viewBox=\"0 0 34 34\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\"><circle cx=\"17\" cy=\"17\" r=\"15\" fill=\"white\" stroke=\"#111\" stroke-width=\"3\"/><text x=\"17\" y=\"22\" text-anchor=\"middle\" fill=\"#111\" font-family=\"Arial, sans-serif\" font-size=\"12\" font-weight=\"bold\">1</text></svg>`\r\n                  : `<svg width=\"30\" height=\"30\" viewBox=\"0 0 30 30\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\"><circle cx=\"15\" cy=\"15\" r=\"13\" fill=\"#2563eb\" stroke=\"#1e40af\" stroke-width=\"2\"/><text x=\"15\" y=\"19\" text-anchor=\"middle\" fill=\"white\" font-family=\"Arial, sans-serif\" font-size=\"10\" font-weight=\"bold\">1</text></svg>`\r\n            ),\r\n            scaledSize: isSelected\r\n              ? new window.google.maps.Size(44, 44)\r\n              : isHovered\r\n                ? new window.google.maps.Size(34, 34)\r\n                : new window.google.maps.Size(30, 30),\r\n            anchor: isSelected\r\n              ? new window.google.maps.Point(22, 22)\r\n              : isHovered\r\n                ? new window.google.maps.Point(17, 17)\r\n                : new window.google.maps.Point(15, 15)\r\n          }\r\n        });\r\n\r\n        // 마커 hover 이벤트\r\n        marker.addListener('mouseover', () => {\r\n          setHoveredMarkerId(property.id);\r\n        });\r\n\r\n        marker.addListener('mouseout', () => {\r\n          setHoveredMarkerId(null);\r\n        });\r\n\r\n        if (onMarkerClick) {\r\n          marker.addListener('click', () => {\r\n            console.log(`개별 마커 클릭됨: ${property.id} - ${property.title}`);\r\n            setHoveredMarkerId(null); // 클릭 시 hover 상태 해제\r\n            isClusterClicking.current = true;\r\n            \r\n            if (setSelectedMarkerId) setSelectedMarkerId(property.id);\r\n            if (setSelectedClusterId) setSelectedClusterId('');\r\n            onMarkerClick(property);\r\n            \r\n            setTimeout(() => {\r\n              isClusterClicking.current = false;\r\n            }, 1500);\r\n          });\r\n        }\r\n\r\n        markersRef.current.push(marker);\r\n      });\r\n      console.log('개별 마커 생성 완료, 총 마커 개수:', markersRef.current.length);\r\n    } else {\r\n      console.log('클러스터 모드');\r\n      const clusters = clusterMarkers([], currentZoom);\r\n      console.log('생성된 클러스터 개수:', clusters.length);\r\n\r\n      clusters.forEach((cluster, clusterIndex) => {\r\n        console.log(`클러스터 ${clusterIndex + 1}: ${cluster.properties.length}개 매물`);\r\n        if (cluster.properties.length === 1) {\r\n          const property = cluster.properties[0];\r\n          const isSelected = selectedMarkerId === property.id;\r\n          const isHovered = hoveredMarkerId === property.id;\r\n          const marker = new window.google.maps.Marker({\r\n            position: property.location,\r\n            map: mapInstance.current,\r\n            title: property.title,\r\n            icon: {\r\n              url: 'data:image/svg+xml;charset=UTF-8,' + encodeURIComponent(\r\n                isSelected\r\n                  ? `<svg width=\"44\" height=\"44\" viewBox=\"0 0 44 44\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\"><circle cx=\"22\" cy=\"22\" r=\"20\" fill=\"white\" stroke=\"#111\" stroke-width=\"3\"/><text x=\"22\" y=\"29\" text-anchor=\"middle\" fill=\"#111\" font-family=\"Arial, sans-serif\" font-size=\"16\" font-weight=\"bold\">1</text></svg>`\r\n                  : isHovered\r\n                    ? `<svg width=\"34\" height=\"34\" viewBox=\"0 0 34 34\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\"><circle cx=\"17\" cy=\"17\" r=\"15\" fill=\"white\" stroke=\"#111\" stroke-width=\"3\"/><text x=\"17\" y=\"22\" text-anchor=\"middle\" fill=\"#111\" font-family=\"Arial, sans-serif\" font-size=\"12\" font-weight=\"bold\">1</text></svg>`\r\n                    : `<svg width=\"30\" height=\"30\" viewBox=\"0 0 30 30\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\"><circle cx=\"15\" cy=\"15\" r=\"13\" fill=\"#2563eb\" stroke=\"#1e40af\" stroke-width=\"2\"/><text x=\"15\" y=\"19\" text-anchor=\"middle\" fill=\"white\" font-family=\"Arial, sans-serif\" font-size=\"10\" font-weight=\"bold\">1</text></svg>`\r\n              ),\r\n              scaledSize: isSelected\r\n                ? new window.google.maps.Size(44, 44)\r\n                : isHovered\r\n                  ? new window.google.maps.Size(34, 34)\r\n                  : new window.google.maps.Size(30, 30),\r\n              anchor: isSelected\r\n                ? new window.google.maps.Point(22, 22)\r\n                : isHovered\r\n                  ? new window.google.maps.Point(17, 17)\r\n                  : new window.google.maps.Point(15, 15)\r\n            }\r\n          });\r\n\r\n          // 마커 hover 이벤트\r\n          marker.addListener('mouseover', () => {\r\n            setHoveredMarkerId(property.id);\r\n          });\r\n\r\n          marker.addListener('mouseout', () => {\r\n            setHoveredMarkerId(null);\r\n          });\r\n\r\n          if (onMarkerClick) {\r\n            marker.addListener('click', () => {\r\n              console.log(`클러스터링된 단일 마커 클릭됨: ${property.id} - ${property.title}`);\r\n              setHoveredMarkerId(null); // 클릭 시 hover 상태 해제\r\n              isClusterClicking.current = true;\r\n              \r\n              if (setSelectedMarkerId) setSelectedMarkerId(property.id);\r\n              if (setSelectedClusterId) setSelectedClusterId('');\r\n              onMarkerClick(property);\r\n              \r\n              setTimeout(() => {\r\n                isClusterClicking.current = false;\r\n              }, 1500);\r\n            });\r\n          }\r\n\r\n          markersRef.current.push(marker);\r\n        } else {\r\n          const clusterMarker = createClusterMarker(cluster.properties, cluster.center);\r\n          markersRef.current.push(clusterMarker);\r\n        }\r\n      });\r\n      console.log('클러스터 마커 생성 완료, 총 마커 개수:', markersRef.current.length);\r\n    }\r\n  };\r\n\r\n  const updateMarkers = () => {\r\n    if (!mapInstance.current) return;\r\n    \r\n    markersRef.current.forEach(marker => {\r\n      if (marker && marker.setMap) {\r\n        marker.setMap(null);\r\n      }\r\n    });\r\n    markersRef.current = [];\r\n\r\n    createMarkers();\r\n  };\r\n\r\n  const checkAndInit = useCallback(() => {\r\n    console.log('Google Maps API 확인 중...');\r\n    if (window.google && window.google.maps) {\r\n      console.log('Google Maps API 로드됨, 지도 초기화 시도');\r\n      if (initMap()) {\r\n        console.log('지도 초기화 성공');\r\n        return;\r\n      }\r\n    } else {\r\n      console.log('Google Maps API 아직 로드되지 않음, 재시도...');\r\n    }\r\n    \r\n    setTimeout(checkAndInit, 100);\r\n  }, [initMap]);\r\n\r\n  useEffect(() => {\r\n    checkAndInit();\r\n\r\n    return () => {\r\n      markersRef.current.forEach(marker => {\r\n        if (marker && marker.setMap) {\r\n          marker.setMap(null);\r\n        }\r\n      });\r\n      markersRef.current = [];\r\n    };\r\n  }, [checkAndInit]);\r\n\r\n  // properties가 변경될 때 마커 업데이트\r\n  useEffect(() => {\r\n    if (mapInstance.current && isMapLoaded) {\r\n      updateMarkers();\r\n    }\r\n  }, [properties, selectedMarkerId, selectedClusterId, hoveredMarkerId, isMapLoaded]);\r\n\r\n  return (\r\n    <MapContainer>\r\n      {!isMapLoaded && mapError ? (\r\n        <FallbackMap>\r\n          <MapError>\r\n            <div style={{ marginBottom: '1rem', fontSize: '1.5rem' }}>🗺️</div>\r\n            <div style={{ marginBottom: '0.5rem', fontWeight: 'bold' }}>지도 로드 실패</div>\r\n            <div style={{ fontSize: '0.9rem', color: '#6b7280' }}>{mapError}</div>\r\n            <button \r\n              onClick={() => {\r\n                setMapError(null);\r\n                setIsMapLoaded(false);\r\n                checkAndInit();\r\n              }}\r\n              style={{\r\n                marginTop: '1rem',\r\n                padding: '0.5rem 1rem',\r\n                background: '#2563eb',\r\n                color: 'white',\r\n                border: 'none',\r\n                borderRadius: '4px',\r\n                cursor: 'pointer'\r\n              }}\r\n            >\r\n              다시 시도\r\n            </button>\r\n          </MapError>\r\n        </FallbackMap>\r\n      ) : (\r\n        <div ref={mapRef} style={{ width: '100%', height: '100%' }} />\r\n      )}\r\n    </MapContainer>\r\n  );\r\n};\r\n\r\nexport default GoogleMap; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}