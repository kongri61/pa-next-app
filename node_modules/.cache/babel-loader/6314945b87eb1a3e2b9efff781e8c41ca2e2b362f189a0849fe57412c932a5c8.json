{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\user\\\\\\uC9C0\\uB3C4\\uAE30\\uBC18\\uC0AC\\uC774\\uD2B8\\uB9CC\\uB4E4\\uAE30\\\\src\\\\components\\\\GoogleMap.tsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useRef, useState } from 'react';\nimport styled from 'styled-components';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst MapContainer = styled.div`\n  width: 100%;\n  height: 100%;\n  min-height: 400px;\n  background: #f0f0f0;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  color: #666;\n  font-size: 1rem;\n`;\n_c = MapContainer;\nconst GoogleMap = ({\n  properties,\n  onMarkerClick,\n  center = {\n    lat: 37.5665,\n    lng: 126.9780\n  },\n  // 서울 시청\n  zoom = 12\n}) => {\n  _s();\n  const mapRef = useRef(null);\n  const [map, setMap] = useState(null);\n  const [markers, setMarkers] = useState([]);\n  const [isLoading, setIsLoading] = useState(true);\n  const [error, setError] = useState(null);\n\n  // Google Maps API 로딩 확인\n  useEffect(() => {\n    const checkGoogleMapsLoaded = () => {\n      if (window.google && window.google.maps) {\n        setIsLoading(false);\n        return true;\n      }\n      return false;\n    };\n    if (checkGoogleMapsLoaded()) {\n      return;\n    }\n\n    // API가 로드될 때까지 대기\n    const interval = setInterval(() => {\n      if (checkGoogleMapsLoaded()) {\n        clearInterval(interval);\n      }\n    }, 100);\n\n    // 10초 후 타임아웃\n    const timeout = setTimeout(() => {\n      clearInterval(interval);\n      setError('Google Maps API 로딩 실패');\n      setIsLoading(false);\n    }, 10000);\n    return () => {\n      clearInterval(interval);\n      clearTimeout(timeout);\n    };\n  }, []);\n\n  // 지도 초기화\n  useEffect(() => {\n    if (isLoading || !mapRef.current || !window.google || !window.google.maps) {\n      return;\n    }\n    try {\n      const newMap = new window.google.maps.Map(mapRef.current, {\n        center,\n        zoom,\n        mapTypeId: window.google.maps.MapTypeId.ROADMAP,\n        styles: [{\n          featureType: 'poi',\n          elementType: 'labels',\n          stylers: [{\n            visibility: 'off'\n          }]\n        }]\n      });\n      setMap(newMap);\n      setError(null);\n    } catch (err) {\n      console.error('지도 초기화 오류:', err);\n      setError('지도 초기화 실패');\n    }\n  }, [isLoading, center, zoom]);\n\n  // 마커 생성\n  useEffect(() => {\n    if (!map || !window.google || !window.google.maps) return;\n    try {\n      // 기존 마커들 제거\n      markers.forEach(marker => marker.setMap(null));\n\n      // 새로운 마커들 생성\n      const newMarkers = properties.map(property => {\n        const marker = new window.google.maps.Marker({\n          position: property.location,\n          map,\n          title: property.title,\n          icon: {\n            url: 'data:image/svg+xml;charset=UTF-8,' + encodeURIComponent(`\n              <svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n                <path d=\"M12 2C8.13 2 5 5.13 5 9c0 5.25 7 13 7 13s7-7.75 7-13c0-3.87-3.13-7-7-7zm0 9.5c-1.38 0-2.5-1.12-2.5-2.5s1.12-2.5 2.5-2.5 2.5 1.12 2.5 2.5-1.12 2.5-2.5 2.5z\" fill=\"#2563eb\"/>\n              </svg>\n            `),\n            scaledSize: new window.google.maps.Size(24, 24),\n            anchor: new window.google.maps.Point(12, 12)\n          }\n        });\n        if (onMarkerClick) {\n          marker.addListener('click', () => {\n            onMarkerClick(property);\n          });\n        }\n        return marker;\n      });\n      setMarkers(newMarkers);\n    } catch (err) {\n      console.error('마커 생성 오류:', err);\n    }\n  }, [map, properties, onMarkerClick]);\n  if (isLoading) {\n    return /*#__PURE__*/_jsxDEV(MapContainer, {\n      children: \"\\uC9C0\\uB3C4\\uB97C \\uBD88\\uB7EC\\uC624\\uB294 \\uC911...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 146,\n      columnNumber: 7\n    }, this);\n  }\n  if (error) {\n    return /*#__PURE__*/_jsxDEV(MapContainer, {\n      children: error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 154,\n      columnNumber: 7\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(MapContainer, {\n    ref: mapRef\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 160,\n    columnNumber: 10\n  }, this);\n};\n_s(GoogleMap, \"P5laobiW/STsUlNCRqeu4F9mxus=\");\n_c2 = GoogleMap;\nexport default GoogleMap;\nvar _c, _c2;\n$RefreshReg$(_c, \"MapContainer\");\n$RefreshReg$(_c2, \"GoogleMap\");","map":{"version":3,"names":["React","useEffect","useRef","useState","styled","jsxDEV","_jsxDEV","MapContainer","div","_c","GoogleMap","properties","onMarkerClick","center","lat","lng","zoom","_s","mapRef","map","setMap","markers","setMarkers","isLoading","setIsLoading","error","setError","checkGoogleMapsLoaded","window","google","maps","interval","setInterval","clearInterval","timeout","setTimeout","clearTimeout","current","newMap","Map","mapTypeId","MapTypeId","ROADMAP","styles","featureType","elementType","stylers","visibility","err","console","forEach","marker","newMarkers","property","Marker","position","location","title","icon","url","encodeURIComponent","scaledSize","Size","anchor","Point","addListener","children","fileName","_jsxFileName","lineNumber","columnNumber","ref","_c2","$RefreshReg$"],"sources":["C:/Users/user/지도기반사이트만들기/src/components/GoogleMap.tsx"],"sourcesContent":["import React, { useEffect, useRef, useState } from 'react';\r\nimport styled from 'styled-components';\r\nimport { Property } from '../types';\r\n\r\nconst MapContainer = styled.div`\r\n  width: 100%;\r\n  height: 100%;\r\n  min-height: 400px;\r\n  background: #f0f0f0;\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n  color: #666;\r\n  font-size: 1rem;\r\n`;\r\n\r\ninterface GoogleMapProps {\r\n  properties: Property[];\r\n  onMarkerClick?: (property: Property) => void;\r\n  center?: { lat: number; lng: number };\r\n  zoom?: number;\r\n}\r\n\r\ndeclare global {\r\n  interface Window {\r\n    google: any;\r\n  }\r\n}\r\n\r\nconst GoogleMap: React.FC<GoogleMapProps> = ({\r\n  properties,\r\n  onMarkerClick,\r\n  center = { lat: 37.5665, lng: 126.9780 }, // 서울 시청\r\n  zoom = 12\r\n}) => {\r\n  const mapRef = useRef<HTMLDivElement>(null);\r\n  const [map, setMap] = useState<any>(null);\r\n  const [markers, setMarkers] = useState<any[]>([]);\r\n  const [isLoading, setIsLoading] = useState(true);\r\n  const [error, setError] = useState<string | null>(null);\r\n\r\n  // Google Maps API 로딩 확인\r\n  useEffect(() => {\r\n    const checkGoogleMapsLoaded = () => {\r\n      if (window.google && window.google.maps) {\r\n        setIsLoading(false);\r\n        return true;\r\n      }\r\n      return false;\r\n    };\r\n\r\n    if (checkGoogleMapsLoaded()) {\r\n      return;\r\n    }\r\n\r\n    // API가 로드될 때까지 대기\r\n    const interval = setInterval(() => {\r\n      if (checkGoogleMapsLoaded()) {\r\n        clearInterval(interval);\r\n      }\r\n    }, 100);\r\n\r\n    // 10초 후 타임아웃\r\n    const timeout = setTimeout(() => {\r\n      clearInterval(interval);\r\n      setError('Google Maps API 로딩 실패');\r\n      setIsLoading(false);\r\n    }, 10000);\r\n\r\n    return () => {\r\n      clearInterval(interval);\r\n      clearTimeout(timeout);\r\n    };\r\n  }, []);\r\n\r\n  // 지도 초기화\r\n  useEffect(() => {\r\n    if (isLoading || !mapRef.current || !window.google || !window.google.maps) {\r\n      return;\r\n    }\r\n\r\n    try {\r\n      const newMap = new window.google.maps.Map(mapRef.current, {\r\n        center,\r\n        zoom,\r\n        mapTypeId: window.google.maps.MapTypeId.ROADMAP,\r\n        styles: [\r\n          {\r\n            featureType: 'poi',\r\n            elementType: 'labels',\r\n            stylers: [{ visibility: 'off' }]\r\n          }\r\n        ]\r\n      });\r\n\r\n      setMap(newMap);\r\n      setError(null);\r\n    } catch (err) {\r\n      console.error('지도 초기화 오류:', err);\r\n      setError('지도 초기화 실패');\r\n    }\r\n  }, [isLoading, center, zoom]);\r\n\r\n  // 마커 생성\r\n  useEffect(() => {\r\n    if (!map || !window.google || !window.google.maps) return;\r\n\r\n    try {\r\n      // 기존 마커들 제거\r\n      markers.forEach(marker => marker.setMap(null));\r\n\r\n      // 새로운 마커들 생성\r\n      const newMarkers = properties.map(property => {\r\n        const marker = new window.google.maps.Marker({\r\n          position: property.location,\r\n          map,\r\n          title: property.title,\r\n          icon: {\r\n            url: 'data:image/svg+xml;charset=UTF-8,' + encodeURIComponent(`\r\n              <svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\r\n                <path d=\"M12 2C8.13 2 5 5.13 5 9c0 5.25 7 13 7 13s7-7.75 7-13c0-3.87-3.13-7-7-7zm0 9.5c-1.38 0-2.5-1.12-2.5-2.5s1.12-2.5 2.5-2.5 2.5 1.12 2.5 2.5-1.12 2.5-2.5 2.5z\" fill=\"#2563eb\"/>\r\n              </svg>\r\n            `),\r\n            scaledSize: new window.google.maps.Size(24, 24),\r\n            anchor: new window.google.maps.Point(12, 12)\r\n          }\r\n        });\r\n\r\n        if (onMarkerClick) {\r\n          marker.addListener('click', () => {\r\n            onMarkerClick(property);\r\n          });\r\n        }\r\n\r\n        return marker;\r\n      });\r\n\r\n      setMarkers(newMarkers);\r\n    } catch (err) {\r\n      console.error('마커 생성 오류:', err);\r\n    }\r\n  }, [map, properties, onMarkerClick]);\r\n\r\n  if (isLoading) {\r\n    return (\r\n      <MapContainer>\r\n        지도를 불러오는 중...\r\n      </MapContainer>\r\n    );\r\n  }\r\n\r\n  if (error) {\r\n    return (\r\n      <MapContainer>\r\n        {error}\r\n      </MapContainer>\r\n    );\r\n  }\r\n\r\n  return <MapContainer ref={mapRef} />;\r\n};\r\n\r\nexport default GoogleMap; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}