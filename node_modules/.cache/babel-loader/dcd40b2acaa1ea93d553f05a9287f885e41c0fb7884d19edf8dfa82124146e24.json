{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\user\\\\\\uC9C0\\uB3C4\\uAE30\\uBC18\\uC0AC\\uC774\\uD2B8\\uB9CC\\uB4E4\\uAE30\\\\src\\\\components\\\\GoogleMap.tsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useRef } from 'react';\nimport styled from 'styled-components';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst MapContainer = styled.div`\n  width: 100%;\n  height: 100%;\n  min-height: 400px;\n  background: #f0f0f0;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  color: #666;\n  font-size: 1rem;\n  position: relative;\n  overflow: visible;\n\n  /* 마름모형 기호 완전 제거 */\n  .gmnoprint {\n    display: none !important;\n  }\n  \n  /* 지도 타입 컨트롤 완전 제거 */\n  .gm-style-mtc {\n    display: none !important;\n  }\n  \n  /* 모든 불필요한 컨트롤 제거 */\n  .gm-style button[title*=\"Map\"] {\n    display: none !important;\n  }\n`;\n_c = MapContainer;\nconst GoogleMap = ({\n  properties,\n  onMarkerClick,\n  onClusterClick,\n  selectedMarkerId,\n  setSelectedMarkerId\n}) => {\n  _s();\n  const mapRef = useRef(null);\n  const mapInstance = useRef(null);\n  const markersRef = useRef([]);\n  const isClusterClicking = useRef(false); // 클러스터 클릭 중인지 확인하는 플래그\n  const isMapInitialized = useRef(false); // 지도가 초기화되었는지 확인하는 플래그\n\n  // 마커 클러스터링 함수\n  const createClusterMarker = (properties, center) => {\n    const marker = new window.google.maps.Marker({\n      position: center,\n      map: mapInstance.current,\n      icon: {\n        url: 'data:image/svg+xml;charset=UTF-8,' + encodeURIComponent(`\n          <svg width=\"40\" height=\"40\" viewBox=\"0 0 40 40\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n            <circle cx=\"20\" cy=\"20\" r=\"18\" fill=\"#2563eb\" stroke=\"#1e40af\" stroke-width=\"3\"/>\n            <text x=\"20\" y=\"26\" text-anchor=\"middle\" fill=\"white\" font-family=\"Arial, sans-serif\" font-size=\"14\" font-weight=\"bold\">${properties.length}</text>\n          </svg>\n        `),\n        scaledSize: new window.google.maps.Size(40, 40),\n        anchor: new window.google.maps.Point(20, 20)\n      }\n    });\n\n    // hover 효과를 위한 마커 상태 관리\n\n    // 클러스터 마커 클릭 시 지도 상태 변경 없이 콜백만 실행\n    marker.addListener('click', () => {\n      console.log(`클러스터 클릭: ${properties.length}개 매물`);\n\n      // 클러스터 클릭 플래그 설정 (지도 상태 보존을 위해)\n      isClusterClicking.current = true;\n      if (properties.length === 1) {\n        // 단일 매물인 경우 해당 매물 클릭 이벤트 실행\n        if (onMarkerClick) {\n          onMarkerClick(properties[0]);\n        }\n      } else {\n        // 여러 매물인 경우 클러스터 클릭 이벤트만 실행 (지도 상태 변경 없음)\n        if (onClusterClick) {\n          onClusterClick(properties);\n        }\n      }\n\n      // 플래그를 더 오래 유지하여 줌 변경 이벤트 방지\n      setTimeout(() => {\n        isClusterClicking.current = false;\n      }, 1500);\n    });\n    return marker;\n  };\n\n  // 마커 클러스터링 로직\n  const clusterMarkers = (markers, zoom) => {\n    const clusters = [];\n\n    // 줌 레벨에 따른 클러스터 반경 조정 (더 세밀한 조정)\n    let clusterRadius;\n    if (zoom < 8) {\n      clusterRadius = 0.05; // 매우 넓은 반경 (전국 보기)\n    } else if (zoom < 10) {\n      clusterRadius = 0.02; // 넓은 반경 (시도 단위)\n    } else if (zoom < 12) {\n      clusterRadius = 0.01; // 중간 반경 (구 단위)\n    } else if (zoom < 14) {\n      clusterRadius = 0.005; // 좁은 반경 (동 단위)\n    } else if (zoom < 16) {\n      clusterRadius = 0.002; // 매우 좁은 반경 (상세 지역)\n    } else if (zoom < 18) {\n      clusterRadius = 0.001; // 개별 마커 근처\n    } else {\n      clusterRadius = 0.00001; // 거의 개별 마커 (최대 줌 시)\n    }\n    console.log(`현재 줌 레벨: ${zoom}, 클러스터 반경: ${clusterRadius}`);\n\n    // 각 매물을 클러스터에 할당\n    properties.forEach((property, index) => {\n      let addedToCluster = false;\n\n      // 기존 클러스터에 추가할 수 있는지 확인\n      for (const cluster of clusters) {\n        const distance = Math.sqrt(Math.pow(property.location.lat - cluster.center.lat, 2) + Math.pow(property.location.lng - cluster.center.lng, 2));\n        if (distance < clusterRadius) {\n          // 기존 클러스터에 추가\n          cluster.properties.push(property);\n          // 클러스터 중심 재계산\n          cluster.center = {\n            lat: cluster.properties.reduce((sum, p) => sum + p.location.lat, 0) / cluster.properties.length,\n            lng: cluster.properties.reduce((sum, p) => sum + p.location.lng, 0) / cluster.properties.length\n          };\n          addedToCluster = true;\n          console.log(`매물 ${property.id}를 기존 클러스터에 추가 (총 ${cluster.properties.length}개)`);\n          break;\n        }\n      }\n      if (!addedToCluster) {\n        // 새 클러스터 생성\n        clusters.push({\n          center: property.location,\n          properties: [property]\n        });\n        console.log(`새 클러스터 생성: 매물 ${property.id}`);\n      }\n    });\n    console.log(`총 ${clusters.length}개의 클러스터 생성됨`);\n    return clusters;\n  };\n\n  // 지도 초기화\n  useEffect(() => {\n    const initMap = () => {\n      if (!mapRef.current || !window.google || !window.google.maps) {\n        return false;\n      }\n      try {\n        // 기존 마커들 제거\n        markersRef.current.forEach(marker => {\n          if (marker && marker.setMap) {\n            marker.setMap(null);\n          }\n        });\n        markersRef.current = [];\n\n        // 지도 생성\n        const map = new window.google.maps.Map(mapRef.current, {\n          center: {\n            lat: 37.5665,\n            lng: 126.9780\n          },\n          // 서울 중심\n          zoom: 10,\n          // 서울 중심에 맞는 줌 레벨\n          mapTypeId: window.google.maps.MapTypeId.ROADMAP,\n          zoomControl: true,\n          mapTypeControl: false,\n          scaleControl: false,\n          streetViewControl: false,\n          rotateControl: false,\n          fullscreenControl: false,\n          // Ctrl+스크롤 해제 및 화면 흔들림 방지\n          gestureHandling: 'greedy',\n          // 위성 타일 안정성 개선\n          mapTypeControlOptions: {\n            style: window.google.maps.MapTypeControlStyle.HORIZONTAL_BAR,\n            position: window.google.maps.ControlPosition.TOP_RIGHT\n          },\n          // 타일 로딩 최적화\n          backgroundColor: '#f0f0f0',\n          // 위성 타일 캐싱 개선\n          disableDefaultUI: false,\n          // 타일 로딩 성능 개선\n          maxZoom: 20,\n          minZoom: 8,\n          // 위성 타일 품질 개선\n          tilt: 0,\n          // 타일 로딩 최적화\n          zoomControlOptions: {\n            position: window.google.maps.ControlPosition.RIGHT_TOP\n          },\n          // 타일 렌더링 안정성 개선\n          disableDoubleClickZoom: false,\n          // 대한민국 본토만 표시 (주변국 최소화)\n          restriction: {\n            latLngBounds: {\n              north: 38.0,\n              // 최북단 (강원도)\n              south: 34.5,\n              // 최남단 (경남)\n              east: 131.0,\n              // 최동단 (울릉도)\n              west: 125.0 // 최서단 (서해안)\n            },\n            strictBounds: false // 경계를 넘어서도 줌 가능하도록\n          }\n        });\n        mapInstance.current = map;\n\n        // 지도 로드 완료 이벤트 추가\n        map.addListener('tilesloaded', () => {\n          console.log('지도 타일 로드 완료');\n          // setIsMapLoaded(true); // 이 부분은 사용하지 않음\n        });\n\n        // 지도 완전 로드 이벤트\n        map.addListener('idle', () => {\n          console.log('지도 완전 로드됨');\n          // setIsMapLoaded(true); // 이 부분은 사용하지 않음\n        });\n\n        // 지도가 생성되면 즉시 로드된 것으로 설정\n        // setIsMapLoaded(true); // 이 부분은 사용하지 않음\n        console.log('지도 초기화 완료');\n\n        // 마커 생성 및 클러스터링\n        const createMarkers = () => {\n          const currentZoom = map.getZoom();\n          console.log(`마커 생성 시작 - 줌 레벨: ${currentZoom}, 매물 수: ${properties.length}`);\n\n          // 줌 레벨에 따른 클러스터링 (더 세밀한 기준)\n          if (currentZoom >= 18) {\n            // 최대 줌 레벨에서는 개별 마커만 생성\n            console.log('최대 줌 레벨 - 개별 마커만 생성');\n            properties.forEach((property, index) => {\n              const isSelected = selectedMarkerId === property.id;\n              const marker = new window.google.maps.Marker({\n                position: property.location,\n                map,\n                title: property.title,\n                icon: {\n                  url: 'data:image/svg+xml;charset=UTF-8,' + encodeURIComponent(isSelected ? `<svg width=\"44\" height=\"44\" viewBox=\"0 0 44 44\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\"><circle cx=\"22\" cy=\"22\" r=\"20\" fill=\"white\" stroke=\"#111\" stroke-width=\"3\"/><text x=\"22\" y=\"29\" text-anchor=\"middle\" fill=\"#111\" font-family=\"Arial, sans-serif\" font-size=\"16\" font-weight=\"bold\">1</text></svg>` : `<svg width=\"30\" height=\"30\" viewBox=\"0 0 30 30\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\"><circle cx=\"15\" cy=\"15\" r=\"13\" fill=\"#2563eb\" stroke=\"#1e40af\" stroke-width=\"2\"/><text x=\"15\" y=\"19\" text-anchor=\"middle\" fill=\"white\" font-family=\"Arial, sans-serif\" font-size=\"10\" font-weight=\"bold\">1</text></svg>`),\n                  scaledSize: isSelected ? new window.google.maps.Size(44, 44) : new window.google.maps.Size(30, 30),\n                  anchor: isSelected ? new window.google.maps.Point(22, 22) : new window.google.maps.Point(15, 15)\n                }\n              });\n              if (onMarkerClick) {\n                marker.addListener('click', () => {\n                  // 클러스터 클릭 플래그 설정 (지도 상태 보존을 위해)\n                  isClusterClicking.current = true;\n                  if (setSelectedMarkerId) setSelectedMarkerId(property.id);\n                  onMarkerClick(property);\n\n                  // 플래그를 더 오래 유지하여 줌 변경 이벤트 방지\n                  setTimeout(() => {\n                    isClusterClicking.current = false;\n                  }, 1500);\n                });\n              }\n              markersRef.current.push(marker);\n              console.log(`개별 마커 생성: 매물 ${property.id} (${property.location.lat}, ${property.location.lng})`);\n            });\n          } else {\n            // 일반적인 클러스터링 로직 (줌 레벨에 따라 동적 조정)\n            const clusters = clusterMarkers([], currentZoom);\n            clusters.forEach((cluster, clusterIndex) => {\n              console.log(`클러스터 ${clusterIndex + 1}: ${cluster.properties.length}개 매물`);\n              if (cluster.properties.length === 1) {\n                const property = cluster.properties[0];\n                const isSelected = selectedMarkerId === property.id;\n                const marker = new window.google.maps.Marker({\n                  position: property.location,\n                  map,\n                  title: property.title,\n                  icon: {\n                    url: 'data:image/svg+xml;charset=UTF-8,' + encodeURIComponent(isSelected ? `<svg width=\"44\" height=\"44\" viewBox=\"0 0 44 44\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\"><circle cx=\"22\" cy=\"22\" r=\"20\" fill=\"white\" stroke=\"#111\" stroke-width=\"3\"/><text x=\"22\" y=\"29\" text-anchor=\"middle\" fill=\"#111\" font-family=\"Arial, sans-serif\" font-size=\"16\" font-weight=\"bold\">1</text></svg>` : `<svg width=\"30\" height=\"30\" viewBox=\"0 0 30 30\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\"><circle cx=\"15\" cy=\"15\" r=\"13\" fill=\"#2563eb\" stroke=\"#1e40af\" stroke-width=\"2\"/><text x=\"15\" y=\"19\" text-anchor=\"middle\" fill=\"white\" font-family=\"Arial, sans-serif\" font-size=\"10\" font-weight=\"bold\">1</text></svg>`),\n                    scaledSize: isSelected ? new window.google.maps.Size(44, 44) : new window.google.maps.Size(30, 30),\n                    anchor: isSelected ? new window.google.maps.Point(22, 22) : new window.google.maps.Point(15, 15)\n                  }\n                });\n                if (onMarkerClick) {\n                  marker.addListener('click', () => {\n                    // 클러스터 클릭 플래그 설정 (지도 상태 보존을 위해)\n                    isClusterClicking.current = true;\n                    if (setSelectedMarkerId) setSelectedMarkerId(property.id);\n                    onMarkerClick(property);\n\n                    // 플래그를 더 오래 유지하여 줌 변경 이벤트 방지\n                    setTimeout(() => {\n                      isClusterClicking.current = false;\n                    }, 1500);\n                  });\n                }\n                markersRef.current.push(marker);\n                console.log(`단일 마커 생성: 매물 ${property.id} (${property.location.lat}, ${property.location.lng})`);\n              } else {\n                // 클러스터 마커 - 묶인 개수 표시\n                const clusterMarker = createClusterMarker(cluster.properties, cluster.center);\n                markersRef.current.push(clusterMarker);\n                console.log(`클러스터 마커 생성: ${cluster.properties.length}개 매물 (중심: ${cluster.center.lat}, ${cluster.center.lng})`);\n              }\n            });\n          }\n          console.log(`총 ${markersRef.current.length}개의 마커 생성 완료`);\n        };\n\n        // 초기 마커 생성\n        createMarkers();\n\n        // 줌 변경 이벤트 리스너 활성화 (동적 클러스터링을 위해)\n        map.addListener('zoom_changed', () => {\n          // 클러스터 클릭 중일 때는 마커 재생성하지 않음\n          if (isClusterClicking.current) {\n            console.log('클러스터 클릭 중 - 마커 재생성 건너뜀');\n            return;\n          }\n          const newZoom = map.getZoom();\n          console.log('줌 레벨 변경됨:', newZoom);\n\n          // 기존 마커 제거\n          markersRef.current.forEach(marker => {\n            if (marker && marker.setMap) {\n              marker.setMap(null);\n            }\n          });\n          markersRef.current = [];\n\n          // 새 마커 생성 (지연 시간으로 안정성 확보)\n          setTimeout(() => {\n            // 다시 한번 클러스터 클릭 중인지 확인\n            if (!isClusterClicking.current) {\n              try {\n                createMarkers();\n              } catch (error) {\n                console.error('마커 재생성 중 오류:', error);\n              }\n            }\n          }, 200);\n        });\n\n        // 지도 클릭 시 클러스터 클릭 플래그 해제\n        map.addListener('click', () => {\n          if (isClusterClicking.current) {\n            console.log('지도 클릭으로 클러스터 클릭 플래그 해제');\n            isClusterClicking.current = false;\n          }\n        });\n\n        // 지도 드래그 시 클러스터 클릭 플래그 해제\n        map.addListener('dragstart', () => {\n          if (isClusterClicking.current) {\n            console.log('지도 드래그로 클러스터 클릭 플래그 해제');\n            isClusterClicking.current = false;\n          }\n        });\n        return true;\n      } catch (error) {\n        console.error('지도 초기화 오류:', error);\n        return false;\n      }\n    };\n\n    // Google Maps API 로딩 확인 및 지도 초기화\n    const checkAndInit = () => {\n      if (window.google && window.google.maps) {\n        if (initMap()) {\n          // setIsMapLoaded(true); // 이 부분은 사용하지 않음\n          return;\n        }\n      }\n\n      // API가 로드되지 않았으면 100ms 후 다시 시도\n      setTimeout(checkAndInit, 100);\n    };\n    checkAndInit();\n\n    // 컴포넌트 언마운트 시 정리\n    return () => {\n      markersRef.current.forEach(marker => {\n        if (marker && marker.setMap) {\n          marker.setMap(null);\n        }\n      });\n      markersRef.current = [];\n    };\n  }, [properties, onMarkerClick, onClusterClick, selectedMarkerId, setSelectedMarkerId]);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(MapContainer, {\n      ref: mapRef\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 442,\n      columnNumber: 7\n    }, this)\n  }, void 0, false);\n};\n_s(GoogleMap, \"dt5IVRSic9yNetEsQvAfKuNf/Aw=\");\n_c2 = GoogleMap;\nexport default GoogleMap;\nvar _c, _c2;\n$RefreshReg$(_c, \"MapContainer\");\n$RefreshReg$(_c2, \"GoogleMap\");","map":{"version":3,"names":["React","useEffect","useRef","styled","jsxDEV","_jsxDEV","Fragment","_Fragment","MapContainer","div","_c","GoogleMap","properties","onMarkerClick","onClusterClick","selectedMarkerId","setSelectedMarkerId","_s","mapRef","mapInstance","markersRef","isClusterClicking","isMapInitialized","createClusterMarker","center","marker","window","google","maps","Marker","position","map","current","icon","url","encodeURIComponent","length","scaledSize","Size","anchor","Point","addListener","console","log","setTimeout","clusterMarkers","markers","zoom","clusters","clusterRadius","forEach","property","index","addedToCluster","cluster","distance","Math","sqrt","pow","location","lat","lng","push","reduce","sum","p","id","initMap","setMap","Map","mapTypeId","MapTypeId","ROADMAP","zoomControl","mapTypeControl","scaleControl","streetViewControl","rotateControl","fullscreenControl","gestureHandling","mapTypeControlOptions","style","MapTypeControlStyle","HORIZONTAL_BAR","ControlPosition","TOP_RIGHT","backgroundColor","disableDefaultUI","maxZoom","minZoom","tilt","zoomControlOptions","RIGHT_TOP","disableDoubleClickZoom","restriction","latLngBounds","north","south","east","west","strictBounds","createMarkers","currentZoom","getZoom","isSelected","title","clusterIndex","clusterMarker","newZoom","error","checkAndInit","children","ref","fileName","_jsxFileName","lineNumber","columnNumber","_c2","$RefreshReg$"],"sources":["C:/Users/user/지도기반사이트만들기/src/components/GoogleMap.tsx"],"sourcesContent":["import React, { useEffect, useRef } from 'react';\nimport styled from 'styled-components';\nimport { Property } from '../types';\n\nconst MapContainer = styled.div`\n  width: 100%;\n  height: 100%;\n  min-height: 400px;\n  background: #f0f0f0;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  color: #666;\n  font-size: 1rem;\n  position: relative;\n  overflow: visible;\n\n  /* 마름모형 기호 완전 제거 */\n  .gmnoprint {\n    display: none !important;\n  }\n  \n  /* 지도 타입 컨트롤 완전 제거 */\n  .gm-style-mtc {\n    display: none !important;\n  }\n  \n  /* 모든 불필요한 컨트롤 제거 */\n  .gm-style button[title*=\"Map\"] {\n    display: none !important;\n  }\n`;\n\ninterface GoogleMapProps {\n  properties: Property[];\n  onMarkerClick?: (property: Property) => void;\n  onClusterClick?: (properties: Property[]) => void;\n  selectedMarkerId?: string | null;\n  setSelectedMarkerId?: (id: string) => void;\n}\n\ndeclare global {\n  interface Window {\n    google: any;\n  }\n}\n\nconst GoogleMap: React.FC<GoogleMapProps> = ({\n  properties,\n  onMarkerClick,\n  onClusterClick,\n  selectedMarkerId,\n  setSelectedMarkerId\n}) => {\n  const mapRef = useRef<HTMLDivElement>(null);\n  const mapInstance = useRef<any>(null);\n  const markersRef = useRef<any[]>([]);\n  const isClusterClicking = useRef(false); // 클러스터 클릭 중인지 확인하는 플래그\n  const isMapInitialized = useRef(false); // 지도가 초기화되었는지 확인하는 플래그\n\n  // 마커 클러스터링 함수\n  const createClusterMarker = (properties: Property[], center: { lat: number; lng: number }) => {\n    const marker = new window.google.maps.Marker({\n      position: center,\n      map: mapInstance.current,\n      icon: {\n        url: 'data:image/svg+xml;charset=UTF-8,' + encodeURIComponent(`\n          <svg width=\"40\" height=\"40\" viewBox=\"0 0 40 40\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n            <circle cx=\"20\" cy=\"20\" r=\"18\" fill=\"#2563eb\" stroke=\"#1e40af\" stroke-width=\"3\"/>\n            <text x=\"20\" y=\"26\" text-anchor=\"middle\" fill=\"white\" font-family=\"Arial, sans-serif\" font-size=\"14\" font-weight=\"bold\">${properties.length}</text>\n          </svg>\n        `),\n        scaledSize: new window.google.maps.Size(40, 40),\n        anchor: new window.google.maps.Point(20, 20)\n      }\n    });\n\n    // hover 효과를 위한 마커 상태 관리\n    \n    // 클러스터 마커 클릭 시 지도 상태 변경 없이 콜백만 실행\n    marker.addListener('click', () => {\n      console.log(`클러스터 클릭: ${properties.length}개 매물`);\n      \n      // 클러스터 클릭 플래그 설정 (지도 상태 보존을 위해)\n      isClusterClicking.current = true;\n      \n      if (properties.length === 1) {\n        // 단일 매물인 경우 해당 매물 클릭 이벤트 실행\n        if (onMarkerClick) {\n          onMarkerClick(properties[0]);\n        }\n      } else {\n        // 여러 매물인 경우 클러스터 클릭 이벤트만 실행 (지도 상태 변경 없음)\n        if (onClusterClick) {\n          onClusterClick(properties);\n        }\n      }\n      \n      // 플래그를 더 오래 유지하여 줌 변경 이벤트 방지\n      setTimeout(() => {\n        isClusterClicking.current = false;\n      }, 1500);\n    });\n\n    return marker;\n  };\n\n  // 마커 클러스터링 로직\n  const clusterMarkers = (markers: any[], zoom: number) => {\n    const clusters: { center: { lat: number; lng: number }; properties: Property[] }[] = [];\n    \n    // 줌 레벨에 따른 클러스터 반경 조정 (더 세밀한 조정)\n    let clusterRadius: number;\n    if (zoom < 8) {\n      clusterRadius = 0.05; // 매우 넓은 반경 (전국 보기)\n    } else if (zoom < 10) {\n      clusterRadius = 0.02; // 넓은 반경 (시도 단위)\n    } else if (zoom < 12) {\n      clusterRadius = 0.01; // 중간 반경 (구 단위)\n    } else if (zoom < 14) {\n      clusterRadius = 0.005; // 좁은 반경 (동 단위)\n    } else if (zoom < 16) {\n      clusterRadius = 0.002; // 매우 좁은 반경 (상세 지역)\n    } else if (zoom < 18) {\n      clusterRadius = 0.001; // 개별 마커 근처\n    } else {\n      clusterRadius = 0.00001; // 거의 개별 마커 (최대 줌 시)\n    }\n\n    console.log(`현재 줌 레벨: ${zoom}, 클러스터 반경: ${clusterRadius}`);\n\n    // 각 매물을 클러스터에 할당\n    properties.forEach((property, index) => {\n      let addedToCluster = false;\n\n      // 기존 클러스터에 추가할 수 있는지 확인\n      for (const cluster of clusters) {\n        const distance = Math.sqrt(\n          Math.pow(property.location.lat - cluster.center.lat, 2) +\n          Math.pow(property.location.lng - cluster.center.lng, 2)\n        );\n\n        if (distance < clusterRadius) {\n          // 기존 클러스터에 추가\n          cluster.properties.push(property);\n          // 클러스터 중심 재계산\n          cluster.center = {\n            lat: cluster.properties.reduce((sum, p) => sum + p.location.lat, 0) / cluster.properties.length,\n            lng: cluster.properties.reduce((sum, p) => sum + p.location.lng, 0) / cluster.properties.length\n          };\n          addedToCluster = true;\n          console.log(`매물 ${property.id}를 기존 클러스터에 추가 (총 ${cluster.properties.length}개)`);\n          break;\n        }\n      }\n\n      if (!addedToCluster) {\n        // 새 클러스터 생성\n        clusters.push({\n          center: property.location,\n          properties: [property]\n        });\n        console.log(`새 클러스터 생성: 매물 ${property.id}`);\n      }\n    });\n\n    console.log(`총 ${clusters.length}개의 클러스터 생성됨`);\n    return clusters;\n  };\n\n  // 지도 초기화\n  useEffect(() => {\n    const initMap = () => {\n      if (!mapRef.current || !window.google || !window.google.maps) {\n        return false;\n      }\n\n      try {\n        // 기존 마커들 제거\n        markersRef.current.forEach(marker => {\n          if (marker && marker.setMap) {\n            marker.setMap(null);\n          }\n        });\n        markersRef.current = [];\n\n        // 지도 생성\n        const map = new window.google.maps.Map(mapRef.current, {\n          center: { lat: 37.5665, lng: 126.9780 }, // 서울 중심\n          zoom: 10, // 서울 중심에 맞는 줌 레벨\n          mapTypeId: window.google.maps.MapTypeId.ROADMAP,\n          zoomControl: true,\n          mapTypeControl: false,\n          scaleControl: false,\n          streetViewControl: false,\n          rotateControl: false,\n          fullscreenControl: false,\n          // Ctrl+스크롤 해제 및 화면 흔들림 방지\n          gestureHandling: 'greedy',\n          // 위성 타일 안정성 개선\n          mapTypeControlOptions: {\n            style: window.google.maps.MapTypeControlStyle.HORIZONTAL_BAR,\n            position: window.google.maps.ControlPosition.TOP_RIGHT\n          },\n          // 타일 로딩 최적화\n          backgroundColor: '#f0f0f0',\n          // 위성 타일 캐싱 개선\n          disableDefaultUI: false,\n          // 타일 로딩 성능 개선\n          maxZoom: 20,\n          minZoom: 8,\n          // 위성 타일 품질 개선\n          tilt: 0,\n          // 타일 로딩 최적화\n          zoomControlOptions: {\n            position: window.google.maps.ControlPosition.RIGHT_TOP\n          },\n          // 타일 렌더링 안정성 개선\n          disableDoubleClickZoom: false,\n          // 대한민국 본토만 표시 (주변국 최소화)\n          restriction: {\n            latLngBounds: {\n              north: 38.0, // 최북단 (강원도)\n              south: 34.5, // 최남단 (경남)\n              east: 131.0, // 최동단 (울릉도)\n              west: 125.0  // 최서단 (서해안)\n            },\n            strictBounds: false // 경계를 넘어서도 줌 가능하도록\n          }\n        });\n\n        mapInstance.current = map;\n\n        // 지도 로드 완료 이벤트 추가\n        map.addListener('tilesloaded', () => {\n          console.log('지도 타일 로드 완료');\n          // setIsMapLoaded(true); // 이 부분은 사용하지 않음\n        });\n\n        // 지도 완전 로드 이벤트\n        map.addListener('idle', () => {\n          console.log('지도 완전 로드됨');\n          // setIsMapLoaded(true); // 이 부분은 사용하지 않음\n        });\n\n        // 지도가 생성되면 즉시 로드된 것으로 설정\n        // setIsMapLoaded(true); // 이 부분은 사용하지 않음\n        console.log('지도 초기화 완료');\n\n        // 마커 생성 및 클러스터링\n        const createMarkers = () => {\n          const currentZoom = map.getZoom();\n          console.log(`마커 생성 시작 - 줌 레벨: ${currentZoom}, 매물 수: ${properties.length}`);\n          \n          // 줌 레벨에 따른 클러스터링 (더 세밀한 기준)\n          if (currentZoom >= 18) {\n            // 최대 줌 레벨에서는 개별 마커만 생성\n            console.log('최대 줌 레벨 - 개별 마커만 생성');\n            properties.forEach((property, index) => {\n              const isSelected = selectedMarkerId === property.id;\n              const marker = new window.google.maps.Marker({\n                position: property.location,\n                map,\n                title: property.title,\n                icon: {\n                  url: 'data:image/svg+xml;charset=UTF-8,' + encodeURIComponent(\n                    isSelected\n                      ? `<svg width=\"44\" height=\"44\" viewBox=\"0 0 44 44\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\"><circle cx=\"22\" cy=\"22\" r=\"20\" fill=\"white\" stroke=\"#111\" stroke-width=\"3\"/><text x=\"22\" y=\"29\" text-anchor=\"middle\" fill=\"#111\" font-family=\"Arial, sans-serif\" font-size=\"16\" font-weight=\"bold\">1</text></svg>`\n                      : `<svg width=\"30\" height=\"30\" viewBox=\"0 0 30 30\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\"><circle cx=\"15\" cy=\"15\" r=\"13\" fill=\"#2563eb\" stroke=\"#1e40af\" stroke-width=\"2\"/><text x=\"15\" y=\"19\" text-anchor=\"middle\" fill=\"white\" font-family=\"Arial, sans-serif\" font-size=\"10\" font-weight=\"bold\">1</text></svg>`\n                  ),\n                  scaledSize: isSelected\n                    ? new window.google.maps.Size(44, 44)\n                    : new window.google.maps.Size(30, 30),\n                  anchor: isSelected\n                    ? new window.google.maps.Point(22, 22)\n                    : new window.google.maps.Point(15, 15)\n                }\n              });\n\n              if (onMarkerClick) {\n                marker.addListener('click', () => {\n                  // 클러스터 클릭 플래그 설정 (지도 상태 보존을 위해)\n                  isClusterClicking.current = true;\n                  \n                  if (setSelectedMarkerId) setSelectedMarkerId(property.id);\n                  onMarkerClick(property);\n                  \n                  // 플래그를 더 오래 유지하여 줌 변경 이벤트 방지\n                  setTimeout(() => {\n                    isClusterClicking.current = false;\n                  }, 1500);\n                });\n              }\n\n              markersRef.current.push(marker);\n              console.log(`개별 마커 생성: 매물 ${property.id} (${property.location.lat}, ${property.location.lng})`);\n            });\n          } else {\n            // 일반적인 클러스터링 로직 (줌 레벨에 따라 동적 조정)\n            const clusters = clusterMarkers([], currentZoom);\n\n            clusters.forEach((cluster, clusterIndex) => {\n              console.log(`클러스터 ${clusterIndex + 1}: ${cluster.properties.length}개 매물`);\n              \n              if (cluster.properties.length === 1) {\n                const property = cluster.properties[0];\n                const isSelected = selectedMarkerId === property.id;\n                const marker = new window.google.maps.Marker({\n                  position: property.location,\n                  map,\n                  title: property.title,\n                  icon: {\n                    url: 'data:image/svg+xml;charset=UTF-8,' + encodeURIComponent(\n                      isSelected\n                        ? `<svg width=\"44\" height=\"44\" viewBox=\"0 0 44 44\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\"><circle cx=\"22\" cy=\"22\" r=\"20\" fill=\"white\" stroke=\"#111\" stroke-width=\"3\"/><text x=\"22\" y=\"29\" text-anchor=\"middle\" fill=\"#111\" font-family=\"Arial, sans-serif\" font-size=\"16\" font-weight=\"bold\">1</text></svg>`\n                        : `<svg width=\"30\" height=\"30\" viewBox=\"0 0 30 30\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\"><circle cx=\"15\" cy=\"15\" r=\"13\" fill=\"#2563eb\" stroke=\"#1e40af\" stroke-width=\"2\"/><text x=\"15\" y=\"19\" text-anchor=\"middle\" fill=\"white\" font-family=\"Arial, sans-serif\" font-size=\"10\" font-weight=\"bold\">1</text></svg>`\n                    ),\n                    scaledSize: isSelected\n                      ? new window.google.maps.Size(44, 44)\n                      : new window.google.maps.Size(30, 30),\n                    anchor: isSelected\n                      ? new window.google.maps.Point(22, 22)\n                      : new window.google.maps.Point(15, 15)\n                  }\n                });\n\n                if (onMarkerClick) {\n                  marker.addListener('click', () => {\n                    // 클러스터 클릭 플래그 설정 (지도 상태 보존을 위해)\n                    isClusterClicking.current = true;\n                    \n                    if (setSelectedMarkerId) setSelectedMarkerId(property.id);\n                    onMarkerClick(property);\n                    \n                    // 플래그를 더 오래 유지하여 줌 변경 이벤트 방지\n                    setTimeout(() => {\n                      isClusterClicking.current = false;\n                    }, 1500);\n                  });\n                }\n\n                markersRef.current.push(marker);\n                console.log(`단일 마커 생성: 매물 ${property.id} (${property.location.lat}, ${property.location.lng})`);\n              } else {\n                // 클러스터 마커 - 묶인 개수 표시\n                const clusterMarker = createClusterMarker(cluster.properties, cluster.center);\n                markersRef.current.push(clusterMarker);\n                console.log(`클러스터 마커 생성: ${cluster.properties.length}개 매물 (중심: ${cluster.center.lat}, ${cluster.center.lng})`);\n              }\n            });\n          }\n          \n          console.log(`총 ${markersRef.current.length}개의 마커 생성 완료`);\n        };\n\n        // 초기 마커 생성\n        createMarkers();\n\n        // 줌 변경 이벤트 리스너 활성화 (동적 클러스터링을 위해)\n        map.addListener('zoom_changed', () => {\n          // 클러스터 클릭 중일 때는 마커 재생성하지 않음\n          if (isClusterClicking.current) {\n            console.log('클러스터 클릭 중 - 마커 재생성 건너뜀');\n            return;\n          }\n          \n          const newZoom = map.getZoom();\n          console.log('줌 레벨 변경됨:', newZoom);\n          \n          // 기존 마커 제거\n          markersRef.current.forEach(marker => {\n            if (marker && marker.setMap) {\n              marker.setMap(null);\n            }\n          });\n          markersRef.current = [];\n\n          // 새 마커 생성 (지연 시간으로 안정성 확보)\n          setTimeout(() => {\n            // 다시 한번 클러스터 클릭 중인지 확인\n            if (!isClusterClicking.current) {\n              try {\n                createMarkers();\n              } catch (error) {\n                console.error('마커 재생성 중 오류:', error);\n              }\n            }\n          }, 200);\n        });\n\n        // 지도 클릭 시 클러스터 클릭 플래그 해제\n        map.addListener('click', () => {\n          if (isClusterClicking.current) {\n            console.log('지도 클릭으로 클러스터 클릭 플래그 해제');\n            isClusterClicking.current = false;\n          }\n        });\n\n        // 지도 드래그 시 클러스터 클릭 플래그 해제\n        map.addListener('dragstart', () => {\n          if (isClusterClicking.current) {\n            console.log('지도 드래그로 클러스터 클릭 플래그 해제');\n            isClusterClicking.current = false;\n          }\n        });\n\n        return true;\n      } catch (error) {\n        console.error('지도 초기화 오류:', error);\n        return false;\n      }\n    };\n\n    // Google Maps API 로딩 확인 및 지도 초기화\n    const checkAndInit = () => {\n      if (window.google && window.google.maps) {\n        if (initMap()) {\n          // setIsMapLoaded(true); // 이 부분은 사용하지 않음\n          return;\n        }\n      }\n      \n      // API가 로드되지 않았으면 100ms 후 다시 시도\n      setTimeout(checkAndInit, 100);\n    };\n\n    checkAndInit();\n\n    // 컴포넌트 언마운트 시 정리\n    return () => {\n      markersRef.current.forEach(marker => {\n        if (marker && marker.setMap) {\n          marker.setMap(null);\n        }\n      });\n      markersRef.current = [];\n    };\n  }, [properties, onMarkerClick, onClusterClick, selectedMarkerId, setSelectedMarkerId]);\n\n  return (\n    <>\n      <MapContainer ref={mapRef} />\n    </>\n  );\n};\n\nexport default GoogleMap; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}