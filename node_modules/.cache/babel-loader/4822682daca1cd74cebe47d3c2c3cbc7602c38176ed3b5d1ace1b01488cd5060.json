{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\user\\\\\\uC9C0\\uB3C4\\uAE30\\uBC18\\uC0AC\\uC774\\uD2B8\\uB9CC\\uB4E4\\uAE30\\\\src\\\\components\\\\GoogleMap.tsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useRef, useState, useCallback } from 'react';\nimport styled from 'styled-components';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst MapContainer = styled.div`\n  width: 100%;\n  height: 100%;\n  min-height: 400px;\n  position: relative;\n  overflow: visible;\n  background: #f0f0f0;\n`;\n_c = MapContainer;\nconst FallbackMap = styled.div`\n  width: 100%;\n  height: 100%;\n  background: linear-gradient(45deg, #e5e7eb 25%, transparent 25%), \n              linear-gradient(-45deg, #e5e7eb 25%, transparent 25%), \n              linear-gradient(45deg, transparent 75%, #e5e7eb 75%), \n              linear-gradient(-45deg, transparent 75%, #e5e7eb 75%);\n  background-size: 20px 20px;\n  background-position: 0 0, 0 10px, 10px -10px, -10px 0px;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  color: #6b7280;\n  font-size: 1.2rem;\n  font-weight: 500;\n`;\n_c2 = FallbackMap;\nconst MapError = styled.div`\n  text-align: center;\n  padding: 2rem;\n  background: white;\n  border-radius: 8px;\n  box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);\n  max-width: 400px;\n`;\n_c3 = MapError;\nconst GoogleMap = ({\n  properties,\n  onMarkerClick,\n  onClusterClick,\n  selectedMarkerId,\n  setSelectedMarkerId,\n  selectedClusterId,\n  setSelectedClusterId\n}) => {\n  _s();\n  const mapRef = useRef(null);\n  const mapInstance = useRef(null);\n  const markersRef = useRef([]);\n  const isClusterClicking = useRef(false);\n  const [isMapLoaded, setIsMapLoaded] = useState(false);\n  const [mapError, setMapError] = useState(null);\n\n  // 마커 클러스터링 함수\n  const createClusterMarker = useCallback((properties, center) => {\n    const clusterId = properties.map(p => p.id).join(',');\n    const isSelected = selectedClusterId === clusterId;\n    const marker = new window.google.maps.Marker({\n      position: center,\n      map: mapInstance.current,\n      icon: {\n        url: 'data:image/svg+xml;charset=UTF-8,' + encodeURIComponent(isSelected ? `<svg width=\"44\" height=\"44\" viewBox=\"0 0 44 44\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n                <circle cx=\"22\" cy=\"22\" r=\"20\" fill=\"white\" stroke=\"#111\" stroke-width=\"3\"/>\n                <text x=\"22\" y=\"26\" text-anchor=\"middle\" fill=\"#111\" font-family=\"Arial, sans-serif\" font-size=\"14\" font-weight=\"bold\">${properties.length}</text>\n              </svg>` : `<svg width=\"40\" height=\"40\" viewBox=\"0 0 40 40\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n                <circle cx=\"20\" cy=\"20\" r=\"18\" fill=\"#2563eb\" stroke=\"#1e40af\" stroke-width=\"3\"/>\n                <text x=\"20\" y=\"26\" text-anchor=\"middle\" fill=\"white\" font-family=\"Arial, sans-serif\" font-size=\"14\" font-weight=\"bold\">${properties.length}</text>\n              </svg>`),\n        scaledSize: isSelected ? new window.google.maps.Size(44, 44) : new window.google.maps.Size(40, 40),\n        anchor: isSelected ? new window.google.maps.Point(22, 22) : new window.google.maps.Point(20, 20)\n      }\n    });\n    marker.addListener('click', () => {\n      console.log(`클러스터 클릭: ${properties.length}개 매물`);\n      isClusterClicking.current = true;\n      if (properties.length === 1) {\n        if (onMarkerClick) {\n          onMarkerClick(properties[0]);\n        }\n      } else {\n        if (onClusterClick) {\n          onClusterClick(properties);\n        }\n      }\n      setTimeout(() => {\n        isClusterClicking.current = false;\n      }, 1500);\n    });\n    return marker;\n  }, [onMarkerClick, onClusterClick, selectedClusterId]);\n\n  // 마커 클러스터링 로직\n  const clusterMarkers = (markers, zoom) => {\n    const clusters = [];\n    let clusterRadius;\n    if (zoom < 8) {\n      clusterRadius = 0.05;\n    } else if (zoom < 10) {\n      clusterRadius = 0.02;\n    } else if (zoom < 12) {\n      clusterRadius = 0.01;\n    } else if (zoom < 14) {\n      clusterRadius = 0.005;\n    } else if (zoom < 16) {\n      clusterRadius = 0.002;\n    } else if (zoom < 18) {\n      clusterRadius = 0.001;\n    } else {\n      clusterRadius = 0.00001;\n    }\n    properties.forEach((property, index) => {\n      let addedToCluster = false;\n      for (const cluster of clusters) {\n        const distance = Math.sqrt(Math.pow(property.location.lat - cluster.center.lat, 2) + Math.pow(property.location.lng - cluster.center.lng, 2));\n        if (distance < clusterRadius) {\n          cluster.properties.push(property);\n          cluster.center = {\n            lat: cluster.properties.reduce((sum, p) => sum + p.location.lat, 0) / cluster.properties.length,\n            lng: cluster.properties.reduce((sum, p) => sum + p.location.lng, 0) / cluster.properties.length\n          };\n          addedToCluster = true;\n          break;\n        }\n      }\n      if (!addedToCluster) {\n        clusters.push({\n          center: property.location,\n          properties: [property]\n        });\n      }\n    });\n    return clusters;\n  };\n\n  // 지도 초기화\n  const initMap = useCallback(() => {\n    var _window$google;\n    console.log('지도 초기화 시도...');\n    console.log('mapRef.current:', mapRef.current);\n    console.log('window.google:', window.google);\n    console.log('window.google.maps:', (_window$google = window.google) === null || _window$google === void 0 ? void 0 : _window$google.maps);\n    if (!mapRef.current) {\n      console.log('mapRef가 없음');\n      return false;\n    }\n    if (!window.google) {\n      console.log('Google Maps API가 로드되지 않음');\n      return false;\n    }\n    if (!window.google.maps) {\n      console.log('Google Maps 객체가 없음');\n      return false;\n    }\n    if (mapInstance.current) {\n      console.log('기존 지도 인스턴스 업데이트');\n      updateMarkers();\n      return true;\n    }\n    try {\n      console.log('새 지도 인스턴스 생성 시작...');\n      markersRef.current.forEach(marker => {\n        if (marker && marker.setMap) {\n          marker.setMap(null);\n        }\n      });\n      markersRef.current = [];\n      const map = new window.google.maps.Map(mapRef.current, {\n        center: {\n          lat: 37.5665,\n          lng: 126.9780\n        },\n        zoom: 10,\n        mapTypeId: window.google.maps.MapTypeId.ROADMAP,\n        zoomControl: true,\n        mapTypeControl: false,\n        scaleControl: false,\n        streetViewControl: false,\n        rotateControl: false,\n        fullscreenControl: false,\n        gestureHandling: 'greedy',\n        backgroundColor: '#f0f0f0',\n        disableDefaultUI: false,\n        maxZoom: 20,\n        minZoom: 8,\n        tilt: 0,\n        zoomControlOptions: {\n          position: window.google.maps.ControlPosition.RIGHT_TOP\n        },\n        disableDoubleClickZoom: false,\n        restriction: {\n          latLngBounds: {\n            north: 38.0,\n            south: 34.5,\n            east: 131.0,\n            west: 125.0\n          },\n          strictBounds: false\n        }\n      });\n      console.log('지도 인스턴스 생성 완료:', map);\n      mapInstance.current = map;\n      createMarkers();\n      map.addListener('zoom_changed', () => {\n        if (isClusterClicking.current) {\n          return;\n        }\n        markersRef.current.forEach(marker => {\n          if (marker && marker.setMap) {\n            marker.setMap(null);\n          }\n        });\n        markersRef.current = [];\n        setTimeout(() => {\n          if (!isClusterClicking.current) {\n            createMarkers();\n          }\n        }, 300);\n      });\n      console.log('지도 초기화 완료');\n      setIsMapLoaded(true);\n      setMapError(null);\n      return true;\n    } catch (error) {\n      console.error('지도 초기화 오류:', error);\n      setMapError('지도를 로드할 수 없습니다. Google Maps API를 확인해주세요.');\n      setIsMapLoaded(false);\n      return false;\n    }\n  }, [createMarkers, updateMarkers]);\n  const createMarkers = () => {\n    if (!mapInstance.current) return;\n    const currentZoom = mapInstance.current.getZoom();\n    if (currentZoom >= 18) {\n      properties.forEach((property, index) => {\n        const isSelected = selectedMarkerId === property.id;\n        const marker = new window.google.maps.Marker({\n          position: property.location,\n          map: mapInstance.current,\n          title: property.title,\n          icon: {\n            url: 'data:image/svg+xml;charset=UTF-8,' + encodeURIComponent(isSelected ? `<svg width=\"44\" height=\"44\" viewBox=\"0 0 44 44\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\"><circle cx=\"22\" cy=\"22\" r=\"20\" fill=\"white\" stroke=\"#111\" stroke-width=\"3\"/><text x=\"22\" y=\"29\" text-anchor=\"middle\" fill=\"#111\" font-family=\"Arial, sans-serif\" font-size=\"16\" font-weight=\"bold\">1</text></svg>` : `<svg width=\"30\" height=\"30\" viewBox=\"0 0 30 30\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\"><circle cx=\"15\" cy=\"15\" r=\"13\" fill=\"#2563eb\" stroke=\"#1e40af\" stroke-width=\"2\"/><text x=\"15\" y=\"19\" text-anchor=\"middle\" fill=\"white\" font-family=\"Arial, sans-serif\" font-size=\"10\" font-weight=\"bold\">1</text></svg>`),\n            scaledSize: isSelected ? new window.google.maps.Size(44, 44) : new window.google.maps.Size(30, 30),\n            anchor: isSelected ? new window.google.maps.Point(22, 22) : new window.google.maps.Point(15, 15)\n          }\n        });\n        if (onMarkerClick) {\n          marker.addListener('click', () => {\n            console.log(`개별 마커 클릭됨: ${property.id} - ${property.title}`);\n            isClusterClicking.current = true;\n            if (setSelectedMarkerId) setSelectedMarkerId(property.id);\n            if (setSelectedClusterId) setSelectedClusterId('');\n            onMarkerClick(property);\n            setTimeout(() => {\n              isClusterClicking.current = false;\n            }, 1500);\n          });\n        }\n        markersRef.current.push(marker);\n      });\n    } else {\n      const clusters = clusterMarkers([], currentZoom);\n      clusters.forEach((cluster, clusterIndex) => {\n        if (cluster.properties.length === 1) {\n          const property = cluster.properties[0];\n          const isSelected = selectedMarkerId === property.id;\n          const marker = new window.google.maps.Marker({\n            position: property.location,\n            map: mapInstance.current,\n            title: property.title,\n            icon: {\n              url: 'data:image/svg+xml;charset=UTF-8,' + encodeURIComponent(isSelected ? `<svg width=\"44\" height=\"44\" viewBox=\"0 0 44 44\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\"><circle cx=\"22\" cy=\"22\" r=\"20\" fill=\"white\" stroke=\"#111\" stroke-width=\"3\"/><text x=\"22\" y=\"29\" text-anchor=\"middle\" fill=\"#111\" font-family=\"Arial, sans-serif\" font-size=\"16\" font-weight=\"bold\">1</text></svg>` : `<svg width=\"30\" height=\"30\" viewBox=\"0 0 30 30\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\"><circle cx=\"15\" cy=\"15\" r=\"13\" fill=\"#2563eb\" stroke=\"#1e40af\" stroke-width=\"2\"/><text x=\"15\" y=\"19\" text-anchor=\"middle\" fill=\"white\" font-family=\"Arial, sans-serif\" font-size=\"10\" font-weight=\"bold\">1</text></svg>`),\n              scaledSize: isSelected ? new window.google.maps.Size(44, 44) : new window.google.maps.Size(30, 30),\n              anchor: isSelected ? new window.google.maps.Point(22, 22) : new window.google.maps.Point(15, 15)\n            }\n          });\n          if (onMarkerClick) {\n            marker.addListener('click', () => {\n              console.log(`클러스터링된 단일 마커 클릭됨: ${property.id} - ${property.title}`);\n              isClusterClicking.current = true;\n              if (setSelectedMarkerId) setSelectedMarkerId(property.id);\n              if (setSelectedClusterId) setSelectedClusterId('');\n              onMarkerClick(property);\n              setTimeout(() => {\n                isClusterClicking.current = false;\n              }, 1500);\n            });\n          }\n          markersRef.current.push(marker);\n        } else {\n          const clusterMarker = createClusterMarker(cluster.properties, cluster.center);\n          markersRef.current.push(clusterMarker);\n        }\n      });\n    }\n  };\n  const updateMarkers = () => {\n    if (!mapInstance.current) return;\n    markersRef.current.forEach(marker => {\n      if (marker && marker.setMap) {\n        marker.setMap(null);\n      }\n    });\n    markersRef.current = [];\n    createMarkers();\n  };\n  const checkAndInit = useCallback(() => {\n    console.log('Google Maps API 확인 중...');\n    if (window.google && window.google.maps) {\n      console.log('Google Maps API 로드됨, 지도 초기화 시도');\n      if (initMap()) {\n        console.log('지도 초기화 성공');\n        return;\n      }\n    } else {\n      console.log('Google Maps API 아직 로드되지 않음, 재시도...');\n    }\n    setTimeout(checkAndInit, 100);\n  }, [initMap]);\n  useEffect(() => {\n    checkAndInit();\n    return () => {\n      markersRef.current.forEach(marker => {\n        if (marker && marker.setMap) {\n          marker.setMap(null);\n        }\n      });\n      markersRef.current = [];\n    };\n  }, [checkAndInit]);\n  return /*#__PURE__*/_jsxDEV(MapContainer, {\n    children: !isMapLoaded && mapError ? /*#__PURE__*/_jsxDEV(FallbackMap, {\n      children: /*#__PURE__*/_jsxDEV(MapError, {\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          style: {\n            marginBottom: '1rem',\n            fontSize: '1.5rem'\n          },\n          children: \"\\uD83D\\uDDFA\\uFE0F\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 419,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          style: {\n            marginBottom: '0.5rem',\n            fontWeight: 'bold'\n          },\n          children: \"\\uC9C0\\uB3C4 \\uB85C\\uB4DC \\uC2E4\\uD328\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 420,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          style: {\n            fontSize: '0.9rem',\n            color: '#6b7280'\n          },\n          children: mapError\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 421,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => {\n            setMapError(null);\n            setIsMapLoaded(false);\n            checkAndInit();\n          },\n          style: {\n            marginTop: '1rem',\n            padding: '0.5rem 1rem',\n            background: '#2563eb',\n            color: 'white',\n            border: 'none',\n            borderRadius: '4px',\n            cursor: 'pointer'\n          },\n          children: \"\\uB2E4\\uC2DC \\uC2DC\\uB3C4\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 422,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 418,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 417,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n      ref: mapRef,\n      style: {\n        width: '100%',\n        height: '100%'\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 443,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 415,\n    columnNumber: 5\n  }, this);\n};\n_s(GoogleMap, \"JtThE1uu+OL2mEiW22D8w6Z14Dk=\");\n_c4 = GoogleMap;\nexport default GoogleMap;\nvar _c, _c2, _c3, _c4;\n$RefreshReg$(_c, \"MapContainer\");\n$RefreshReg$(_c2, \"FallbackMap\");\n$RefreshReg$(_c3, \"MapError\");\n$RefreshReg$(_c4, \"GoogleMap\");","map":{"version":3,"names":["React","useEffect","useRef","useState","useCallback","styled","jsxDEV","_jsxDEV","MapContainer","div","_c","FallbackMap","_c2","MapError","_c3","GoogleMap","properties","onMarkerClick","onClusterClick","selectedMarkerId","setSelectedMarkerId","selectedClusterId","setSelectedClusterId","_s","mapRef","mapInstance","markersRef","isClusterClicking","isMapLoaded","setIsMapLoaded","mapError","setMapError","createClusterMarker","center","clusterId","map","p","id","join","isSelected","marker","window","google","maps","Marker","position","current","icon","url","encodeURIComponent","length","scaledSize","Size","anchor","Point","addListener","console","log","setTimeout","clusterMarkers","markers","zoom","clusters","clusterRadius","forEach","property","index","addedToCluster","cluster","distance","Math","sqrt","pow","location","lat","lng","push","reduce","sum","initMap","_window$google","updateMarkers","setMap","Map","mapTypeId","MapTypeId","ROADMAP","zoomControl","mapTypeControl","scaleControl","streetViewControl","rotateControl","fullscreenControl","gestureHandling","backgroundColor","disableDefaultUI","maxZoom","minZoom","tilt","zoomControlOptions","ControlPosition","RIGHT_TOP","disableDoubleClickZoom","restriction","latLngBounds","north","south","east","west","strictBounds","createMarkers","error","currentZoom","getZoom","title","clusterIndex","clusterMarker","checkAndInit","children","style","marginBottom","fontSize","fileName","_jsxFileName","lineNumber","columnNumber","fontWeight","color","onClick","marginTop","padding","background","border","borderRadius","cursor","ref","width","height","_c4","$RefreshReg$"],"sources":["C:/Users/user/지도기반사이트만들기/src/components/GoogleMap.tsx"],"sourcesContent":["import React, { useEffect, useRef, useState, useCallback } from 'react';\nimport styled from 'styled-components';\nimport { Property } from '../types';\n\nconst MapContainer = styled.div`\n  width: 100%;\n  height: 100%;\n  min-height: 400px;\n  position: relative;\n  overflow: visible;\n  background: #f0f0f0;\n`;\n\nconst FallbackMap = styled.div`\n  width: 100%;\n  height: 100%;\n  background: linear-gradient(45deg, #e5e7eb 25%, transparent 25%), \n              linear-gradient(-45deg, #e5e7eb 25%, transparent 25%), \n              linear-gradient(45deg, transparent 75%, #e5e7eb 75%), \n              linear-gradient(-45deg, transparent 75%, #e5e7eb 75%);\n  background-size: 20px 20px;\n  background-position: 0 0, 0 10px, 10px -10px, -10px 0px;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  color: #6b7280;\n  font-size: 1.2rem;\n  font-weight: 500;\n`;\n\nconst MapError = styled.div`\n  text-align: center;\n  padding: 2rem;\n  background: white;\n  border-radius: 8px;\n  box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);\n  max-width: 400px;\n`;\n\ninterface GoogleMapProps {\n  properties: Property[];\n  onMarkerClick?: (property: Property) => void;\n  onClusterClick?: (properties: Property[]) => void;\n  selectedMarkerId?: string | null;\n  setSelectedMarkerId?: (id: string) => void;\n  selectedClusterId?: string | null;\n  setSelectedClusterId?: (id: string) => void;\n}\n\ndeclare global {\n  interface Window {\n    google: any;\n  }\n}\n\nconst GoogleMap: React.FC<GoogleMapProps> = ({\n  properties,\n  onMarkerClick,\n  onClusterClick,\n  selectedMarkerId,\n  setSelectedMarkerId,\n  selectedClusterId,\n  setSelectedClusterId\n}) => {\n  const mapRef = useRef<HTMLDivElement>(null);\n  const mapInstance = useRef<any>(null);\n  const markersRef = useRef<any[]>([]);\n  const isClusterClicking = useRef(false);\n  const [isMapLoaded, setIsMapLoaded] = useState(false);\n  const [mapError, setMapError] = useState<string | null>(null);\n\n  // 마커 클러스터링 함수\n  const createClusterMarker = useCallback((properties: Property[], center: { lat: number; lng: number }) => {\n    const clusterId = properties.map(p => p.id).join(',');\n    const isSelected = selectedClusterId === clusterId;\n    \n    const marker = new window.google.maps.Marker({\n      position: center,\n      map: mapInstance.current,\n      icon: {\n        url: 'data:image/svg+xml;charset=UTF-8,' + encodeURIComponent(\n          isSelected\n            ? `<svg width=\"44\" height=\"44\" viewBox=\"0 0 44 44\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n                <circle cx=\"22\" cy=\"22\" r=\"20\" fill=\"white\" stroke=\"#111\" stroke-width=\"3\"/>\n                <text x=\"22\" y=\"26\" text-anchor=\"middle\" fill=\"#111\" font-family=\"Arial, sans-serif\" font-size=\"14\" font-weight=\"bold\">${properties.length}</text>\n              </svg>`\n            : `<svg width=\"40\" height=\"40\" viewBox=\"0 0 40 40\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n                <circle cx=\"20\" cy=\"20\" r=\"18\" fill=\"#2563eb\" stroke=\"#1e40af\" stroke-width=\"3\"/>\n                <text x=\"20\" y=\"26\" text-anchor=\"middle\" fill=\"white\" font-family=\"Arial, sans-serif\" font-size=\"14\" font-weight=\"bold\">${properties.length}</text>\n              </svg>`\n        ),\n        scaledSize: isSelected\n          ? new window.google.maps.Size(44, 44)\n          : new window.google.maps.Size(40, 40),\n        anchor: isSelected\n          ? new window.google.maps.Point(22, 22)\n          : new window.google.maps.Point(20, 20)\n      }\n    });\n\n    marker.addListener('click', () => {\n      console.log(`클러스터 클릭: ${properties.length}개 매물`);\n      \n      isClusterClicking.current = true;\n      \n      if (properties.length === 1) {\n        if (onMarkerClick) {\n          onMarkerClick(properties[0]);\n        }\n      } else {\n        if (onClusterClick) {\n          onClusterClick(properties);\n        }\n      }\n      \n      setTimeout(() => {\n        isClusterClicking.current = false;\n      }, 1500);\n    });\n\n    return marker;\n  }, [onMarkerClick, onClusterClick, selectedClusterId]);\n\n  // 마커 클러스터링 로직\n  const clusterMarkers = (markers: any[], zoom: number) => {\n    const clusters: { center: { lat: number; lng: number }; properties: Property[] }[] = [];\n    \n    let clusterRadius: number;\n    if (zoom < 8) {\n      clusterRadius = 0.05;\n    } else if (zoom < 10) {\n      clusterRadius = 0.02;\n    } else if (zoom < 12) {\n      clusterRadius = 0.01;\n    } else if (zoom < 14) {\n      clusterRadius = 0.005;\n    } else if (zoom < 16) {\n      clusterRadius = 0.002;\n    } else if (zoom < 18) {\n      clusterRadius = 0.001;\n    } else {\n      clusterRadius = 0.00001;\n    }\n\n    properties.forEach((property, index) => {\n      let addedToCluster = false;\n      \n      for (const cluster of clusters) {\n        const distance = Math.sqrt(\n          Math.pow(property.location.lat - cluster.center.lat, 2) +\n          Math.pow(property.location.lng - cluster.center.lng, 2)\n        );\n        \n        if (distance < clusterRadius) {\n          cluster.properties.push(property);\n          cluster.center = {\n            lat: cluster.properties.reduce((sum, p) => sum + p.location.lat, 0) / cluster.properties.length,\n            lng: cluster.properties.reduce((sum, p) => sum + p.location.lng, 0) / cluster.properties.length\n          };\n          addedToCluster = true;\n          break;\n        }\n      }\n      \n      if (!addedToCluster) {\n        clusters.push({\n          center: property.location,\n          properties: [property]\n        });\n      }\n    });\n\n    return clusters;\n  };\n\n  // 지도 초기화\n  const initMap = useCallback(() => {\n    console.log('지도 초기화 시도...');\n    console.log('mapRef.current:', mapRef.current);\n    console.log('window.google:', window.google);\n    console.log('window.google.maps:', window.google?.maps);\n    \n    if (!mapRef.current) {\n      console.log('mapRef가 없음');\n      return false;\n    }\n    \n    if (!window.google) {\n      console.log('Google Maps API가 로드되지 않음');\n      return false;\n    }\n    \n    if (!window.google.maps) {\n      console.log('Google Maps 객체가 없음');\n      return false;\n    }\n\n    if (mapInstance.current) {\n      console.log('기존 지도 인스턴스 업데이트');\n      updateMarkers();\n      return true;\n    }\n\n    try {\n      console.log('새 지도 인스턴스 생성 시작...');\n      markersRef.current.forEach(marker => {\n        if (marker && marker.setMap) {\n          marker.setMap(null);\n        }\n      });\n      markersRef.current = [];\n\n      const map = new window.google.maps.Map(mapRef.current, {\n        center: { lat: 37.5665, lng: 126.9780 },\n        zoom: 10,\n        mapTypeId: window.google.maps.MapTypeId.ROADMAP,\n        zoomControl: true,\n        mapTypeControl: false,\n        scaleControl: false,\n        streetViewControl: false,\n        rotateControl: false,\n        fullscreenControl: false,\n        gestureHandling: 'greedy',\n        backgroundColor: '#f0f0f0',\n        disableDefaultUI: false,\n        maxZoom: 20,\n        minZoom: 8,\n        tilt: 0,\n        zoomControlOptions: {\n          position: window.google.maps.ControlPosition.RIGHT_TOP\n        },\n        disableDoubleClickZoom: false,\n        restriction: {\n          latLngBounds: {\n            north: 38.0,\n            south: 34.5,\n            east: 131.0,\n            west: 125.0\n          },\n          strictBounds: false\n        }\n      });\n\n      console.log('지도 인스턴스 생성 완료:', map);\n      mapInstance.current = map;\n      createMarkers();\n\n      map.addListener('zoom_changed', () => {\n        if (isClusterClicking.current) {\n          return;\n        }\n        \n        markersRef.current.forEach(marker => {\n          if (marker && marker.setMap) {\n            marker.setMap(null);\n          }\n        });\n        markersRef.current = [];\n\n        setTimeout(() => {\n          if (!isClusterClicking.current) {\n            createMarkers();\n          }\n        }, 300);\n      });\n\n      console.log('지도 초기화 완료');\n      setIsMapLoaded(true);\n      setMapError(null);\n      return true;\n    } catch (error) {\n      console.error('지도 초기화 오류:', error);\n      setMapError('지도를 로드할 수 없습니다. Google Maps API를 확인해주세요.');\n      setIsMapLoaded(false);\n      return false;\n    }\n  }, [createMarkers, updateMarkers]);\n\n  const createMarkers = () => {\n    if (!mapInstance.current) return;\n    \n    const currentZoom = mapInstance.current.getZoom();\n    \n    if (currentZoom >= 18) {\n      properties.forEach((property, index) => {\n        const isSelected = selectedMarkerId === property.id;\n        const marker = new window.google.maps.Marker({\n          position: property.location,\n          map: mapInstance.current,\n          title: property.title,\n          icon: {\n            url: 'data:image/svg+xml;charset=UTF-8,' + encodeURIComponent(\n              isSelected\n                ? `<svg width=\"44\" height=\"44\" viewBox=\"0 0 44 44\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\"><circle cx=\"22\" cy=\"22\" r=\"20\" fill=\"white\" stroke=\"#111\" stroke-width=\"3\"/><text x=\"22\" y=\"29\" text-anchor=\"middle\" fill=\"#111\" font-family=\"Arial, sans-serif\" font-size=\"16\" font-weight=\"bold\">1</text></svg>`\n                : `<svg width=\"30\" height=\"30\" viewBox=\"0 0 30 30\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\"><circle cx=\"15\" cy=\"15\" r=\"13\" fill=\"#2563eb\" stroke=\"#1e40af\" stroke-width=\"2\"/><text x=\"15\" y=\"19\" text-anchor=\"middle\" fill=\"white\" font-family=\"Arial, sans-serif\" font-size=\"10\" font-weight=\"bold\">1</text></svg>`\n            ),\n            scaledSize: isSelected\n              ? new window.google.maps.Size(44, 44)\n              : new window.google.maps.Size(30, 30),\n            anchor: isSelected\n              ? new window.google.maps.Point(22, 22)\n              : new window.google.maps.Point(15, 15)\n          }\n        });\n\n        if (onMarkerClick) {\n          marker.addListener('click', () => {\n            console.log(`개별 마커 클릭됨: ${property.id} - ${property.title}`);\n            isClusterClicking.current = true;\n            \n            if (setSelectedMarkerId) setSelectedMarkerId(property.id);\n            if (setSelectedClusterId) setSelectedClusterId('');\n            onMarkerClick(property);\n            \n            setTimeout(() => {\n              isClusterClicking.current = false;\n            }, 1500);\n          });\n        }\n\n        markersRef.current.push(marker);\n      });\n    } else {\n      const clusters = clusterMarkers([], currentZoom);\n\n      clusters.forEach((cluster, clusterIndex) => {\n        if (cluster.properties.length === 1) {\n          const property = cluster.properties[0];\n          const isSelected = selectedMarkerId === property.id;\n          const marker = new window.google.maps.Marker({\n            position: property.location,\n            map: mapInstance.current,\n            title: property.title,\n            icon: {\n              url: 'data:image/svg+xml;charset=UTF-8,' + encodeURIComponent(\n                isSelected\n                  ? `<svg width=\"44\" height=\"44\" viewBox=\"0 0 44 44\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\"><circle cx=\"22\" cy=\"22\" r=\"20\" fill=\"white\" stroke=\"#111\" stroke-width=\"3\"/><text x=\"22\" y=\"29\" text-anchor=\"middle\" fill=\"#111\" font-family=\"Arial, sans-serif\" font-size=\"16\" font-weight=\"bold\">1</text></svg>`\n                  : `<svg width=\"30\" height=\"30\" viewBox=\"0 0 30 30\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\"><circle cx=\"15\" cy=\"15\" r=\"13\" fill=\"#2563eb\" stroke=\"#1e40af\" stroke-width=\"2\"/><text x=\"15\" y=\"19\" text-anchor=\"middle\" fill=\"white\" font-family=\"Arial, sans-serif\" font-size=\"10\" font-weight=\"bold\">1</text></svg>`\n              ),\n              scaledSize: isSelected\n                ? new window.google.maps.Size(44, 44)\n                : new window.google.maps.Size(30, 30),\n              anchor: isSelected\n                ? new window.google.maps.Point(22, 22)\n                : new window.google.maps.Point(15, 15)\n            }\n          });\n\n          if (onMarkerClick) {\n            marker.addListener('click', () => {\n              console.log(`클러스터링된 단일 마커 클릭됨: ${property.id} - ${property.title}`);\n              isClusterClicking.current = true;\n              \n              if (setSelectedMarkerId) setSelectedMarkerId(property.id);\n              if (setSelectedClusterId) setSelectedClusterId('');\n              onMarkerClick(property);\n              \n              setTimeout(() => {\n                isClusterClicking.current = false;\n              }, 1500);\n            });\n          }\n\n          markersRef.current.push(marker);\n        } else {\n          const clusterMarker = createClusterMarker(cluster.properties, cluster.center);\n          markersRef.current.push(clusterMarker);\n        }\n      });\n    }\n  };\n\n  const updateMarkers = () => {\n    if (!mapInstance.current) return;\n    \n    markersRef.current.forEach(marker => {\n      if (marker && marker.setMap) {\n        marker.setMap(null);\n      }\n    });\n    markersRef.current = [];\n\n    createMarkers();\n  };\n\n  const checkAndInit = useCallback(() => {\n    console.log('Google Maps API 확인 중...');\n    if (window.google && window.google.maps) {\n      console.log('Google Maps API 로드됨, 지도 초기화 시도');\n      if (initMap()) {\n        console.log('지도 초기화 성공');\n        return;\n      }\n    } else {\n      console.log('Google Maps API 아직 로드되지 않음, 재시도...');\n    }\n    \n    setTimeout(checkAndInit, 100);\n  }, [initMap]);\n\n  useEffect(() => {\n    checkAndInit();\n\n    return () => {\n      markersRef.current.forEach(marker => {\n        if (marker && marker.setMap) {\n          marker.setMap(null);\n        }\n      });\n      markersRef.current = [];\n    };\n  }, [checkAndInit]);\n\n  return (\n    <MapContainer>\n      {!isMapLoaded && mapError ? (\n        <FallbackMap>\n          <MapError>\n            <div style={{ marginBottom: '1rem', fontSize: '1.5rem' }}>🗺️</div>\n            <div style={{ marginBottom: '0.5rem', fontWeight: 'bold' }}>지도 로드 실패</div>\n            <div style={{ fontSize: '0.9rem', color: '#6b7280' }}>{mapError}</div>\n            <button \n              onClick={() => {\n                setMapError(null);\n                setIsMapLoaded(false);\n                checkAndInit();\n              }}\n              style={{\n                marginTop: '1rem',\n                padding: '0.5rem 1rem',\n                background: '#2563eb',\n                color: 'white',\n                border: 'none',\n                borderRadius: '4px',\n                cursor: 'pointer'\n              }}\n            >\n              다시 시도\n            </button>\n          </MapError>\n        </FallbackMap>\n      ) : (\n        <div ref={mapRef} style={{ width: '100%', height: '100%' }} />\n      )}\n    </MapContainer>\n  );\n};\n\nexport default GoogleMap;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}