{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\user\\\\\\uC9C0\\uB3C4\\uAE30\\uBC18\\uC0AC\\uC774\\uD2B8\\uB9CC\\uB4E4\\uAE30\\\\src\\\\components\\\\GoogleMap.tsx\",\n  _s = $RefreshSig$();\nimport React from 'react';\nimport styled from 'styled-components';\nimport { useState, useRef } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst MapContainer = styled.div`\n  width: 100%;\n  height: 100%;\n  min-height: 400px;\n  background: #f0f0f0;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  color: #666;\n  font-size: 1rem;\n  position: relative;\n  overflow: visible;\n`;\n_c = MapContainer;\nconst MapGrid = styled.div`\n  width: 100%;\n  height: 100%;\n  background-image: \n    linear-gradient(rgba(255,255,255,0.1) 1px, transparent 1px),\n    linear-gradient(90deg, rgba(255,255,255,0.1) 1px, transparent 1px);\n  background-size: 50px 50px;\n  position: relative;\n`;\n_c2 = MapGrid;\nconst Marker = styled.div`\n  position: absolute;\n  width: ${props => props.isCluster ? '40px' : '30px'};\n  height: ${props => props.isCluster ? '40px' : '30px'};\n  background: ${props => props.isSelected ? '#dc2626' : props.isCluster ? '#2563eb' : '#10b981'};\n  border: 2px solid white;\n  border-radius: 50%;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  color: white;\n  font-weight: bold;\n  font-size: ${props => props.isCluster ? '12px' : '10px'};\n  cursor: pointer;\n  transform: translate(-50%, -50%);\n  box-shadow: 0 2px 8px rgba(0,0,0,0.3);\n  transition: all 0.2s ease;\n\n  &:hover {\n    transform: translate(-50%, -50%) scale(1.1);\n    box-shadow: 0 4px 12px rgba(0,0,0,0.4);\n  }\n`;\n_c3 = Marker;\nconst GoogleMap = ({\n  properties,\n  onMarkerClick,\n  onClusterClick,\n  selectedMarkerId,\n  setSelectedMarkerId,\n  selectedClusterId,\n  setSelectedClusterId\n}) => {\n  _s();\n  const mapRef = useRef(null);\n  const [zoom] = useState(12);\n\n  // 좌표를 화면 좌표로 변환하는 함수\n  const latLngToPixel = (lat, lng) => {\n    var _mapRef$current, _mapRef$current2;\n    const mapWidth = ((_mapRef$current = mapRef.current) === null || _mapRef$current === void 0 ? void 0 : _mapRef$current.offsetWidth) || 800;\n    const mapHeight = ((_mapRef$current2 = mapRef.current) === null || _mapRef$current2 === void 0 ? void 0 : _mapRef$current2.offsetHeight) || 600;\n\n    // 간단한 좌표 변환 (실제로는 더 복잡한 계산이 필요)\n    const x = (lng + 180) / 360 * mapWidth;\n    const y = (90 - lat) / 180 * mapHeight;\n    return {\n      x,\n      y\n    };\n  };\n\n  // 클러스터링 로직\n  const createClusters = () => {\n    const clusters = [];\n    const clusterDistance = zoom < 15 ? 100 : 50; // 줌 레벨에 따른 클러스터 거리\n\n    properties.forEach(property => {\n      let addedToCluster = false;\n      for (const cluster of clusters) {\n        const distance = Math.sqrt(Math.pow(property.location.lat - cluster.center.lat, 2) + Math.pow(property.location.lng - cluster.center.lng, 2));\n        if (distance * 100000 < clusterDistance) {\n          // 거리 계산\n          cluster.properties.push(property);\n          // 클러스터 중심 업데이트\n          cluster.center.lat = cluster.properties.reduce((sum, p) => sum + p.location.lat, 0) / cluster.properties.length;\n          cluster.center.lng = cluster.properties.reduce((sum, p) => sum + p.location.lng, 0) / cluster.properties.length;\n          addedToCluster = true;\n          break;\n        }\n      }\n      if (!addedToCluster) {\n        clusters.push({\n          center: property.location,\n          properties: [property]\n        });\n      }\n    });\n    return clusters;\n  };\n  const handleMarkerClick = property => {\n    if (onMarkerClick) {\n      onMarkerClick(property);\n    }\n  };\n  const handleClusterClick = properties => {\n    if (onClusterClick) {\n      onClusterClick(properties);\n    }\n  };\n  const clusters = createClusters();\n  return /*#__PURE__*/_jsxDEV(MapContainer, {\n    ref: mapRef,\n    children: /*#__PURE__*/_jsxDEV(MapGrid, {\n      children: clusters.map((cluster, index) => {\n        const pixelPos = latLngToPixel(cluster.center.lat, cluster.center.lng);\n        const isSelected = cluster.properties.length === 1 ? selectedMarkerId === cluster.properties[0].id : selectedClusterId === cluster.properties.map(p => p.id).join(',');\n        return /*#__PURE__*/_jsxDEV(Marker, {\n          isSelected: isSelected,\n          isCluster: cluster.properties.length > 1,\n          style: {\n            left: `${pixelPos.x}px`,\n            top: `${pixelPos.y}px`\n          },\n          onClick: () => {\n            if (cluster.properties.length === 1) {\n              handleMarkerClick(cluster.properties[0]);\n            } else {\n              handleClusterClick(cluster.properties);\n            }\n          },\n          children: cluster.properties.length > 1 ? cluster.properties.length : ''\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 147,\n          columnNumber: 13\n        }, this);\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 139,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 138,\n    columnNumber: 5\n  }, this);\n};\n_s(GoogleMap, \"NKkI+P4VkAuP7jsQPcqe0ktz3C8=\");\n_c4 = GoogleMap;\nexport default GoogleMap;\nvar _c, _c2, _c3, _c4;\n$RefreshReg$(_c, \"MapContainer\");\n$RefreshReg$(_c2, \"MapGrid\");\n$RefreshReg$(_c3, \"Marker\");\n$RefreshReg$(_c4, \"GoogleMap\");","map":{"version":3,"names":["React","styled","useState","useRef","jsxDEV","_jsxDEV","MapContainer","div","_c","MapGrid","_c2","Marker","props","isCluster","isSelected","_c3","GoogleMap","properties","onMarkerClick","onClusterClick","selectedMarkerId","setSelectedMarkerId","selectedClusterId","setSelectedClusterId","_s","mapRef","zoom","latLngToPixel","lat","lng","_mapRef$current","_mapRef$current2","mapWidth","current","offsetWidth","mapHeight","offsetHeight","x","y","createClusters","clusters","clusterDistance","forEach","property","addedToCluster","cluster","distance","Math","sqrt","pow","location","center","push","reduce","sum","p","length","handleMarkerClick","handleClusterClick","ref","children","map","index","pixelPos","id","join","style","left","top","onClick","fileName","_jsxFileName","lineNumber","columnNumber","_c4","$RefreshReg$"],"sources":["C:/Users/user/지도기반사이트만들기/src/components/GoogleMap.tsx"],"sourcesContent":["import React from 'react';\nimport styled from 'styled-components';\nimport { Property } from '../types';\nimport { useState, useRef } from 'react';\n\nconst MapContainer = styled.div`\n  width: 100%;\n  height: 100%;\n  min-height: 400px;\n  background: #f0f0f0;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  color: #666;\n  font-size: 1rem;\n  position: relative;\n  overflow: visible;\n`;\n\nconst MapGrid = styled.div`\n  width: 100%;\n  height: 100%;\n  background-image: \n    linear-gradient(rgba(255,255,255,0.1) 1px, transparent 1px),\n    linear-gradient(90deg, rgba(255,255,255,0.1) 1px, transparent 1px);\n  background-size: 50px 50px;\n  position: relative;\n`;\n\nconst Marker = styled.div<{ isSelected: boolean; isCluster: boolean }>`\n  position: absolute;\n  width: ${props => props.isCluster ? '40px' : '30px'};\n  height: ${props => props.isCluster ? '40px' : '30px'};\n  background: ${props => props.isSelected ? '#dc2626' : props.isCluster ? '#2563eb' : '#10b981'};\n  border: 2px solid white;\n  border-radius: 50%;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  color: white;\n  font-weight: bold;\n  font-size: ${props => props.isCluster ? '12px' : '10px'};\n  cursor: pointer;\n  transform: translate(-50%, -50%);\n  box-shadow: 0 2px 8px rgba(0,0,0,0.3);\n  transition: all 0.2s ease;\n\n  &:hover {\n    transform: translate(-50%, -50%) scale(1.1);\n    box-shadow: 0 4px 12px rgba(0,0,0,0.4);\n  }\n`;\n\ninterface GoogleMapProps {\n  properties: Property[];\n  onMarkerClick?: (property: Property) => void;\n  onClusterClick?: (properties: Property[]) => void;\n  selectedMarkerId?: string | null;\n  setSelectedMarkerId?: (id: string) => void;\n  selectedClusterId?: string | null;\n  setSelectedClusterId?: (id: string) => void;\n}\n\nconst GoogleMap: React.FC<GoogleMapProps> = ({\n  properties,\n  onMarkerClick,\n  onClusterClick,\n  selectedMarkerId,\n  setSelectedMarkerId,\n  selectedClusterId,\n  setSelectedClusterId\n}) => {\n  const mapRef = useRef<HTMLDivElement>(null);\n  const [zoom] = useState(12);\n\n  // 좌표를 화면 좌표로 변환하는 함수\n  const latLngToPixel = (lat: number, lng: number) => {\n    const mapWidth = mapRef.current?.offsetWidth || 800;\n    const mapHeight = mapRef.current?.offsetHeight || 600;\n    \n    // 간단한 좌표 변환 (실제로는 더 복잡한 계산이 필요)\n    const x = ((lng + 180) / 360) * mapWidth;\n    const y = ((90 - lat) / 180) * mapHeight;\n    \n    return { x, y };\n  };\n\n  // 클러스터링 로직\n  const createClusters = () => {\n    const clusters: { center: { lat: number; lng: number }; properties: Property[] }[] = [];\n    const clusterDistance = zoom < 15 ? 100 : 50; // 줌 레벨에 따른 클러스터 거리\n\n    properties.forEach(property => {\n      let addedToCluster = false;\n      \n      for (const cluster of clusters) {\n        const distance = Math.sqrt(\n          Math.pow(property.location.lat - cluster.center.lat, 2) +\n          Math.pow(property.location.lng - cluster.center.lng, 2)\n        );\n        \n        if (distance * 100000 < clusterDistance) { // 거리 계산\n          cluster.properties.push(property);\n          // 클러스터 중심 업데이트\n          cluster.center.lat = cluster.properties.reduce((sum, p) => sum + p.location.lat, 0) / cluster.properties.length;\n          cluster.center.lng = cluster.properties.reduce((sum, p) => sum + p.location.lng, 0) / cluster.properties.length;\n          addedToCluster = true;\n          break;\n        }\n      }\n      \n      if (!addedToCluster) {\n        clusters.push({\n          center: property.location,\n          properties: [property]\n        });\n      }\n    });\n\n    return clusters;\n  };\n\n  const handleMarkerClick = (property: Property) => {\n    if (onMarkerClick) {\n      onMarkerClick(property);\n    }\n  };\n\n  const handleClusterClick = (properties: Property[]) => {\n    if (onClusterClick) {\n      onClusterClick(properties);\n    }\n  };\n\n  const clusters = createClusters();\n\n  return (\n    <MapContainer ref={mapRef}>\n      <MapGrid>\n        {clusters.map((cluster, index) => {\n          const pixelPos = latLngToPixel(cluster.center.lat, cluster.center.lng);\n          const isSelected = cluster.properties.length === 1 \n            ? selectedMarkerId === cluster.properties[0].id\n            : selectedClusterId === cluster.properties.map(p => p.id).join(',');\n          \n          return (\n            <Marker\n              key={index}\n              isSelected={isSelected}\n              isCluster={cluster.properties.length > 1}\n              style={{\n                left: `${pixelPos.x}px`,\n                top: `${pixelPos.y}px`\n              }}\n              onClick={() => {\n                if (cluster.properties.length === 1) {\n                  handleMarkerClick(cluster.properties[0]);\n                } else {\n                  handleClusterClick(cluster.properties);\n                }\n              }}\n            >\n              {cluster.properties.length > 1 ? cluster.properties.length : ''}\n            </Marker>\n          );\n        })}\n      </MapGrid>\n    </MapContainer>\n  );\n};\n\nexport default GoogleMap;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}