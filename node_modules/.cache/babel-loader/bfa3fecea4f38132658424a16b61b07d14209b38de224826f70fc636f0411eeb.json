{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\user\\\\\\uC9C0\\uB3C4\\uAE30\\uBC18\\uC0AC\\uC774\\uD2B8\\uB9CC\\uB4E4\\uAE30\\\\src\\\\components\\\\GoogleMap.tsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useRef } from 'react';\nimport styled from 'styled-components';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst MapContainer = styled.div`\n  width: 100%;\n  height: 100%;\n  min-height: 400px;\n  background: #f0f0f0;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  color: #666;\n  font-size: 1rem;\n  position: relative;\n  overflow: visible;\n\n  /* 마름모형 기호 완전 제거 */\n  .gmnoprint {\n    display: none !important;\n  }\n  \n  /* 지도 타입 컨트롤 완전 제거 */\n  .gm-style-mtc {\n    display: none !important;\n  }\n  \n  /* 모든 불필요한 컨트롤 제거 */\n  .gm-style button[title*=\"Map\"] {\n    display: none !important;\n  }\n`;\n_c = MapContainer;\nconst GoogleMap = ({\n  properties,\n  onMarkerClick,\n  onClusterClick,\n  center = {\n    lat: 37.5665,\n    lng: 126.9780\n  },\n  // 서울 중심\n  zoom = 10,\n  // 서울 중심에 맞는 줌 레벨\n  selectedMarkerId,\n  setSelectedMarkerId\n}) => {\n  _s();\n  const mapRef = useRef(null);\n  const mapInstance = useRef(null);\n  const markersRef = useRef([]);\n  const isClusterClicking = useRef(false); // 클러스터 클릭 중인지 확인하는 플래그\n\n  // 마커 클러스터링 함수\n  const createClusterMarker = (properties, center) => {\n    const marker = new window.google.maps.Marker({\n      position: center,\n      map: mapInstance.current,\n      icon: {\n        url: 'data:image/svg+xml;charset=UTF-8,' + encodeURIComponent(`\n          <svg width=\"40\" height=\"40\" viewBox=\"0 0 40 40\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n            <circle cx=\"20\" cy=\"20\" r=\"18\" fill=\"#2563eb\" stroke=\"#1e40af\" stroke-width=\"3\"/>\n            <text x=\"20\" y=\"26\" text-anchor=\"middle\" fill=\"white\" font-family=\"Arial, sans-serif\" font-size=\"14\" font-weight=\"bold\">${properties.length}</text>\n          </svg>\n        `),\n        scaledSize: new window.google.maps.Size(40, 40),\n        anchor: new window.google.maps.Point(20, 20)\n      }\n    });\n\n    // hover 효과를 위한 마커 상태 관리\n    let isHovered = false;\n\n    // 클러스터 마커 클릭 시 지도 상태 변경 없이 콜백만 실행\n    marker.addListener('click', () => {\n      console.log(`클러스터 클릭: ${properties.length}개 매물`);\n\n      // 클러스터 클릭 플래그 설정 (지도 상태 보존을 위해)\n      isClusterClicking.current = true;\n      if (properties.length === 1) {\n        // 단일 매물인 경우 해당 매물 클릭 이벤트 실행\n        if (onMarkerClick) {\n          onMarkerClick(properties[0]);\n        }\n      } else {\n        // 여러 매물인 경우 클러스터 클릭 이벤트만 실행 (지도 상태 변경 없음)\n        if (onClusterClick) {\n          onClusterClick(properties);\n        }\n      }\n\n      // 플래그를 더 오래 유지하여 줌 변경 이벤트 방지\n      setTimeout(() => {\n        isClusterClicking.current = false;\n      }, 1500);\n    });\n\n    // hover 효과 추가\n    marker.addListener('mouseover', () => {\n      isHovered = true;\n      marker.setIcon({\n        url: 'data:image/svg+xml;charset=UTF-8,' + encodeURIComponent(`\n          <svg width=\"44\" height=\"44\" viewBox=\"0 0 44 44\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n            <circle cx=\"22\" cy=\"22\" r=\"20\" fill=\"white\" stroke=\"#111\" stroke-width=\"3\"/>\n            <text x=\"22\" y=\"29\" text-anchor=\"middle\" fill=\"#111\" font-family=\"Arial, sans-serif\" font-size=\"16\" font-weight=\"bold\">${properties.length}</text>\n          </svg>\n        `),\n        scaledSize: new window.google.maps.Size(44, 44),\n        anchor: new window.google.maps.Point(22, 22)\n      });\n    });\n    marker.addListener('mouseout', () => {\n      isHovered = false;\n      marker.setIcon({\n        url: 'data:image/svg+xml;charset=UTF-8,' + encodeURIComponent(`\n          <svg width=\"40\" height=\"40\" viewBox=\"0 0 40 40\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n            <circle cx=\"20\" cy=\"20\" r=\"18\" fill=\"#2563eb\" stroke=\"#1e40af\" stroke-width=\"3\"/>\n            <text x=\"20\" y=\"26\" text-anchor=\"middle\" fill=\"white\" font-family=\"Arial, sans-serif\" font-size=\"14\" font-weight=\"bold\">${properties.length}</text>\n          </svg>\n        `),\n        scaledSize: new window.google.maps.Size(40, 40),\n        anchor: new window.google.maps.Point(20, 20)\n      });\n    });\n    return marker;\n  };\n\n  // 마커 클러스터링 로직\n  const clusterMarkers = (markers, zoom) => {\n    const clusters = [];\n\n    // 줌 레벨에 따른 클러스터 반경 조정 (더 세밀한 조정)\n    let clusterRadius;\n    if (zoom < 8) {\n      clusterRadius = 0.05; // 매우 넓은 반경 (전국 보기)\n    } else if (zoom < 10) {\n      clusterRadius = 0.02; // 넓은 반경 (시도 단위)\n    } else if (zoom < 12) {\n      clusterRadius = 0.01; // 중간 반경 (구 단위)\n    } else if (zoom < 14) {\n      clusterRadius = 0.005; // 좁은 반경 (동 단위)\n    } else if (zoom < 16) {\n      clusterRadius = 0.002; // 매우 좁은 반경 (상세 지역)\n    } else if (zoom < 18) {\n      clusterRadius = 0.001; // 개별 마커 근처\n    } else {\n      clusterRadius = 0.00001; // 거의 개별 마커 (최대 줌 시)\n    }\n    console.log(`현재 줌 레벨: ${zoom}, 클러스터 반경: ${clusterRadius}`);\n\n    // 각 매물을 클러스터에 할당\n    properties.forEach((property, index) => {\n      let addedToCluster = false;\n\n      // 기존 클러스터에 추가할 수 있는지 확인\n      for (const cluster of clusters) {\n        const distance = Math.sqrt(Math.pow(property.location.lat - cluster.center.lat, 2) + Math.pow(property.location.lng - cluster.center.lng, 2));\n        if (distance < clusterRadius) {\n          // 기존 클러스터에 추가\n          cluster.properties.push(property);\n          // 클러스터 중심 재계산\n          cluster.center = {\n            lat: cluster.properties.reduce((sum, p) => sum + p.location.lat, 0) / cluster.properties.length,\n            lng: cluster.properties.reduce((sum, p) => sum + p.location.lng, 0) / cluster.properties.length\n          };\n          addedToCluster = true;\n          console.log(`매물 ${property.id}를 기존 클러스터에 추가 (총 ${cluster.properties.length}개)`);\n          break;\n        }\n      }\n      if (!addedToCluster) {\n        // 새 클러스터 생성\n        clusters.push({\n          center: property.location,\n          properties: [property]\n        });\n        console.log(`새 클러스터 생성: 매물 ${property.id}`);\n      }\n    });\n    console.log(`총 ${clusters.length}개의 클러스터 생성됨`);\n    return clusters;\n  };\n\n  // 지도 초기화\n  useEffect(() => {\n    const initMap = () => {\n      if (!mapRef.current || !window.google || !window.google.maps) {\n        return false;\n      }\n      try {\n        // 기존 마커들 제거\n        markersRef.current.forEach(marker => {\n          if (marker && marker.setMap) {\n            marker.setMap(null);\n          }\n        });\n        markersRef.current = [];\n\n        // 지도 생성\n        const map = new window.google.maps.Map(mapRef.current, {\n          center,\n          zoom,\n          mapTypeId: window.google.maps.MapTypeId.ROADMAP,\n          zoomControl: true,\n          mapTypeControl: false,\n          scaleControl: false,\n          streetViewControl: false,\n          rotateControl: false,\n          fullscreenControl: false,\n          // Ctrl+스크롤 해제 및 화면 흔들림 방지\n          gestureHandling: 'greedy',\n          // 위성 타일 안정성 개선\n          mapTypeControlOptions: {\n            style: window.google.maps.MapTypeControlStyle.HORIZONTAL_BAR,\n            position: window.google.maps.ControlPosition.TOP_RIGHT\n          },\n          // 타일 로딩 최적화\n          backgroundColor: '#f0f0f0',\n          // 위성 타일 캐싱 개선\n          disableDefaultUI: false,\n          // 타일 로딩 성능 개선\n          maxZoom: 20,\n          minZoom: 8,\n          // 위성 타일 품질 개선\n          tilt: 0,\n          // 타일 로딩 최적화\n          zoomControlOptions: {\n            position: window.google.maps.ControlPosition.RIGHT_TOP\n          },\n          // 타일 렌더링 안정성 개선\n          disableDoubleClickZoom: false,\n          // 대한민국 본토만 표시 (주변국 최소화)\n          restriction: {\n            latLngBounds: {\n              north: 38.0,\n              // 최북단 (강원도)\n              south: 34.5,\n              // 최남단 (경남)\n              east: 131.0,\n              // 최동단 (울릉도)\n              west: 125.0 // 최서단 (서해안)\n            },\n            strictBounds: false // 경계를 넘어서도 줌 가능하도록\n          }\n        });\n        mapInstance.current = map;\n\n        // 지도 로드 완료 이벤트 추가\n        map.addListener('tilesloaded', () => {\n          console.log('지도 타일 로드 완료');\n          // setIsMapLoaded(true); // 이 부분은 사용하지 않음\n        });\n\n        // 지도 완전 로드 이벤트\n        map.addListener('idle', () => {\n          console.log('지도 완전 로드됨');\n          // setIsMapLoaded(true); // 이 부분은 사용하지 않음\n        });\n\n        // 지도가 생성되면 즉시 로드된 것으로 설정\n        // setIsMapLoaded(true); // 이 부분은 사용하지 않음\n        console.log('지도 초기화 완료');\n\n        // 마커 생성 및 클러스터링\n        const createMarkers = () => {\n          const currentZoom = map.getZoom();\n          console.log(`마커 생성 시작 - 줌 레벨: ${currentZoom}, 매물 수: ${properties.length}`);\n\n          // 줌 레벨에 따른 클러스터링 (더 세밀한 기준)\n          if (currentZoom >= 18) {\n            // 최대 줌 레벨에서는 개별 마커만 생성\n            console.log('최대 줌 레벨 - 개별 마커만 생성');\n            properties.forEach((property, index) => {\n              const isSelected = selectedMarkerId === property.id;\n              const marker = new window.google.maps.Marker({\n                position: property.location,\n                map,\n                title: property.title,\n                icon: {\n                  url: 'data:image/svg+xml;charset=UTF-8,' + encodeURIComponent(isSelected ? `<svg width=\"44\" height=\"44\" viewBox=\"0 0 44 44\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\"><circle cx=\"22\" cy=\"22\" r=\"20\" fill=\"white\" stroke=\"#111\" stroke-width=\"3\"/><text x=\"22\" y=\"29\" text-anchor=\"middle\" fill=\"#111\" font-family=\"Arial, sans-serif\" font-size=\"16\" font-weight=\"bold\">1</text></svg>` : `<svg width=\"30\" height=\"30\" viewBox=\"0 0 30 30\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\"><circle cx=\"15\" cy=\"15\" r=\"13\" fill=\"#2563eb\" stroke=\"#1e40af\" stroke-width=\"2\"/><text x=\"15\" y=\"19\" text-anchor=\"middle\" fill=\"white\" font-family=\"Arial, sans-serif\" font-size=\"10\" font-weight=\"bold\">1</text></svg>`),\n                  scaledSize: isSelected ? new window.google.maps.Size(44, 44) : new window.google.maps.Size(30, 30),\n                  anchor: isSelected ? new window.google.maps.Point(22, 22) : new window.google.maps.Point(15, 15)\n                }\n              });\n\n              // hover 효과 추가\n              marker.addListener('mouseover', () => {\n                if (!isSelected) {\n                  marker.setIcon({\n                    url: 'data:image/svg+xml;charset=UTF-8,' + encodeURIComponent(`\n                      <svg width=\"44\" height=\"44\" viewBox=\"0 0 44 44\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n                        <circle cx=\"22\" cy=\"22\" r=\"20\" fill=\"white\" stroke=\"#111\" stroke-width=\"3\"/>\n                        <text x=\"22\" y=\"29\" text-anchor=\"middle\" fill=\"#111\" font-family=\"Arial, sans-serif\" font-size=\"16\" font-weight=\"bold\">1</text>\n                      </svg>\n                    `),\n                    scaledSize: new window.google.maps.Size(44, 44),\n                    anchor: new window.google.maps.Point(22, 22)\n                  });\n                }\n              });\n              marker.addListener('mouseout', () => {\n                if (!isSelected) {\n                  marker.setIcon({\n                    url: 'data:image/svg+xml;charset=UTF-8,' + encodeURIComponent(`\n                      <svg width=\"30\" height=\"30\" viewBox=\"0 0 30 30\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n                        <circle cx=\"15\" cy=\"15\" r=\"13\" fill=\"#2563eb\" stroke=\"#1e40af\" stroke-width=\"2\"/>\n                        <text x=\"15\" y=\"19\" text-anchor=\"middle\" fill=\"white\" font-family=\"Arial, sans-serif\" font-size=\"10\" font-weight=\"bold\">1</text>\n                      </svg>\n                    `),\n                    scaledSize: new window.google.maps.Size(30, 30),\n                    anchor: new window.google.maps.Point(15, 15)\n                  });\n                }\n              });\n              if (onMarkerClick) {\n                marker.addListener('click', () => {\n                  // 클러스터 클릭 플래그 설정 (지도 상태 보존을 위해)\n                  isClusterClicking.current = true;\n                  if (setSelectedMarkerId) setSelectedMarkerId(property.id);\n                  onMarkerClick(property);\n\n                  // 플래그를 더 오래 유지하여 줌 변경 이벤트 방지\n                  setTimeout(() => {\n                    isClusterClicking.current = false;\n                  }, 1500);\n                });\n              }\n              markersRef.current.push(marker);\n              console.log(`개별 마커 생성: 매물 ${property.id} (${property.location.lat}, ${property.location.lng})`);\n            });\n          } else {\n            // 일반적인 클러스터링 로직 (줌 레벨에 따라 동적 조정)\n            const clusters = clusterMarkers([], currentZoom);\n            clusters.forEach((cluster, clusterIndex) => {\n              console.log(`클러스터 ${clusterIndex + 1}: ${cluster.properties.length}개 매물`);\n              if (cluster.properties.length === 1) {\n                const property = cluster.properties[0];\n                const isSelected = selectedMarkerId === property.id;\n                const marker = new window.google.maps.Marker({\n                  position: property.location,\n                  map,\n                  title: property.title,\n                  icon: {\n                    url: 'data:image/svg+xml;charset=UTF-8,' + encodeURIComponent(isSelected ? `<svg width=\"44\" height=\"44\" viewBox=\"0 0 44 44\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\"><circle cx=\"22\" cy=\"22\" r=\"20\" fill=\"white\" stroke=\"#111\" stroke-width=\"3\"/><text x=\"22\" y=\"29\" text-anchor=\"middle\" fill=\"#111\" font-family=\"Arial, sans-serif\" font-size=\"16\" font-weight=\"bold\">1</text></svg>` : `<svg width=\"30\" height=\"30\" viewBox=\"0 0 30 30\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\"><circle cx=\"15\" cy=\"15\" r=\"13\" fill=\"#2563eb\" stroke=\"#1e40af\" stroke-width=\"2\"/><text x=\"15\" y=\"19\" text-anchor=\"middle\" fill=\"white\" font-family=\"Arial, sans-serif\" font-size=\"10\" font-weight=\"bold\">1</text></svg>`),\n                    scaledSize: isSelected ? new window.google.maps.Size(44, 44) : new window.google.maps.Size(30, 30),\n                    anchor: isSelected ? new window.google.maps.Point(22, 22) : new window.google.maps.Point(15, 15)\n                  }\n                });\n\n                // hover 효과 추가\n                marker.addListener('mouseover', () => {\n                  if (!isSelected) {\n                    marker.setIcon({\n                      url: 'data:image/svg+xml;charset=UTF-8,' + encodeURIComponent(`\n                        <svg width=\"44\" height=\"44\" viewBox=\"0 0 44 44\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n                          <circle cx=\"22\" cy=\"22\" r=\"20\" fill=\"white\" stroke=\"#111\" stroke-width=\"3\"/>\n                          <text x=\"22\" y=\"29\" text-anchor=\"middle\" fill=\"#111\" font-family=\"Arial, sans-serif\" font-size=\"16\" font-weight=\"bold\">1</text>\n                        </svg>\n                      `),\n                      scaledSize: new window.google.maps.Size(44, 44),\n                      anchor: new window.google.maps.Point(22, 22)\n                    });\n                  }\n                });\n                marker.addListener('mouseout', () => {\n                  if (!isSelected) {\n                    marker.setIcon({\n                      url: 'data:image/svg+xml;charset=UTF-8,' + encodeURIComponent(`\n                        <svg width=\"30\" height=\"30\" viewBox=\"0 0 30 30\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n                          <circle cx=\"15\" cy=\"15\" r=\"13\" fill=\"#2563eb\" stroke=\"#1e40af\" stroke-width=\"2\"/>\n                          <text x=\"15\" y=\"19\" text-anchor=\"middle\" fill=\"white\" font-family=\"Arial, sans-serif\" font-size=\"10\" font-weight=\"bold\">1</text>\n                        </svg>\n                      `),\n                      scaledSize: new window.google.maps.Size(30, 30),\n                      anchor: new window.google.maps.Point(15, 15)\n                    });\n                  }\n                });\n                if (onMarkerClick) {\n                  marker.addListener('click', () => {\n                    // 클러스터 클릭 플래그 설정 (지도 상태 보존을 위해)\n                    isClusterClicking.current = true;\n                    if (setSelectedMarkerId) setSelectedMarkerId(property.id);\n                    onMarkerClick(property);\n\n                    // 플래그를 더 오래 유지하여 줌 변경 이벤트 방지\n                    setTimeout(() => {\n                      isClusterClicking.current = false;\n                    }, 1500);\n                  });\n                }\n                markersRef.current.push(marker);\n                console.log(`단일 마커 생성: 매물 ${property.id} (${property.location.lat}, ${property.location.lng})`);\n              } else {\n                // 클러스터 마커 - 묶인 개수 표시\n                const clusterMarker = createClusterMarker(cluster.properties, cluster.center);\n                markersRef.current.push(clusterMarker);\n                console.log(`클러스터 마커 생성: ${cluster.properties.length}개 매물 (중심: ${cluster.center.lat}, ${cluster.center.lng})`);\n              }\n            });\n          }\n          console.log(`총 ${markersRef.current.length}개의 마커 생성 완료`);\n        };\n\n        // 초기 마커 생성\n        createMarkers();\n\n        // 줌 변경 이벤트 리스너 활성화 (동적 클러스터링을 위해)\n        map.addListener('zoom_changed', () => {\n          // 클러스터 클릭 중일 때는 마커 재생성하지 않음\n          if (isClusterClicking.current) {\n            console.log('클러스터 클릭 중 - 마커 재생성 건너뜀');\n            return;\n          }\n          const newZoom = map.getZoom();\n          console.log('줌 레벨 변경됨:', newZoom);\n\n          // 기존 마커 제거\n          markersRef.current.forEach(marker => {\n            if (marker && marker.setMap) {\n              marker.setMap(null);\n            }\n          });\n          markersRef.current = [];\n\n          // 새 마커 생성 (지연 시간으로 안정성 확보)\n          setTimeout(() => {\n            // 다시 한번 클러스터 클릭 중인지 확인\n            if (!isClusterClicking.current) {\n              try {\n                createMarkers();\n              } catch (error) {\n                console.error('마커 재생성 중 오류:', error);\n              }\n            }\n          }, 200);\n        });\n\n        // 지도 클릭 시 클러스터 클릭 플래그 해제\n        map.addListener('click', () => {\n          if (isClusterClicking.current) {\n            console.log('지도 클릭으로 클러스터 클릭 플래그 해제');\n            isClusterClicking.current = false;\n          }\n        });\n\n        // 지도 드래그 시 클러스터 클릭 플래그 해제\n        map.addListener('dragstart', () => {\n          if (isClusterClicking.current) {\n            console.log('지도 드래그로 클러스터 클릭 플래그 해제');\n            isClusterClicking.current = false;\n          }\n        });\n        return true;\n      } catch (error) {\n        console.error('지도 초기화 오류:', error);\n        return false;\n      }\n    };\n\n    // Google Maps API 로딩 확인 및 지도 초기화\n    const checkAndInit = () => {\n      if (window.google && window.google.maps) {\n        if (initMap()) {\n          // setIsMapLoaded(true); // 이 부분은 사용하지 않음\n          return;\n        }\n      }\n\n      // API가 로드되지 않았으면 100ms 후 다시 시도\n      setTimeout(checkAndInit, 100);\n    };\n    checkAndInit();\n\n    // 컴포넌트 언마운트 시 정리\n    return () => {\n      markersRef.current.forEach(marker => {\n        if (marker && marker.setMap) {\n          marker.setMap(null);\n        }\n      });\n      markersRef.current = [];\n    };\n  }, [properties, onMarkerClick, onClusterClick, center, zoom, selectedMarkerId, setSelectedMarkerId]);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(MapContainer, {\n      ref: mapRef\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 537,\n      columnNumber: 7\n    }, this)\n  }, void 0, false);\n};\n_s(GoogleMap, \"3lScCQ0tTVZuISRhVFt5r4oQ6zo=\");\n_c2 = GoogleMap;\nexport default GoogleMap;\nvar _c, _c2;\n$RefreshReg$(_c, \"MapContainer\");\n$RefreshReg$(_c2, \"GoogleMap\");","map":{"version":3,"names":["React","useEffect","useRef","styled","jsxDEV","_jsxDEV","Fragment","_Fragment","MapContainer","div","_c","GoogleMap","properties","onMarkerClick","onClusterClick","center","lat","lng","zoom","selectedMarkerId","setSelectedMarkerId","_s","mapRef","mapInstance","markersRef","isClusterClicking","createClusterMarker","marker","window","google","maps","Marker","position","map","current","icon","url","encodeURIComponent","length","scaledSize","Size","anchor","Point","isHovered","addListener","console","log","setTimeout","setIcon","clusterMarkers","markers","clusters","clusterRadius","forEach","property","index","addedToCluster","cluster","distance","Math","sqrt","pow","location","push","reduce","sum","p","id","initMap","setMap","Map","mapTypeId","MapTypeId","ROADMAP","zoomControl","mapTypeControl","scaleControl","streetViewControl","rotateControl","fullscreenControl","gestureHandling","mapTypeControlOptions","style","MapTypeControlStyle","HORIZONTAL_BAR","ControlPosition","TOP_RIGHT","backgroundColor","disableDefaultUI","maxZoom","minZoom","tilt","zoomControlOptions","RIGHT_TOP","disableDoubleClickZoom","restriction","latLngBounds","north","south","east","west","strictBounds","createMarkers","currentZoom","getZoom","isSelected","title","clusterIndex","clusterMarker","newZoom","error","checkAndInit","children","ref","fileName","_jsxFileName","lineNumber","columnNumber","_c2","$RefreshReg$"],"sources":["C:/Users/user/지도기반사이트만들기/src/components/GoogleMap.tsx"],"sourcesContent":["import React, { useEffect, useRef, useState } from 'react';\nimport styled from 'styled-components';\nimport { Property } from '../types';\n\nconst MapContainer = styled.div`\n  width: 100%;\n  height: 100%;\n  min-height: 400px;\n  background: #f0f0f0;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  color: #666;\n  font-size: 1rem;\n  position: relative;\n  overflow: visible;\n\n  /* 마름모형 기호 완전 제거 */\n  .gmnoprint {\n    display: none !important;\n  }\n  \n  /* 지도 타입 컨트롤 완전 제거 */\n  .gm-style-mtc {\n    display: none !important;\n  }\n  \n  /* 모든 불필요한 컨트롤 제거 */\n  .gm-style button[title*=\"Map\"] {\n    display: none !important;\n  }\n`;\n\ninterface GoogleMapProps {\n  properties: Property[];\n  onMarkerClick?: (property: Property) => void;\n  onClusterClick?: (properties: Property[]) => void;\n  center?: { lat: number; lng: number };\n  zoom?: number;\n  selectedMarkerId?: string | null;\n  setSelectedMarkerId?: (id: string) => void;\n}\n\ndeclare global {\n  interface Window {\n    google: any;\n  }\n}\n\nconst GoogleMap: React.FC<GoogleMapProps> = ({\n  properties,\n  onMarkerClick,\n  onClusterClick,\n  center = { lat: 37.5665, lng: 126.9780 }, // 서울 중심\n  zoom = 10, // 서울 중심에 맞는 줌 레벨\n  selectedMarkerId,\n  setSelectedMarkerId\n}) => {\n  const mapRef = useRef<HTMLDivElement>(null);\n  const mapInstance = useRef<any>(null);\n  const markersRef = useRef<any[]>([]);\n  const isClusterClicking = useRef(false); // 클러스터 클릭 중인지 확인하는 플래그\n\n  // 마커 클러스터링 함수\n  const createClusterMarker = (properties: Property[], center: { lat: number; lng: number }) => {\n    const marker = new window.google.maps.Marker({\n      position: center,\n      map: mapInstance.current,\n      icon: {\n        url: 'data:image/svg+xml;charset=UTF-8,' + encodeURIComponent(`\n          <svg width=\"40\" height=\"40\" viewBox=\"0 0 40 40\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n            <circle cx=\"20\" cy=\"20\" r=\"18\" fill=\"#2563eb\" stroke=\"#1e40af\" stroke-width=\"3\"/>\n            <text x=\"20\" y=\"26\" text-anchor=\"middle\" fill=\"white\" font-family=\"Arial, sans-serif\" font-size=\"14\" font-weight=\"bold\">${properties.length}</text>\n          </svg>\n        `),\n        scaledSize: new window.google.maps.Size(40, 40),\n        anchor: new window.google.maps.Point(20, 20)\n      }\n    });\n\n    // hover 효과를 위한 마커 상태 관리\n    let isHovered = false;\n\n    // 클러스터 마커 클릭 시 지도 상태 변경 없이 콜백만 실행\n    marker.addListener('click', () => {\n      console.log(`클러스터 클릭: ${properties.length}개 매물`);\n      \n      // 클러스터 클릭 플래그 설정 (지도 상태 보존을 위해)\n      isClusterClicking.current = true;\n      \n      if (properties.length === 1) {\n        // 단일 매물인 경우 해당 매물 클릭 이벤트 실행\n        if (onMarkerClick) {\n          onMarkerClick(properties[0]);\n        }\n      } else {\n        // 여러 매물인 경우 클러스터 클릭 이벤트만 실행 (지도 상태 변경 없음)\n        if (onClusterClick) {\n          onClusterClick(properties);\n        }\n      }\n      \n      // 플래그를 더 오래 유지하여 줌 변경 이벤트 방지\n      setTimeout(() => {\n        isClusterClicking.current = false;\n      }, 1500);\n    });\n\n    // hover 효과 추가\n    marker.addListener('mouseover', () => {\n      isHovered = true;\n      marker.setIcon({\n        url: 'data:image/svg+xml;charset=UTF-8,' + encodeURIComponent(`\n          <svg width=\"44\" height=\"44\" viewBox=\"0 0 44 44\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n            <circle cx=\"22\" cy=\"22\" r=\"20\" fill=\"white\" stroke=\"#111\" stroke-width=\"3\"/>\n            <text x=\"22\" y=\"29\" text-anchor=\"middle\" fill=\"#111\" font-family=\"Arial, sans-serif\" font-size=\"16\" font-weight=\"bold\">${properties.length}</text>\n          </svg>\n        `),\n        scaledSize: new window.google.maps.Size(44, 44),\n        anchor: new window.google.maps.Point(22, 22)\n      });\n    });\n\n    marker.addListener('mouseout', () => {\n      isHovered = false;\n      marker.setIcon({\n        url: 'data:image/svg+xml;charset=UTF-8,' + encodeURIComponent(`\n          <svg width=\"40\" height=\"40\" viewBox=\"0 0 40 40\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n            <circle cx=\"20\" cy=\"20\" r=\"18\" fill=\"#2563eb\" stroke=\"#1e40af\" stroke-width=\"3\"/>\n            <text x=\"20\" y=\"26\" text-anchor=\"middle\" fill=\"white\" font-family=\"Arial, sans-serif\" font-size=\"14\" font-weight=\"bold\">${properties.length}</text>\n          </svg>\n        `),\n        scaledSize: new window.google.maps.Size(40, 40),\n        anchor: new window.google.maps.Point(20, 20)\n      });\n    });\n\n    return marker;\n  };\n\n  // 마커 클러스터링 로직\n  const clusterMarkers = (markers: any[], zoom: number) => {\n    const clusters: { center: { lat: number; lng: number }; properties: Property[] }[] = [];\n    \n    // 줌 레벨에 따른 클러스터 반경 조정 (더 세밀한 조정)\n    let clusterRadius: number;\n    if (zoom < 8) {\n      clusterRadius = 0.05; // 매우 넓은 반경 (전국 보기)\n    } else if (zoom < 10) {\n      clusterRadius = 0.02; // 넓은 반경 (시도 단위)\n    } else if (zoom < 12) {\n      clusterRadius = 0.01; // 중간 반경 (구 단위)\n    } else if (zoom < 14) {\n      clusterRadius = 0.005; // 좁은 반경 (동 단위)\n    } else if (zoom < 16) {\n      clusterRadius = 0.002; // 매우 좁은 반경 (상세 지역)\n    } else if (zoom < 18) {\n      clusterRadius = 0.001; // 개별 마커 근처\n    } else {\n      clusterRadius = 0.00001; // 거의 개별 마커 (최대 줌 시)\n    }\n\n    console.log(`현재 줌 레벨: ${zoom}, 클러스터 반경: ${clusterRadius}`);\n\n    // 각 매물을 클러스터에 할당\n    properties.forEach((property, index) => {\n      let addedToCluster = false;\n\n      // 기존 클러스터에 추가할 수 있는지 확인\n      for (const cluster of clusters) {\n        const distance = Math.sqrt(\n          Math.pow(property.location.lat - cluster.center.lat, 2) +\n          Math.pow(property.location.lng - cluster.center.lng, 2)\n        );\n\n        if (distance < clusterRadius) {\n          // 기존 클러스터에 추가\n          cluster.properties.push(property);\n          // 클러스터 중심 재계산\n          cluster.center = {\n            lat: cluster.properties.reduce((sum, p) => sum + p.location.lat, 0) / cluster.properties.length,\n            lng: cluster.properties.reduce((sum, p) => sum + p.location.lng, 0) / cluster.properties.length\n          };\n          addedToCluster = true;\n          console.log(`매물 ${property.id}를 기존 클러스터에 추가 (총 ${cluster.properties.length}개)`);\n          break;\n        }\n      }\n\n      if (!addedToCluster) {\n        // 새 클러스터 생성\n        clusters.push({\n          center: property.location,\n          properties: [property]\n        });\n        console.log(`새 클러스터 생성: 매물 ${property.id}`);\n      }\n    });\n\n    console.log(`총 ${clusters.length}개의 클러스터 생성됨`);\n    return clusters;\n  };\n\n  // 지도 초기화\n  useEffect(() => {\n    const initMap = () => {\n      if (!mapRef.current || !window.google || !window.google.maps) {\n        return false;\n      }\n\n      try {\n        // 기존 마커들 제거\n        markersRef.current.forEach(marker => {\n          if (marker && marker.setMap) {\n            marker.setMap(null);\n          }\n        });\n        markersRef.current = [];\n\n        // 지도 생성\n        const map = new window.google.maps.Map(mapRef.current, {\n          center,\n          zoom,\n          mapTypeId: window.google.maps.MapTypeId.ROADMAP,\n          zoomControl: true,\n          mapTypeControl: false,\n          scaleControl: false,\n          streetViewControl: false,\n          rotateControl: false,\n          fullscreenControl: false,\n          // Ctrl+스크롤 해제 및 화면 흔들림 방지\n          gestureHandling: 'greedy',\n          // 위성 타일 안정성 개선\n          mapTypeControlOptions: {\n            style: window.google.maps.MapTypeControlStyle.HORIZONTAL_BAR,\n            position: window.google.maps.ControlPosition.TOP_RIGHT\n          },\n          // 타일 로딩 최적화\n          backgroundColor: '#f0f0f0',\n          // 위성 타일 캐싱 개선\n          disableDefaultUI: false,\n          // 타일 로딩 성능 개선\n          maxZoom: 20,\n          minZoom: 8,\n          // 위성 타일 품질 개선\n          tilt: 0,\n          // 타일 로딩 최적화\n          zoomControlOptions: {\n            position: window.google.maps.ControlPosition.RIGHT_TOP\n          },\n          // 타일 렌더링 안정성 개선\n          disableDoubleClickZoom: false,\n          // 대한민국 본토만 표시 (주변국 최소화)\n          restriction: {\n            latLngBounds: {\n              north: 38.0, // 최북단 (강원도)\n              south: 34.5, // 최남단 (경남)\n              east: 131.0, // 최동단 (울릉도)\n              west: 125.0  // 최서단 (서해안)\n            },\n            strictBounds: false // 경계를 넘어서도 줌 가능하도록\n          }\n        });\n\n        mapInstance.current = map;\n\n        // 지도 로드 완료 이벤트 추가\n        map.addListener('tilesloaded', () => {\n          console.log('지도 타일 로드 완료');\n          // setIsMapLoaded(true); // 이 부분은 사용하지 않음\n        });\n\n        // 지도 완전 로드 이벤트\n        map.addListener('idle', () => {\n          console.log('지도 완전 로드됨');\n          // setIsMapLoaded(true); // 이 부분은 사용하지 않음\n        });\n\n        // 지도가 생성되면 즉시 로드된 것으로 설정\n        // setIsMapLoaded(true); // 이 부분은 사용하지 않음\n        console.log('지도 초기화 완료');\n\n        // 마커 생성 및 클러스터링\n        const createMarkers = () => {\n          const currentZoom = map.getZoom();\n          console.log(`마커 생성 시작 - 줌 레벨: ${currentZoom}, 매물 수: ${properties.length}`);\n          \n          // 줌 레벨에 따른 클러스터링 (더 세밀한 기준)\n          if (currentZoom >= 18) {\n            // 최대 줌 레벨에서는 개별 마커만 생성\n            console.log('최대 줌 레벨 - 개별 마커만 생성');\n            properties.forEach((property, index) => {\n              const isSelected = selectedMarkerId === property.id;\n              const marker = new window.google.maps.Marker({\n                position: property.location,\n                map,\n                title: property.title,\n                icon: {\n                  url: 'data:image/svg+xml;charset=UTF-8,' + encodeURIComponent(\n                    isSelected\n                      ? `<svg width=\"44\" height=\"44\" viewBox=\"0 0 44 44\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\"><circle cx=\"22\" cy=\"22\" r=\"20\" fill=\"white\" stroke=\"#111\" stroke-width=\"3\"/><text x=\"22\" y=\"29\" text-anchor=\"middle\" fill=\"#111\" font-family=\"Arial, sans-serif\" font-size=\"16\" font-weight=\"bold\">1</text></svg>`\n                      : `<svg width=\"30\" height=\"30\" viewBox=\"0 0 30 30\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\"><circle cx=\"15\" cy=\"15\" r=\"13\" fill=\"#2563eb\" stroke=\"#1e40af\" stroke-width=\"2\"/><text x=\"15\" y=\"19\" text-anchor=\"middle\" fill=\"white\" font-family=\"Arial, sans-serif\" font-size=\"10\" font-weight=\"bold\">1</text></svg>`\n                  ),\n                  scaledSize: isSelected\n                    ? new window.google.maps.Size(44, 44)\n                    : new window.google.maps.Size(30, 30),\n                  anchor: isSelected\n                    ? new window.google.maps.Point(22, 22)\n                    : new window.google.maps.Point(15, 15)\n                }\n              });\n\n              // hover 효과 추가\n              marker.addListener('mouseover', () => {\n                if (!isSelected) {\n                  marker.setIcon({\n                    url: 'data:image/svg+xml;charset=UTF-8,' + encodeURIComponent(`\n                      <svg width=\"44\" height=\"44\" viewBox=\"0 0 44 44\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n                        <circle cx=\"22\" cy=\"22\" r=\"20\" fill=\"white\" stroke=\"#111\" stroke-width=\"3\"/>\n                        <text x=\"22\" y=\"29\" text-anchor=\"middle\" fill=\"#111\" font-family=\"Arial, sans-serif\" font-size=\"16\" font-weight=\"bold\">1</text>\n                      </svg>\n                    `),\n                    scaledSize: new window.google.maps.Size(44, 44),\n                    anchor: new window.google.maps.Point(22, 22)\n                  });\n                }\n              });\n\n              marker.addListener('mouseout', () => {\n                if (!isSelected) {\n                  marker.setIcon({\n                    url: 'data:image/svg+xml;charset=UTF-8,' + encodeURIComponent(`\n                      <svg width=\"30\" height=\"30\" viewBox=\"0 0 30 30\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n                        <circle cx=\"15\" cy=\"15\" r=\"13\" fill=\"#2563eb\" stroke=\"#1e40af\" stroke-width=\"2\"/>\n                        <text x=\"15\" y=\"19\" text-anchor=\"middle\" fill=\"white\" font-family=\"Arial, sans-serif\" font-size=\"10\" font-weight=\"bold\">1</text>\n                      </svg>\n                    `),\n                    scaledSize: new window.google.maps.Size(30, 30),\n                    anchor: new window.google.maps.Point(15, 15)\n                  });\n                }\n              });\n\n              if (onMarkerClick) {\n                marker.addListener('click', () => {\n                  // 클러스터 클릭 플래그 설정 (지도 상태 보존을 위해)\n                  isClusterClicking.current = true;\n                  \n                  if (setSelectedMarkerId) setSelectedMarkerId(property.id);\n                  onMarkerClick(property);\n                  \n                  // 플래그를 더 오래 유지하여 줌 변경 이벤트 방지\n                  setTimeout(() => {\n                    isClusterClicking.current = false;\n                  }, 1500);\n                });\n              }\n\n              markersRef.current.push(marker);\n              console.log(`개별 마커 생성: 매물 ${property.id} (${property.location.lat}, ${property.location.lng})`);\n            });\n          } else {\n            // 일반적인 클러스터링 로직 (줌 레벨에 따라 동적 조정)\n            const clusters = clusterMarkers([], currentZoom);\n\n            clusters.forEach((cluster, clusterIndex) => {\n              console.log(`클러스터 ${clusterIndex + 1}: ${cluster.properties.length}개 매물`);\n              \n              if (cluster.properties.length === 1) {\n                const property = cluster.properties[0];\n                const isSelected = selectedMarkerId === property.id;\n                const marker = new window.google.maps.Marker({\n                  position: property.location,\n                  map,\n                  title: property.title,\n                  icon: {\n                    url: 'data:image/svg+xml;charset=UTF-8,' + encodeURIComponent(\n                      isSelected\n                        ? `<svg width=\"44\" height=\"44\" viewBox=\"0 0 44 44\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\"><circle cx=\"22\" cy=\"22\" r=\"20\" fill=\"white\" stroke=\"#111\" stroke-width=\"3\"/><text x=\"22\" y=\"29\" text-anchor=\"middle\" fill=\"#111\" font-family=\"Arial, sans-serif\" font-size=\"16\" font-weight=\"bold\">1</text></svg>`\n                        : `<svg width=\"30\" height=\"30\" viewBox=\"0 0 30 30\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\"><circle cx=\"15\" cy=\"15\" r=\"13\" fill=\"#2563eb\" stroke=\"#1e40af\" stroke-width=\"2\"/><text x=\"15\" y=\"19\" text-anchor=\"middle\" fill=\"white\" font-family=\"Arial, sans-serif\" font-size=\"10\" font-weight=\"bold\">1</text></svg>`\n                    ),\n                    scaledSize: isSelected\n                      ? new window.google.maps.Size(44, 44)\n                      : new window.google.maps.Size(30, 30),\n                    anchor: isSelected\n                      ? new window.google.maps.Point(22, 22)\n                      : new window.google.maps.Point(15, 15)\n                  }\n                });\n\n                // hover 효과 추가\n                marker.addListener('mouseover', () => {\n                  if (!isSelected) {\n                    marker.setIcon({\n                      url: 'data:image/svg+xml;charset=UTF-8,' + encodeURIComponent(`\n                        <svg width=\"44\" height=\"44\" viewBox=\"0 0 44 44\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n                          <circle cx=\"22\" cy=\"22\" r=\"20\" fill=\"white\" stroke=\"#111\" stroke-width=\"3\"/>\n                          <text x=\"22\" y=\"29\" text-anchor=\"middle\" fill=\"#111\" font-family=\"Arial, sans-serif\" font-size=\"16\" font-weight=\"bold\">1</text>\n                        </svg>\n                      `),\n                      scaledSize: new window.google.maps.Size(44, 44),\n                      anchor: new window.google.maps.Point(22, 22)\n                    });\n                  }\n                });\n\n                marker.addListener('mouseout', () => {\n                  if (!isSelected) {\n                    marker.setIcon({\n                      url: 'data:image/svg+xml;charset=UTF-8,' + encodeURIComponent(`\n                        <svg width=\"30\" height=\"30\" viewBox=\"0 0 30 30\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n                          <circle cx=\"15\" cy=\"15\" r=\"13\" fill=\"#2563eb\" stroke=\"#1e40af\" stroke-width=\"2\"/>\n                          <text x=\"15\" y=\"19\" text-anchor=\"middle\" fill=\"white\" font-family=\"Arial, sans-serif\" font-size=\"10\" font-weight=\"bold\">1</text>\n                        </svg>\n                      `),\n                      scaledSize: new window.google.maps.Size(30, 30),\n                      anchor: new window.google.maps.Point(15, 15)\n                    });\n                  }\n                });\n\n                if (onMarkerClick) {\n                  marker.addListener('click', () => {\n                    // 클러스터 클릭 플래그 설정 (지도 상태 보존을 위해)\n                    isClusterClicking.current = true;\n                    \n                    if (setSelectedMarkerId) setSelectedMarkerId(property.id);\n                    onMarkerClick(property);\n                    \n                    // 플래그를 더 오래 유지하여 줌 변경 이벤트 방지\n                    setTimeout(() => {\n                      isClusterClicking.current = false;\n                    }, 1500);\n                  });\n                }\n\n                markersRef.current.push(marker);\n                console.log(`단일 마커 생성: 매물 ${property.id} (${property.location.lat}, ${property.location.lng})`);\n              } else {\n                // 클러스터 마커 - 묶인 개수 표시\n                const clusterMarker = createClusterMarker(cluster.properties, cluster.center);\n                markersRef.current.push(clusterMarker);\n                console.log(`클러스터 마커 생성: ${cluster.properties.length}개 매물 (중심: ${cluster.center.lat}, ${cluster.center.lng})`);\n              }\n            });\n          }\n          \n          console.log(`총 ${markersRef.current.length}개의 마커 생성 완료`);\n        };\n\n        // 초기 마커 생성\n        createMarkers();\n\n        // 줌 변경 이벤트 리스너 활성화 (동적 클러스터링을 위해)\n        map.addListener('zoom_changed', () => {\n          // 클러스터 클릭 중일 때는 마커 재생성하지 않음\n          if (isClusterClicking.current) {\n            console.log('클러스터 클릭 중 - 마커 재생성 건너뜀');\n            return;\n          }\n          \n          const newZoom = map.getZoom();\n          console.log('줌 레벨 변경됨:', newZoom);\n          \n          // 기존 마커 제거\n          markersRef.current.forEach(marker => {\n            if (marker && marker.setMap) {\n              marker.setMap(null);\n            }\n          });\n          markersRef.current = [];\n\n          // 새 마커 생성 (지연 시간으로 안정성 확보)\n          setTimeout(() => {\n            // 다시 한번 클러스터 클릭 중인지 확인\n            if (!isClusterClicking.current) {\n              try {\n                createMarkers();\n              } catch (error) {\n                console.error('마커 재생성 중 오류:', error);\n              }\n            }\n          }, 200);\n        });\n\n        // 지도 클릭 시 클러스터 클릭 플래그 해제\n        map.addListener('click', () => {\n          if (isClusterClicking.current) {\n            console.log('지도 클릭으로 클러스터 클릭 플래그 해제');\n            isClusterClicking.current = false;\n          }\n        });\n\n        // 지도 드래그 시 클러스터 클릭 플래그 해제\n        map.addListener('dragstart', () => {\n          if (isClusterClicking.current) {\n            console.log('지도 드래그로 클러스터 클릭 플래그 해제');\n            isClusterClicking.current = false;\n          }\n        });\n\n        return true;\n      } catch (error) {\n        console.error('지도 초기화 오류:', error);\n        return false;\n      }\n    };\n\n    // Google Maps API 로딩 확인 및 지도 초기화\n    const checkAndInit = () => {\n      if (window.google && window.google.maps) {\n        if (initMap()) {\n          // setIsMapLoaded(true); // 이 부분은 사용하지 않음\n          return;\n        }\n      }\n      \n      // API가 로드되지 않았으면 100ms 후 다시 시도\n      setTimeout(checkAndInit, 100);\n    };\n\n    checkAndInit();\n\n    // 컴포넌트 언마운트 시 정리\n    return () => {\n      markersRef.current.forEach(marker => {\n        if (marker && marker.setMap) {\n          marker.setMap(null);\n        }\n      });\n      markersRef.current = [];\n    };\n  }, [properties, onMarkerClick, onClusterClick, center, zoom, selectedMarkerId, setSelectedMarkerId]);\n\n  return (\n    <>\n      <MapContainer ref={mapRef} />\n    </>\n  );\n};\n\nexport default GoogleMap; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}