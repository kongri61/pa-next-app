{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\user\\\\\\uC9C0\\uB3C4\\uAE30\\uBC18\\uC0AC\\uC774\\uD2B8\\uB9CC\\uB4E4\\uAE30\\\\src\\\\components\\\\GoogleMap.tsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useRef } from 'react';\nimport styled from 'styled-components';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst MapContainer = styled.div`\n  width: 100%;\n  height: 100%;\n  min-height: 400px;\n  position: relative;\n  overflow: visible;\n  background: #f0f0f0;\n`;\n_c = MapContainer;\nconst FallbackMap = styled.div`\n  width: 100%;\n  height: 100%;\n  background: linear-gradient(45deg, #e5e7eb 25%, transparent 25%), \n              linear-gradient(-45deg, #e5e7eb 25%, transparent 25%), \n              linear-gradient(45deg, transparent 75%, #e5e7eb 75%), \n              linear-gradient(-45deg, transparent 75%, #e5e7eb 75%);\n  background-size: 20px 20px;\n  background-position: 0 0, 0 10px, 10px -10px, -10px 0px;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  color: #6b7280;\n  font-size: 1.2rem;\n  font-weight: 500;\n`;\nconst MapError = styled.div`\n  text-align: center;\n  padding: 2rem;\n  background: white;\n  border-radius: 8px;\n  box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);\n  max-width: 400px;\n`;\nconst GoogleMap = ({\n  properties,\n  onMarkerClick,\n  onClusterClick,\n  selectedMarkerId,\n  setSelectedMarkerId,\n  selectedClusterId,\n  setSelectedClusterId\n}) => {\n  _s();\n  const mapRef = useRef(null);\n  const mapInstance = useRef(null);\n  const markersRef = useRef([]);\n  const isClusterClicking = useRef(false);\n\n  // 마커 클러스터링 함수\n  const createClusterMarker = (properties, center) => {\n    const clusterId = properties.map(p => p.id).join(',');\n    const isSelected = selectedClusterId === clusterId;\n    const marker = new window.google.maps.Marker({\n      position: center,\n      map: mapInstance.current,\n      icon: {\n        url: 'data:image/svg+xml;charset=UTF-8,' + encodeURIComponent(isSelected ? `<svg width=\"44\" height=\"44\" viewBox=\"0 0 44 44\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n                <circle cx=\"22\" cy=\"22\" r=\"20\" fill=\"white\" stroke=\"#111\" stroke-width=\"3\"/>\n                <text x=\"22\" y=\"26\" text-anchor=\"middle\" fill=\"#111\" font-family=\"Arial, sans-serif\" font-size=\"14\" font-weight=\"bold\">${properties.length}</text>\n              </svg>` : `<svg width=\"40\" height=\"40\" viewBox=\"0 0 40 40\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n                <circle cx=\"20\" cy=\"20\" r=\"18\" fill=\"#2563eb\" stroke=\"#1e40af\" stroke-width=\"3\"/>\n                <text x=\"20\" y=\"26\" text-anchor=\"middle\" fill=\"white\" font-family=\"Arial, sans-serif\" font-size=\"14\" font-weight=\"bold\">${properties.length}</text>\n              </svg>`),\n        scaledSize: isSelected ? new window.google.maps.Size(44, 44) : new window.google.maps.Size(40, 40),\n        anchor: isSelected ? new window.google.maps.Point(22, 22) : new window.google.maps.Point(20, 20)\n      }\n    });\n    marker.addListener('click', () => {\n      console.log(`클러스터 클릭: ${properties.length}개 매물`);\n      isClusterClicking.current = true;\n      if (properties.length === 1) {\n        if (onMarkerClick) {\n          onMarkerClick(properties[0]);\n        }\n      } else {\n        if (onClusterClick) {\n          onClusterClick(properties);\n        }\n      }\n      setTimeout(() => {\n        isClusterClicking.current = false;\n      }, 1500);\n    });\n    return marker;\n  };\n\n  // 마커 클러스터링 로직\n  const clusterMarkers = (markers, zoom) => {\n    const clusters = [];\n    let clusterRadius;\n    if (zoom < 8) {\n      clusterRadius = 0.05;\n    } else if (zoom < 10) {\n      clusterRadius = 0.02;\n    } else if (zoom < 12) {\n      clusterRadius = 0.01;\n    } else if (zoom < 14) {\n      clusterRadius = 0.005;\n    } else if (zoom < 16) {\n      clusterRadius = 0.002;\n    } else if (zoom < 18) {\n      clusterRadius = 0.001;\n    } else {\n      clusterRadius = 0.00001;\n    }\n    properties.forEach((property, index) => {\n      let addedToCluster = false;\n      for (const cluster of clusters) {\n        const distance = Math.sqrt(Math.pow(property.location.lat - cluster.center.lat, 2) + Math.pow(property.location.lng - cluster.center.lng, 2));\n        if (distance < clusterRadius) {\n          cluster.properties.push(property);\n          cluster.center = {\n            lat: cluster.properties.reduce((sum, p) => sum + p.location.lat, 0) / cluster.properties.length,\n            lng: cluster.properties.reduce((sum, p) => sum + p.location.lng, 0) / cluster.properties.length\n          };\n          addedToCluster = true;\n          break;\n        }\n      }\n      if (!addedToCluster) {\n        clusters.push({\n          center: property.location,\n          properties: [property]\n        });\n      }\n    });\n    return clusters;\n  };\n\n  // 지도 초기화\n  useEffect(() => {\n    const initMap = () => {\n      var _window$google;\n      console.log('지도 초기화 시도...');\n      console.log('mapRef.current:', mapRef.current);\n      console.log('window.google:', window.google);\n      console.log('window.google.maps:', (_window$google = window.google) === null || _window$google === void 0 ? void 0 : _window$google.maps);\n      if (!mapRef.current) {\n        console.log('mapRef가 없음');\n        return false;\n      }\n      if (!window.google) {\n        console.log('Google Maps API가 로드되지 않음');\n        return false;\n      }\n      if (!window.google.maps) {\n        console.log('Google Maps 객체가 없음');\n        return false;\n      }\n      if (mapInstance.current) {\n        console.log('기존 지도 인스턴스 업데이트');\n        updateMarkers();\n        return true;\n      }\n      try {\n        console.log('새 지도 인스턴스 생성 시작...');\n        markersRef.current.forEach(marker => {\n          if (marker && marker.setMap) {\n            marker.setMap(null);\n          }\n        });\n        markersRef.current = [];\n        const map = new window.google.maps.Map(mapRef.current, {\n          center: {\n            lat: 37.5665,\n            lng: 126.9780\n          },\n          zoom: 10,\n          mapTypeId: window.google.maps.MapTypeId.ROADMAP,\n          zoomControl: true,\n          mapTypeControl: false,\n          scaleControl: false,\n          streetViewControl: false,\n          rotateControl: false,\n          fullscreenControl: false,\n          gestureHandling: 'greedy',\n          backgroundColor: '#f0f0f0',\n          disableDefaultUI: false,\n          maxZoom: 20,\n          minZoom: 8,\n          tilt: 0,\n          zoomControlOptions: {\n            position: window.google.maps.ControlPosition.RIGHT_TOP\n          },\n          disableDoubleClickZoom: false,\n          restriction: {\n            latLngBounds: {\n              north: 38.0,\n              south: 34.5,\n              east: 131.0,\n              west: 125.0\n            },\n            strictBounds: false\n          }\n        });\n        console.log('지도 인스턴스 생성 완료:', map);\n        mapInstance.current = map;\n        createMarkers();\n        map.addListener('zoom_changed', () => {\n          if (isClusterClicking.current) {\n            return;\n          }\n          markersRef.current.forEach(marker => {\n            if (marker && marker.setMap) {\n              marker.setMap(null);\n            }\n          });\n          markersRef.current = [];\n          setTimeout(() => {\n            if (!isClusterClicking.current) {\n              createMarkers();\n            }\n          }, 300);\n        });\n        console.log('지도 초기화 완료');\n        return true;\n      } catch (error) {\n        console.error('지도 초기화 오류:', error);\n        return false;\n      }\n    };\n    const createMarkers = () => {\n      if (!mapInstance.current) return;\n      const currentZoom = mapInstance.current.getZoom();\n      if (currentZoom >= 18) {\n        properties.forEach((property, index) => {\n          const isSelected = selectedMarkerId === property.id;\n          const marker = new window.google.maps.Marker({\n            position: property.location,\n            map: mapInstance.current,\n            title: property.title,\n            icon: {\n              url: 'data:image/svg+xml;charset=UTF-8,' + encodeURIComponent(isSelected ? `<svg width=\"44\" height=\"44\" viewBox=\"0 0 44 44\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\"><circle cx=\"22\" cy=\"22\" r=\"20\" fill=\"white\" stroke=\"#111\" stroke-width=\"3\"/><text x=\"22\" y=\"29\" text-anchor=\"middle\" fill=\"#111\" font-family=\"Arial, sans-serif\" font-size=\"16\" font-weight=\"bold\">1</text></svg>` : `<svg width=\"30\" height=\"30\" viewBox=\"0 0 30 30\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\"><circle cx=\"15\" cy=\"15\" r=\"13\" fill=\"#2563eb\" stroke=\"#1e40af\" stroke-width=\"2\"/><text x=\"15\" y=\"19\" text-anchor=\"middle\" fill=\"white\" font-family=\"Arial, sans-serif\" font-size=\"10\" font-weight=\"bold\">1</text></svg>`),\n              scaledSize: isSelected ? new window.google.maps.Size(44, 44) : new window.google.maps.Size(30, 30),\n              anchor: isSelected ? new window.google.maps.Point(22, 22) : new window.google.maps.Point(15, 15)\n            }\n          });\n          if (onMarkerClick) {\n            marker.addListener('click', () => {\n              console.log(`개별 마커 클릭됨: ${property.id} - ${property.title}`);\n              isClusterClicking.current = true;\n              if (setSelectedMarkerId) setSelectedMarkerId(property.id);\n              if (setSelectedClusterId) setSelectedClusterId('');\n              onMarkerClick(property);\n              setTimeout(() => {\n                isClusterClicking.current = false;\n              }, 1500);\n            });\n          }\n          markersRef.current.push(marker);\n        });\n      } else {\n        const clusters = clusterMarkers([], currentZoom);\n        clusters.forEach((cluster, clusterIndex) => {\n          if (cluster.properties.length === 1) {\n            const property = cluster.properties[0];\n            const isSelected = selectedMarkerId === property.id;\n            const marker = new window.google.maps.Marker({\n              position: property.location,\n              map: mapInstance.current,\n              title: property.title,\n              icon: {\n                url: 'data:image/svg+xml;charset=UTF-8,' + encodeURIComponent(isSelected ? `<svg width=\"44\" height=\"44\" viewBox=\"0 0 44 44\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\"><circle cx=\"22\" cy=\"22\" r=\"20\" fill=\"white\" stroke=\"#111\" stroke-width=\"3\"/><text x=\"22\" y=\"29\" text-anchor=\"middle\" fill=\"#111\" font-family=\"Arial, sans-serif\" font-size=\"16\" font-weight=\"bold\">1</text></svg>` : `<svg width=\"30\" height=\"30\" viewBox=\"0 0 30 30\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\"><circle cx=\"15\" cy=\"15\" r=\"13\" fill=\"#2563eb\" stroke=\"#1e40af\" stroke-width=\"2\"/><text x=\"15\" y=\"19\" text-anchor=\"middle\" fill=\"white\" font-family=\"Arial, sans-serif\" font-size=\"10\" font-weight=\"bold\">1</text></svg>`),\n                scaledSize: isSelected ? new window.google.maps.Size(44, 44) : new window.google.maps.Size(30, 30),\n                anchor: isSelected ? new window.google.maps.Point(22, 22) : new window.google.maps.Point(15, 15)\n              }\n            });\n            if (onMarkerClick) {\n              marker.addListener('click', () => {\n                console.log(`클러스터링된 단일 마커 클릭됨: ${property.id} - ${property.title}`);\n                isClusterClicking.current = true;\n                if (setSelectedMarkerId) setSelectedMarkerId(property.id);\n                if (setSelectedClusterId) setSelectedClusterId('');\n                onMarkerClick(property);\n                setTimeout(() => {\n                  isClusterClicking.current = false;\n                }, 1500);\n              });\n            }\n            markersRef.current.push(marker);\n          } else {\n            const clusterMarker = createClusterMarker(cluster.properties, cluster.center);\n            markersRef.current.push(clusterMarker);\n          }\n        });\n      }\n    };\n    const updateMarkers = () => {\n      if (!mapInstance.current) return;\n      markersRef.current.forEach(marker => {\n        if (marker && marker.setMap) {\n          marker.setMap(null);\n        }\n      });\n      markersRef.current = [];\n      createMarkers();\n    };\n    const checkAndInit = () => {\n      console.log('Google Maps API 확인 중...');\n      if (window.google && window.google.maps) {\n        console.log('Google Maps API 로드됨, 지도 초기화 시도');\n        if (initMap()) {\n          console.log('지도 초기화 성공');\n          return;\n        }\n      } else {\n        console.log('Google Maps API 아직 로드되지 않음, 재시도...');\n      }\n      setTimeout(checkAndInit, 100);\n    };\n    checkAndInit();\n    return () => {\n      markersRef.current.forEach(marker => {\n        if (marker && marker.setMap) {\n          marker.setMap(null);\n        }\n      });\n      markersRef.current = [];\n    };\n  }, [properties, onMarkerClick, onClusterClick, selectedMarkerId, setSelectedMarkerId, selectedClusterId, setSelectedClusterId]);\n  return /*#__PURE__*/_jsxDEV(MapContainer, {\n    ref: mapRef\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 409,\n    columnNumber: 5\n  }, this);\n};\n_s(GoogleMap, \"3lScCQ0tTVZuISRhVFt5r4oQ6zo=\");\n_c2 = GoogleMap;\nexport default GoogleMap;\nvar _c, _c2;\n$RefreshReg$(_c, \"MapContainer\");\n$RefreshReg$(_c2, \"GoogleMap\");","map":{"version":3,"names":["React","useEffect","useRef","styled","jsxDEV","_jsxDEV","MapContainer","div","_c","FallbackMap","MapError","GoogleMap","properties","onMarkerClick","onClusterClick","selectedMarkerId","setSelectedMarkerId","selectedClusterId","setSelectedClusterId","_s","mapRef","mapInstance","markersRef","isClusterClicking","createClusterMarker","center","clusterId","map","p","id","join","isSelected","marker","window","google","maps","Marker","position","current","icon","url","encodeURIComponent","length","scaledSize","Size","anchor","Point","addListener","console","log","setTimeout","clusterMarkers","markers","zoom","clusters","clusterRadius","forEach","property","index","addedToCluster","cluster","distance","Math","sqrt","pow","location","lat","lng","push","reduce","sum","initMap","_window$google","updateMarkers","setMap","Map","mapTypeId","MapTypeId","ROADMAP","zoomControl","mapTypeControl","scaleControl","streetViewControl","rotateControl","fullscreenControl","gestureHandling","backgroundColor","disableDefaultUI","maxZoom","minZoom","tilt","zoomControlOptions","ControlPosition","RIGHT_TOP","disableDoubleClickZoom","restriction","latLngBounds","north","south","east","west","strictBounds","createMarkers","error","currentZoom","getZoom","title","clusterIndex","clusterMarker","checkAndInit","ref","fileName","_jsxFileName","lineNumber","columnNumber","_c2","$RefreshReg$"],"sources":["C:/Users/user/지도기반사이트만들기/src/components/GoogleMap.tsx"],"sourcesContent":["import React, { useEffect, useRef } from 'react';\nimport styled from 'styled-components';\nimport { Property } from '../types';\n\nconst MapContainer = styled.div`\n  width: 100%;\n  height: 100%;\n  min-height: 400px;\n  position: relative;\n  overflow: visible;\n  background: #f0f0f0;\n`;\n\nconst FallbackMap = styled.div`\n  width: 100%;\n  height: 100%;\n  background: linear-gradient(45deg, #e5e7eb 25%, transparent 25%), \n              linear-gradient(-45deg, #e5e7eb 25%, transparent 25%), \n              linear-gradient(45deg, transparent 75%, #e5e7eb 75%), \n              linear-gradient(-45deg, transparent 75%, #e5e7eb 75%);\n  background-size: 20px 20px;\n  background-position: 0 0, 0 10px, 10px -10px, -10px 0px;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  color: #6b7280;\n  font-size: 1.2rem;\n  font-weight: 500;\n`;\n\nconst MapError = styled.div`\n  text-align: center;\n  padding: 2rem;\n  background: white;\n  border-radius: 8px;\n  box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);\n  max-width: 400px;\n`;\n\ninterface GoogleMapProps {\n  properties: Property[];\n  onMarkerClick?: (property: Property) => void;\n  onClusterClick?: (properties: Property[]) => void;\n  selectedMarkerId?: string | null;\n  setSelectedMarkerId?: (id: string) => void;\n  selectedClusterId?: string | null;\n  setSelectedClusterId?: (id: string) => void;\n}\n\ndeclare global {\n  interface Window {\n    google: any;\n  }\n}\n\nconst GoogleMap: React.FC<GoogleMapProps> = ({\n  properties,\n  onMarkerClick,\n  onClusterClick,\n  selectedMarkerId,\n  setSelectedMarkerId,\n  selectedClusterId,\n  setSelectedClusterId\n}) => {\n  const mapRef = useRef<HTMLDivElement>(null);\n  const mapInstance = useRef<any>(null);\n  const markersRef = useRef<any[]>([]);\n  const isClusterClicking = useRef(false);\n\n  // 마커 클러스터링 함수\n  const createClusterMarker = (properties: Property[], center: { lat: number; lng: number }) => {\n    const clusterId = properties.map(p => p.id).join(',');\n    const isSelected = selectedClusterId === clusterId;\n    \n    const marker = new window.google.maps.Marker({\n      position: center,\n      map: mapInstance.current,\n      icon: {\n        url: 'data:image/svg+xml;charset=UTF-8,' + encodeURIComponent(\n          isSelected\n            ? `<svg width=\"44\" height=\"44\" viewBox=\"0 0 44 44\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n                <circle cx=\"22\" cy=\"22\" r=\"20\" fill=\"white\" stroke=\"#111\" stroke-width=\"3\"/>\n                <text x=\"22\" y=\"26\" text-anchor=\"middle\" fill=\"#111\" font-family=\"Arial, sans-serif\" font-size=\"14\" font-weight=\"bold\">${properties.length}</text>\n              </svg>`\n            : `<svg width=\"40\" height=\"40\" viewBox=\"0 0 40 40\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n                <circle cx=\"20\" cy=\"20\" r=\"18\" fill=\"#2563eb\" stroke=\"#1e40af\" stroke-width=\"3\"/>\n                <text x=\"20\" y=\"26\" text-anchor=\"middle\" fill=\"white\" font-family=\"Arial, sans-serif\" font-size=\"14\" font-weight=\"bold\">${properties.length}</text>\n              </svg>`\n        ),\n        scaledSize: isSelected\n          ? new window.google.maps.Size(44, 44)\n          : new window.google.maps.Size(40, 40),\n        anchor: isSelected\n          ? new window.google.maps.Point(22, 22)\n          : new window.google.maps.Point(20, 20)\n      }\n    });\n\n    marker.addListener('click', () => {\n      console.log(`클러스터 클릭: ${properties.length}개 매물`);\n      \n      isClusterClicking.current = true;\n      \n      if (properties.length === 1) {\n        if (onMarkerClick) {\n          onMarkerClick(properties[0]);\n        }\n      } else {\n        if (onClusterClick) {\n          onClusterClick(properties);\n        }\n      }\n      \n      setTimeout(() => {\n        isClusterClicking.current = false;\n      }, 1500);\n    });\n\n    return marker;\n  };\n\n  // 마커 클러스터링 로직\n  const clusterMarkers = (markers: any[], zoom: number) => {\n    const clusters: { center: { lat: number; lng: number }; properties: Property[] }[] = [];\n    \n    let clusterRadius: number;\n    if (zoom < 8) {\n      clusterRadius = 0.05;\n    } else if (zoom < 10) {\n      clusterRadius = 0.02;\n    } else if (zoom < 12) {\n      clusterRadius = 0.01;\n    } else if (zoom < 14) {\n      clusterRadius = 0.005;\n    } else if (zoom < 16) {\n      clusterRadius = 0.002;\n    } else if (zoom < 18) {\n      clusterRadius = 0.001;\n    } else {\n      clusterRadius = 0.00001;\n    }\n\n    properties.forEach((property, index) => {\n      let addedToCluster = false;\n      \n      for (const cluster of clusters) {\n        const distance = Math.sqrt(\n          Math.pow(property.location.lat - cluster.center.lat, 2) +\n          Math.pow(property.location.lng - cluster.center.lng, 2)\n        );\n        \n        if (distance < clusterRadius) {\n          cluster.properties.push(property);\n          cluster.center = {\n            lat: cluster.properties.reduce((sum, p) => sum + p.location.lat, 0) / cluster.properties.length,\n            lng: cluster.properties.reduce((sum, p) => sum + p.location.lng, 0) / cluster.properties.length\n          };\n          addedToCluster = true;\n          break;\n        }\n      }\n      \n      if (!addedToCluster) {\n        clusters.push({\n          center: property.location,\n          properties: [property]\n        });\n      }\n    });\n\n    return clusters;\n  };\n\n  // 지도 초기화\n  useEffect(() => {\n    const initMap = () => {\n      console.log('지도 초기화 시도...');\n      console.log('mapRef.current:', mapRef.current);\n      console.log('window.google:', window.google);\n      console.log('window.google.maps:', window.google?.maps);\n      \n      if (!mapRef.current) {\n        console.log('mapRef가 없음');\n        return false;\n      }\n      \n      if (!window.google) {\n        console.log('Google Maps API가 로드되지 않음');\n        return false;\n      }\n      \n      if (!window.google.maps) {\n        console.log('Google Maps 객체가 없음');\n        return false;\n      }\n\n      if (mapInstance.current) {\n        console.log('기존 지도 인스턴스 업데이트');\n        updateMarkers();\n        return true;\n      }\n\n      try {\n        console.log('새 지도 인스턴스 생성 시작...');\n        markersRef.current.forEach(marker => {\n          if (marker && marker.setMap) {\n            marker.setMap(null);\n          }\n        });\n        markersRef.current = [];\n\n        const map = new window.google.maps.Map(mapRef.current, {\n          center: { lat: 37.5665, lng: 126.9780 },\n          zoom: 10,\n          mapTypeId: window.google.maps.MapTypeId.ROADMAP,\n          zoomControl: true,\n          mapTypeControl: false,\n          scaleControl: false,\n          streetViewControl: false,\n          rotateControl: false,\n          fullscreenControl: false,\n          gestureHandling: 'greedy',\n          backgroundColor: '#f0f0f0',\n          disableDefaultUI: false,\n          maxZoom: 20,\n          minZoom: 8,\n          tilt: 0,\n          zoomControlOptions: {\n            position: window.google.maps.ControlPosition.RIGHT_TOP\n          },\n          disableDoubleClickZoom: false,\n          restriction: {\n            latLngBounds: {\n              north: 38.0,\n              south: 34.5,\n              east: 131.0,\n              west: 125.0\n            },\n            strictBounds: false\n          }\n        });\n\n        console.log('지도 인스턴스 생성 완료:', map);\n        mapInstance.current = map;\n        createMarkers();\n\n        map.addListener('zoom_changed', () => {\n          if (isClusterClicking.current) {\n            return;\n          }\n          \n          markersRef.current.forEach(marker => {\n            if (marker && marker.setMap) {\n              marker.setMap(null);\n            }\n          });\n          markersRef.current = [];\n\n          setTimeout(() => {\n            if (!isClusterClicking.current) {\n              createMarkers();\n            }\n          }, 300);\n        });\n\n        console.log('지도 초기화 완료');\n        return true;\n      } catch (error) {\n        console.error('지도 초기화 오류:', error);\n        return false;\n      }\n    };\n\n    const createMarkers = () => {\n      if (!mapInstance.current) return;\n      \n      const currentZoom = mapInstance.current.getZoom();\n      \n      if (currentZoom >= 18) {\n        properties.forEach((property, index) => {\n          const isSelected = selectedMarkerId === property.id;\n          const marker = new window.google.maps.Marker({\n            position: property.location,\n            map: mapInstance.current,\n            title: property.title,\n            icon: {\n              url: 'data:image/svg+xml;charset=UTF-8,' + encodeURIComponent(\n                isSelected\n                  ? `<svg width=\"44\" height=\"44\" viewBox=\"0 0 44 44\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\"><circle cx=\"22\" cy=\"22\" r=\"20\" fill=\"white\" stroke=\"#111\" stroke-width=\"3\"/><text x=\"22\" y=\"29\" text-anchor=\"middle\" fill=\"#111\" font-family=\"Arial, sans-serif\" font-size=\"16\" font-weight=\"bold\">1</text></svg>`\n                  : `<svg width=\"30\" height=\"30\" viewBox=\"0 0 30 30\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\"><circle cx=\"15\" cy=\"15\" r=\"13\" fill=\"#2563eb\" stroke=\"#1e40af\" stroke-width=\"2\"/><text x=\"15\" y=\"19\" text-anchor=\"middle\" fill=\"white\" font-family=\"Arial, sans-serif\" font-size=\"10\" font-weight=\"bold\">1</text></svg>`\n              ),\n              scaledSize: isSelected\n                ? new window.google.maps.Size(44, 44)\n                : new window.google.maps.Size(30, 30),\n              anchor: isSelected\n                ? new window.google.maps.Point(22, 22)\n                : new window.google.maps.Point(15, 15)\n            }\n          });\n\n          if (onMarkerClick) {\n            marker.addListener('click', () => {\n              console.log(`개별 마커 클릭됨: ${property.id} - ${property.title}`);\n              isClusterClicking.current = true;\n              \n              if (setSelectedMarkerId) setSelectedMarkerId(property.id);\n              if (setSelectedClusterId) setSelectedClusterId('');\n              onMarkerClick(property);\n              \n              setTimeout(() => {\n                isClusterClicking.current = false;\n              }, 1500);\n            });\n          }\n\n          markersRef.current.push(marker);\n        });\n      } else {\n        const clusters = clusterMarkers([], currentZoom);\n\n        clusters.forEach((cluster, clusterIndex) => {\n          if (cluster.properties.length === 1) {\n            const property = cluster.properties[0];\n            const isSelected = selectedMarkerId === property.id;\n            const marker = new window.google.maps.Marker({\n              position: property.location,\n              map: mapInstance.current,\n              title: property.title,\n              icon: {\n                url: 'data:image/svg+xml;charset=UTF-8,' + encodeURIComponent(\n                  isSelected\n                    ? `<svg width=\"44\" height=\"44\" viewBox=\"0 0 44 44\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\"><circle cx=\"22\" cy=\"22\" r=\"20\" fill=\"white\" stroke=\"#111\" stroke-width=\"3\"/><text x=\"22\" y=\"29\" text-anchor=\"middle\" fill=\"#111\" font-family=\"Arial, sans-serif\" font-size=\"16\" font-weight=\"bold\">1</text></svg>`\n                    : `<svg width=\"30\" height=\"30\" viewBox=\"0 0 30 30\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\"><circle cx=\"15\" cy=\"15\" r=\"13\" fill=\"#2563eb\" stroke=\"#1e40af\" stroke-width=\"2\"/><text x=\"15\" y=\"19\" text-anchor=\"middle\" fill=\"white\" font-family=\"Arial, sans-serif\" font-size=\"10\" font-weight=\"bold\">1</text></svg>`\n                ),\n                scaledSize: isSelected\n                  ? new window.google.maps.Size(44, 44)\n                  : new window.google.maps.Size(30, 30),\n                anchor: isSelected\n                  ? new window.google.maps.Point(22, 22)\n                  : new window.google.maps.Point(15, 15)\n              }\n            });\n\n            if (onMarkerClick) {\n              marker.addListener('click', () => {\n                console.log(`클러스터링된 단일 마커 클릭됨: ${property.id} - ${property.title}`);\n                isClusterClicking.current = true;\n                \n                if (setSelectedMarkerId) setSelectedMarkerId(property.id);\n                if (setSelectedClusterId) setSelectedClusterId('');\n                onMarkerClick(property);\n                \n                setTimeout(() => {\n                  isClusterClicking.current = false;\n                }, 1500);\n              });\n            }\n\n            markersRef.current.push(marker);\n          } else {\n            const clusterMarker = createClusterMarker(cluster.properties, cluster.center);\n            markersRef.current.push(clusterMarker);\n          }\n        });\n      }\n    };\n\n    const updateMarkers = () => {\n      if (!mapInstance.current) return;\n      \n      markersRef.current.forEach(marker => {\n        if (marker && marker.setMap) {\n          marker.setMap(null);\n        }\n      });\n      markersRef.current = [];\n\n      createMarkers();\n    };\n\n    const checkAndInit = () => {\n      console.log('Google Maps API 확인 중...');\n      if (window.google && window.google.maps) {\n        console.log('Google Maps API 로드됨, 지도 초기화 시도');\n        if (initMap()) {\n          console.log('지도 초기화 성공');\n          return;\n        }\n      } else {\n        console.log('Google Maps API 아직 로드되지 않음, 재시도...');\n      }\n      \n      setTimeout(checkAndInit, 100);\n    };\n\n    checkAndInit();\n\n    return () => {\n      markersRef.current.forEach(marker => {\n        if (marker && marker.setMap) {\n          marker.setMap(null);\n        }\n      });\n      markersRef.current = [];\n    };\n  }, [properties, onMarkerClick, onClusterClick, selectedMarkerId, setSelectedMarkerId, selectedClusterId, setSelectedClusterId]);\n\n  return (\n    <MapContainer ref={mapRef} />\n  );\n};\n\nexport default GoogleMap;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}